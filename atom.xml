<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lilinzta&#39;s blog</title>
  
  
  <link href="https://lilinzta.github.io/atom.xml" rel="self"/>
  
  <link href="https://lilinzta.github.io/"/>
  <updated>2024-01-20T11:48:08.663Z</updated>
  <id>https://lilinzta.github.io/</id>
  
  <author>
    <name>Haotian Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arch Linux 安装 qemu</title>
    <link href="https://lilinzta.github.io/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/"/>
    <id>https://lilinzta.github.io/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/</id>
    <published>2024-01-20T11:28:25.000Z</published>
    <updated>2024-01-20T11:48:08.663Z</updated>
    
    
    
    
    
    <category term="Arch Linux" scheme="https://lilinzta.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 4 安装系统</title>
    <link href="https://lilinzta.github.io/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <id>https://lilinzta.github.io/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-12-12T14:42:36.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验.</p><span id="more"></span><h2 id="1-官方推荐方式"><a href="#1-官方推荐方式" class="headerlink" title="1.官方推荐方式"></a>1.官方推荐方式</h2><p>下载官方的烧写工具，它会自动替你下载镜像文件，还支持添加一些自定义配置，比如用户名和密码，wifi 和 ssh.</p><p>适合只有一台电脑和一个树莓派的情况.</p><blockquote><p>我是因为校园网的原因，只能使用电脑开热点，让树莓派去连.</p></blockquote><p>如果你在 GNU&#x2F;Linux 下开热点遇到困难，可以参考我的这个脚本(很久之前网上找的)，如果你有更好的方式，也欢迎在评论区留言.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>sudo iw phy phy0 interface add wlan0_ap <span class="hljs-built_in">type</span> managed addr 12:34:56:ab:<span class="hljs-built_in">cd</span>:ef<br><br>sudo create_ap -c 11 wlan0_ap wlan0 NAME PASSWD &gt;/dev/null &amp;<br></code></pre></td></tr></table></figure><h2 id="2-安装其它的GNU-Linux-ARM-版本"><a href="#2-安装其它的GNU-Linux-ARM-版本" class="headerlink" title="2.安装其它的GNU&#x2F;Linux ARM 版本"></a>2.安装其它的GNU&#x2F;Linux ARM 版本</h2><p>文档都很详细，我就不多说了.</p><h3 id="Kali-Linux-ARM"><a href="#Kali-Linux-ARM" class="headerlink" title="Kali Linux ARM"></a><a href="https://www.kali.org/docs/arm/raspberry-pi-4/">Kali Linux ARM</a></h3><h3 id="Arch-Linux-ARM"><a href="#Arch-Linux-ARM" class="headerlink" title="Arch Linux ARM"></a><a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">Arch Linux ARM</a></h3><h2 id="3-TODO"><a href="#3-TODO" class="headerlink" title="3.TODO"></a>3.TODO</h2><p>32bit 和 64bit 的系统都试过，目前还没有通过HDMI接显示器进入过桌面环境.</p><p>放假回家之后树莓派能直接插路由器上，就能装 Arch Linux ARM 了😀.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Raspberry Pi 4" scheme="https://lilinzta.github.io/tags/Raspberry-Pi-4/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab4(MNIST手写数字识别)</title>
    <link href="https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</id>
    <published>2023-11-26T02:19:32.000Z</published>
    <updated>2024-01-20T11:31:59.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python another_lab4/main.py<br></code></pre></td></tr></table></figure><blockquote><p>another_lab4&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> MNIST<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.fc1 = torch.nn.Linear(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>, <span class="hljs-number">64</span>)<br>        self.fc2 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        self.fc3 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        self.fc4 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(self.fc1(x))<br>        x = torch.nn.functional.relu(self.fc2(x))<br>        x = torch.nn.functional.relu(self.fc3(x))<br>        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_loader</span>(<span class="hljs-params">is_train</span>):<br>    to_tensor = transforms.Compose([transforms.ToTensor()])<br>    data_set = MNIST(<span class="hljs-string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> DataLoader(data_set, batch_size=<span class="hljs-number">15</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate</span>(<span class="hljs-params">test_data, net</span>):<br>    n_correct = <span class="hljs-number">0</span><br>    n_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_data:<br>            outputs = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            <span class="hljs-keyword">for</span> i, output <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(outputs):<br>                <span class="hljs-keyword">if</span> torch.argmax(output) == y[i]:<br>                    n_correct += <span class="hljs-number">1</span><br>                n_total += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> n_correct / n_total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    train_data = get_data_loader(is_train=<span class="hljs-literal">True</span>)<br>    test_data = get_data_loader(is_train=<span class="hljs-literal">False</span>)<br>    net = Net()<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))<br>    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_data:<br>            net.zero_grad()<br>            output = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            loss = torch.nn.functional.nll_loss(output, y)<br>            loss.backward()<br>            optimizer.step()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch&quot;</span>, epoch, <span class="hljs-string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))<br><br>    <span class="hljs-keyword">for</span> (n, (x, _)) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_data):<br>        <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span><br>        predict = torch.argmax(net.forward(x[<span class="hljs-number">0</span>].view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>)))<br>        plt.figure(n)<br>        plt.imshow(x[<span class="hljs-number">0</span>].view(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>))<br>        plt.title(<span class="hljs-string">&quot;prediction: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(predict)))<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/another_lab4-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/categories/lab/"/>
    
    
    <category term="人工智能技术" scheme="https://lilinzta.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab3(基于线性回归的预测)</title>
    <link href="https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/"/>
    <id>https://lilinzta.github.io/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/</id>
    <published>2023-11-26T02:04:38.000Z</published>
    <updated>2024-01-20T11:31:54.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python lab3/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab3&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_california_housing<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> linearregression<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-comment"># 加载加利福尼亚州房价数据集</span><br>    housing_22 = fetch_california_housing()<br>    x_22, y_22 = housing_22.data, housing_22.target<br><br>    <span class="hljs-comment"># 划分数据集为训练集和测试集</span><br>    x_train_22, x_test_22, y_train_22, y_test_22 = train_test_split(<br>        x_22, y_22, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br>    <span class="hljs-comment"># 初始化线性回归模型</span><br>    model_22 = linearregression()<br><br>    <span class="hljs-comment"># 训练模型</span><br>    model_22.fit(x_train_22, y_train_22)<br><br>    <span class="hljs-comment"># 在测试集上进行预测</span><br>    y_pred_22 = model_22.predict(x_test_22)<br><br>    <span class="hljs-comment"># 评估模型性能</span><br>    mse_22 = mean_squared_error(y_test_22, y_pred_22)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mean squared error on test set: <span class="hljs-subst">&#123;mse_22&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 绘制真实值与预测值的对比图</span><br>    plt.scatter(y_test_22, y_pred_22)<br>    plt.xlabel(<span class="hljs-string">&#x27;true values&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;predictions&#x27;</span>)<br>    plt.title(<span class="hljs-string">&#x27;true values vs. predictions&#x27;</span>)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab3-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/categories/lab/"/>
    
    
    <category term="人工智能技术" scheme="https://lilinzta.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab2(K-Means)</title>
    <link href="https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/"/>
    <id>https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/</id>
    <published>2023-11-16T09:49:40.000Z</published>
    <updated>2024-01-20T11:31:48.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python lab2/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab2&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html</span><br><br><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_digits<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 使用load_digits()加载数字数据集，并提取特征和标签。确定了样本数、特征数和唯一标签的数量。</span><br>data_22, labels_22 = load_digits(return_X_y=<span class="hljs-literal">True</span>)<br>(n_samples, n_features), n_digits_22 = data_22.shape, np.unique(labels_22).size<br><br><span class="hljs-comment"># 使用PCA将数据的维度减少为2个，以便进行可视化。</span><br>reduced_data_22 = PCA(n_components=<span class="hljs-number">2</span>).fit_transform(data_22)<br><br><span class="hljs-comment"># 在减少的数据上应用K均值，并创建一个2D散点图以可视化聚类。</span><br>kmeans_22 = KMeans(init=<span class="hljs-string">&quot;k-means++&quot;</span>, n_clusters=n_digits_22, n_init=<span class="hljs-number">4</span>)<br>kmeans_22.fit(reduced_data_22)<br><br><span class="hljs-comment"># 定义一个网格中的点的步长</span><br>h = <span class="hljs-number">0.02</span><br><br>x_min, x_max = reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>y_min, y_max = reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 生成一个网格，以便在图中可视化聚类的结果</span><br>xx_22, yy_22 = np.meshgrid(np.arange(x_min, x_max, h),<br>                           np.arange(y_min, y_max, h))<br><br>Z = kmeans_22.predict(np.c_[xx_22.ravel(), yy_22.ravel()])<br><br>Z = Z.reshape(xx_22.shape)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.clf()<br><br><span class="hljs-comment"># 在2D空间上绘制聚类结果，用白色十字标记聚类中心。</span><br>plt.imshow(Z,<br>           interpolation=<span class="hljs-string">&quot;nearest&quot;</span>,<br>           extent=(xx_22.<span class="hljs-built_in">min</span>(),<br>                   xx_22.<span class="hljs-built_in">max</span>(),<br>                   yy_22.<span class="hljs-built_in">min</span>(),<br>                   yy_22.<span class="hljs-built_in">max</span>()),<br>           cmap=plt.cm.Paired,<br>           aspect=<span class="hljs-string">&quot;auto&quot;</span>,<br>           origin=<span class="hljs-string">&quot;lower&quot;</span>,)<br><br>plt.plot(reduced_data_22[:, <span class="hljs-number">0</span>], reduced_data_22[:, <span class="hljs-number">1</span>], <span class="hljs-string">&quot;k.&quot;</span>, markersize=<span class="hljs-number">2</span>)<br>centroids = kmeans_22.cluster_centers_<br>plt.scatter(centroids[:, <span class="hljs-number">0</span>],<br>            centroids[:, <span class="hljs-number">1</span>],<br>            marker=<span class="hljs-string">&quot;x&quot;</span>,<br>            s=<span class="hljs-number">169</span>,<br>            linewidths=<span class="hljs-number">3</span>,<br>            color=<span class="hljs-string">&quot;w&quot;</span>,<br>            zorder=<span class="hljs-number">10</span>)<br>plt.title(<br>    <span class="hljs-string">&quot;K-means clustering on the digits dataset (PCA-reduced data)\n&quot;</span><br>    <span class="hljs-string">&quot;Centroids are marked with white cross&quot;</span><br>)<br>plt.xlim(x_min, x_max)<br>plt.ylim(y_min, y_max)<br>plt.xticks(())<br>plt.yticks(())<br><br><span class="hljs-comment"># 显示绘图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab2-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/categories/lab/"/>
    
    
    <category term="人工智能技术" scheme="https://lilinzta.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>人工智能技术 lab1(KNN)</title>
    <link href="https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/"/>
    <id>https://lilinzta.github.io/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/</id>
    <published>2023-11-16T09:07:55.000Z</published>
    <updated>2024-01-20T11:30:49.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m venv venv<br></code></pre></td></tr></table></figure><h2 id="2-激活虚拟环境"><a href="#2-激活虚拟环境" class="headerlink" title="2.激活虚拟环境"></a>2.激活虚拟环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> venv/bin/activate<br></code></pre></td></tr></table></figure><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python lab1/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab1&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://tjxlab.gitbooks.io/bigdata/content/da-shu-ju-fen-xi-yu-wa-jue-shi-yan/shi-yanyi-ff1a-knn-fen-lei-shi-yan.html</span><br><br><span class="hljs-comment"># numpy 库用于科学计算，matplotlib 库用于绘图</span><br><span class="hljs-comment"># Scikit-learn 库中的 neighbors 模块和 datasets 模块分别包含KNN分类器和一些常用的数据集</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib.colors <span class="hljs-keyword">import</span> ListedColormap<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> neighbors, datasets<br><br><span class="hljs-comment"># 定义邻居个数，设定KNN算法中邻居个数为15</span><br>n_neighbors_22 = <span class="hljs-number">15</span><br><br><span class="hljs-comment"># 加载iris数据集，使用 Scikit-learn 中的 load_iris() 函数加载鸢尾花数据集</span><br>iris_22 = datasets.load_iris()<br><br><span class="hljs-comment"># 选择特征，使用了鸢尾花数据集中的前两个特征</span><br>X_22 = iris_22.data[:, :<span class="hljs-number">2</span>]<br>y_22 = iris_22.target<br><br><span class="hljs-comment"># 设置步长和创建颜色映射，h 是在可视化决策边界时使用的步长</span><br><span class="hljs-comment"># cmap_light 和 cmap_bold 是两个颜色映射，用于可视化轻量级背景和加粗版背景颜色</span><br>h_22 = <span class="hljs-number">.02</span>  <span class="hljs-comment"># step size in the mesh</span><br>cmap_light = ListedColormap([<span class="hljs-string">&#x27;#FFAAAA&#x27;</span>, <span class="hljs-string">&#x27;#AAFFAA&#x27;</span>, <span class="hljs-string">&#x27;#AAAAFF&#x27;</span>])<br>cmap_bold = ListedColormap([<span class="hljs-string">&#x27;#FF0000&#x27;</span>, <span class="hljs-string">&#x27;#00FF00&#x27;</span>, <span class="hljs-string">&#x27;#0000FF&#x27;</span>])<br><br><span class="hljs-comment"># 循环进行KNN分类和可视化</span><br><span class="hljs-keyword">for</span> weights <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;uniform&#x27;</span>, <span class="hljs-string">&#x27;distance&#x27;</span>]:<br>    <span class="hljs-comment"># 使用循环，分别使用两种权重（uniform和distance）创建KNN分类器实例，并对数据进行拟合。</span><br>    clf = neighbors.KNeighborsClassifier(n_neighbors_22, weights=weights)<br>    clf.fit(X_22, y_22)<br><br>    <span class="hljs-comment"># 为了绘制决策边界，定义一个网格，并在网格上计算模型的预测值</span><br>    x_min, x_max = X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    y_min, y_max = X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    xx, yy = np.meshgrid(np.arange(x_min, x_max, h_22),<br>                         np.arange(y_min, y_max, h_22))<br><br>    <span class="hljs-comment"># 使用模型对网格中的点进行预测</span><br>    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])<br><br>    <span class="hljs-comment"># 将预测结果以颜色的形式绘制在网格上</span><br>    Z = Z.reshape(xx.shape)<br>    plt.figure()<br>    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)<br><br>    <span class="hljs-comment"># 将训练数据集上的点用散点图表示，并显示图表的标题</span><br>    plt.scatter(X_22[:, <span class="hljs-number">0</span>], X_22[:, <span class="hljs-number">1</span>], c=y_22, cmap=cmap_bold,<br>                edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, s=<span class="hljs-number">20</span>)<br>    plt.xlim(xx.<span class="hljs-built_in">min</span>(), xx.<span class="hljs-built_in">max</span>())<br>    plt.ylim(yy.<span class="hljs-built_in">min</span>(), yy.<span class="hljs-built_in">max</span>())<br>    plt.title(<span class="hljs-string">&quot;3-Class classification (k = %i, weights = &#x27;%s&#x27;)&quot;</span><br>              % (n_neighbors_22, weights))<br><br><span class="hljs-comment"># 最后，通过 plt.show() 将图形显示出来</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab1-result.jpg width=100% />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;source-code-and-requirements&quot;&gt;&lt;a href=&quot;#source-code-and-requirements&quot; class=&quot;headerlink&quot; title=&quot;source code and requirements&quot;&gt;&lt;/a&gt;&lt;a</summary>
      
    
    
    
    <category term="lab" scheme="https://lilinzta.github.io/categories/lab/"/>
    
    
    <category term="人工智能技术" scheme="https://lilinzta.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 切换 java 环境</title>
    <link href="https://lilinzta.github.io/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/"/>
    <id>https://lilinzta.github.io/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/</id>
    <published>2023-10-23T09:06:06.000Z</published>
    <updated>2024-01-20T12:10:24.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="archlinux-java"><a href="#archlinux-java" class="headerlink" title="archlinux-java"></a>archlinux-java</h3><p>输出如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ archlinux-java --<span class="hljs-built_in">help</span><br>archlinux-java &lt;COMMAND&gt;<br><br>COMMAND:<br>statusList installed Java environments and enabled one<br>getReturn the short name of the Java environment <span class="hljs-built_in">set</span> as default<br><span class="hljs-built_in">set</span> &lt;JAVA_ENV&gt;Force &lt;JAVA_ENV&gt; as default<br><span class="hljs-built_in">unset</span>Unset current default Java environment<br>fixFix an invalid/broken default Java environment configuration<br></code></pre></td></tr></table></figure><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>获取当前设置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ archlinux-java get<br>java-21-openjdk<br></code></pre></td></tr></table></figure><p>查看所有可用Java环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ archlinux-java status<br>Available Java environments:<br>  java-11-openjdk<br>  java-17-openjdk<br>  java-21-openjdk (default)<br>  java-8-openjdk<br></code></pre></td></tr></table></figure><p>要更改默认设置，请使用root权限:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">❯ sudo archlinux-java <span class="hljs-built_in">set</span> java-17-openjdk<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;archlinux-java&quot;&gt;&lt;a href=&quot;#archlinux-java&quot; class=&quot;headerlink&quot; title=&quot;archlinux-java&quot;&gt;&lt;/a&gt;archlinux-java&lt;/h3&gt;&lt;p&gt;输出如下:&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="Arch Linux" scheme="https://lilinzta.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>15.注释和文档</title>
    <link href="https://lilinzta.github.io/2023/10/14/15-%E6%B3%A8%E9%87%8A%E5%92%8C%E6%96%87%E6%A1%A3/"/>
    <id>https://lilinzta.github.io/2023/10/14/15-%E6%B3%A8%E9%87%8A%E5%92%8C%E6%96%87%E6%A1%A3/</id>
    <published>2023-10-14T12:41:04.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/* 只使用注释让下面代码工作! */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    todo!();<br>    <span class="hljs-built_in">unimplemented!</span>();<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span> + <span class="hljs-number">3</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span> )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>文档注释会被解析为 HTML 文件，并支持 Markdown 语法。</p><p>在开始之前，我们需要创建一个新的项目用于后面的练习: cargo new –lib doc-comments.</p><h3 id="行文档注释"><a href="#行文档注释" class="headerlink" title="行文档注释 &#x2F;&#x2F;&#x2F;"></a>行文档注释 &#x2F;&#x2F;&#x2F;</h3><p>为 add_one 函数添加文档</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-comment">/// Add one to the given value and return the value</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// # Examples</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// let arg = 5;</span><br><span class="hljs-comment">/// let answer = my_crate::add_one(arg);</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// assert_eq!(6, answer);</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_one</span>(x: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    x + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Cargo-doc"><a href="#Cargo-doc" class="headerlink" title="Cargo doc"></a>Cargo doc</h3><p>我们可以使用 cargo doc –open 来生成 HTML 文件，并自动在浏览器中打开网页。</p><h3 id="块文档注释-…"><a href="#块文档注释-…" class="headerlink" title="块文档注释 &#x2F;** … *&#x2F;"></a>块文档注释 &#x2F;** … *&#x2F;</h3><p>为函数 add_two 添加文档:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/** Add two to the given value and return a new value</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">let arg = 5;</span><br><span class="hljs-comment">let answer = my_crate::add_two(arg);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">assert_eq!(7, answer);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_two</span>(x: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    x + <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为包和模块创建文档注释"><a href="#为包和模块创建文档注释" class="headerlink" title="为包和模块创建文档注释"></a>为包和模块创建文档注释</h3><p>我们还可以创建包和模块的注释，用于描述它们的功能。</p><p>首先，来为我们的库包添加一些文档注释:</p><blockquote><p>注意：必须要将包、模块注释放置在包根或模块文件的最顶部</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//! # 文档注释</span><br><span class="hljs-comment">//!</span><br><span class="hljs-comment">//! 该库用于文档注释的教学</span><br><br><span class="hljs-comment">// in lib.rs</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> compute;<br></code></pre></td></tr></table></figure><p>同样的，我们还可以使用块注释来达成目的:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/*! # 文档注释</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 该库用于文档注释的教学 */</span><br></code></pre></td></tr></table></figure><p>下一步，创建一个新的模块文件 src&#x2F;compute.rs, 然后在其中添加以下注释:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//! 本模块用于处理一些复杂计算</span><br><br><span class="hljs-comment">// in compute.rs</span><br></code></pre></td></tr></table></figure><p>然后运行 cargo doc –open 查看下结果。</p><h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><p>细心的同学可能会发现之前的 add_one 和 add_tow 的文档注释中，包含了两个示例代码块.</p><p>以上示例不仅仅是作为文档用于演示你的函数该如何使用，它的另一个作用就是用于文档测试 cargo test。</p><h3 id="2-🌟🌟-但是在这两个函数的示例中，存在错误，请修复它们并使用-cargo-test-获取以下输出结果"><a href="#2-🌟🌟-但是在这两个函数的示例中，存在错误，请修复它们并使用-cargo-test-获取以下输出结果" class="headerlink" title="2.🌟🌟 但是在这两个函数的示例中，存在错误，请修复它们并使用 cargo test 获取以下输出结果:"></a>2.🌟🌟 但是在这两个函数的示例中，存在错误，请修复它们并使用 cargo test 获取以下输出结果:</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">running 0 tests<br><br><span class="hljs-built_in">test</span> result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished <span class="hljs-keyword">in</span> 0.00s<br><br>   Doc-tests doc-comments<br><br>running 2 tests<br><span class="hljs-built_in">test</span> src/lib.rs - add_one (line 11) ... ok<br><span class="hljs-built_in">test</span> src/lib.rs - add_two (line 26) ... ok<br><br><span class="hljs-built_in">test</span> result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished <span class="hljs-keyword">in</span> 0.55s<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-有时我们会期望示例的结果是一个-panic。将以下代码添加到-src-compute-rs-，并且让-cargo-test-成功运行"><a href="#3-🌟🌟-有时我们会期望示例的结果是一个-panic。将以下代码添加到-src-compute-rs-，并且让-cargo-test-成功运行" class="headerlink" title="3.🌟🌟 有时我们会期望示例的结果是一个 panic。将以下代码添加到 src&#x2F;compute.rs ，并且让 cargo test 成功运行."></a>3.🌟🌟 有时我们会期望示例的结果是一个 panic。将以下代码添加到 src&#x2F;compute.rs ，并且让 cargo test 成功运行.</h3><blockquote><p>你只能修改注释，不要修改 fn div</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in src/compute.rs</span><br><br><span class="hljs-comment">/// # Panics</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// The function panics if the second argument is zero.</span><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// ```rust,should_panic</span><br><span class="hljs-comment">/// // panics on division by zero</span><br><span class="hljs-comment">/// doc_comments::compute::div(10, 0);</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">div</span>(a: <span class="hljs-type">i32</span>, b: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Divide-by-zero error&quot;</span>);<br>    &#125;<br><br>    a / b<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟有时我们会想要隐藏文档，但是保留文档测试"><a href="#4-🌟🌟有时我们会想要隐藏文档，但是保留文档测试" class="headerlink" title="4.🌟🌟有时我们会想要隐藏文档，但是保留文档测试"></a>4.🌟🌟有时我们会想要隐藏文档，但是保留文档测试</h3><p>将以下代码添加到 src&#x2F;compute.rs ,</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in src/compute.rs</span><br><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// # fn try_main() -&gt; Result&lt;(), String&gt; &#123;</span><br><span class="hljs-comment">/// let res = doc_comments::compute::try_div(10, 0)?;</span><br><span class="hljs-comment">/// # Ok(()) // returning from try_main</span><br><span class="hljs-comment">/// # &#125;</span><br><span class="hljs-comment">/// # fn main() &#123;</span><br><span class="hljs-comment">/// #    try_main().unwrap();</span><br><span class="hljs-comment">/// #</span><br><span class="hljs-comment">/// # &#125;</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">try_div</span>(a: <span class="hljs-type">i32</span>, b: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">String</span>&gt; &#123;<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-title function_ invoke__">Err</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Divide-by-zero&quot;</span>))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(a / b)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后修改以上代码已实现两个目标:</p><ul><li>文档注释不能出现在 cargo doc –open 生成的网页中</li><li>运行测试，并成功看到以下结果:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">running 0 tests<br><br><span class="hljs-built_in">test</span> result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished <span class="hljs-keyword">in</span> 0.00s<br><br>   Doc-tests doc-comments<br><br>running 4 tests<br><span class="hljs-built_in">test</span> src/compute.rs - compute::div (line 7) ... ok<br><span class="hljs-built_in">test</span> src/lib.rs - add_two (line 27) ... ok<br><span class="hljs-built_in">test</span> src/lib.rs - add_one (line 11) ... ok<br><span class="hljs-built_in">test</span> src/compute.rs - compute::try_div (line 20) ... ok<br><br><span class="hljs-built_in">test</span> result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished <span class="hljs-keyword">in</span> 0.51s<br></code></pre></td></tr></table></figure></li></ul><h3 id="代码跳转"><a href="#代码跳转" class="headerlink" title="代码跳转"></a>代码跳转</h3><p>Rust 为我们提供一个非常强大的特性：可以在文档注释中实现代码跳转。</p><p>将以下代码添加到 src&#x2F;lib.rs:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-comment">/// Add one to the given value and return a [`Option`] type</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_three</span>(x: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(x + <span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>除了跳转到标准库中，我们还能跳转到项目中的其它模块。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-keyword">mod</span> a &#123;<br>    <span class="hljs-comment">/// Add four to the given value and return a [`Option`] type</span><br>    <span class="hljs-comment">/// [`crate::MySpecialFormatter`]</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_four</span>(x: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(x + <span class="hljs-number">4</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MySpecialFormatter</span>;<br></code></pre></td></tr></table></figure><h3 id="文档属性"><a href="#文档属性" class="headerlink" title="文档属性"></a>文档属性</h3><p>下面是很常用的 #[doc] 属性，该属性可以被 rustdoc 所使用。</p><h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><p>可以用于内联文档, 而不是链接到一个单独的页面。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[doc(inline)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> bar::Bar;<br><br><span class="hljs-comment">/// bar docs</span><br><span class="hljs-keyword">mod</span> bar &#123;<br>    <span class="hljs-comment">/// the docs for Bar</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bar</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="no-inline"><a href="#no-inline" class="headerlink" title="no_inline"></a>no_inline</h3><p>用于防止链接到单独的页面或其它地方。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// Example from libcore/prelude</span><br><span class="hljs-meta">#[doc(no_inline)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> crate::mem::drop;<br></code></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><p>通过这个属性让 rustdoc 不要将下面的项包含在文档中:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// Example from the futures-rs library</span><br><span class="hljs-meta">#[doc(hidden)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> self::async_await::*;<br></code></pre></td></tr></table></figure><p>对文档来说，rustdoc 被社区广泛采用，大家所看到的<a href="https://doc.rust-lang.org/std/">标准库文档</a>也是基于此生成的。</p><h3 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h3><p>doc-comments 的完整代码可以在<a href="https://github.com/sunface/rust-by-practice/tree/master/practices/doc-comments">这里找到</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;h3 id=&quot;1-🌟🌟&quot;&gt;&lt;a href=&quot;#1-🌟🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>14.3.使用 use 引入模块及受限可见性</title>
    <link href="https://lilinzta.github.io/2023/10/11/14-3-%E4%BD%BF%E7%94%A8-use-%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%8F%97%E9%99%90%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
    <id>https://lilinzta.github.io/2023/10/11/14-3-%E4%BD%BF%E7%94%A8-use-%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%8F%97%E9%99%90%E5%8F%AF%E8%A7%81%E6%80%A7/</id>
    <published>2023-10-11T13:12:43.000Z</published>
    <updated>2024-01-20T11:33:38.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟-使用-use-可以将两个同名类型引入到当前作用域中，但是别忘了-as-关键字"><a href="#1-🌟-使用-use-可以将两个同名类型引入到当前作用域中，但是别忘了-as-关键字" class="headerlink" title="1.🌟 使用 use 可以将两个同名类型引入到当前作用域中，但是别忘了 as 关键字."></a>1.🌟 使用 use 可以将两个同名类型引入到当前作用域中，但是别忘了 as 关键字.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fmt::<span class="hljs-type">Result</span>;<br><span class="hljs-keyword">use</span> std::io::<span class="hljs-type">Result</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fmt::<span class="hljs-type">Result</span>;<br><span class="hljs-keyword">use</span> std::io::<span class="hljs-type">Result</span> <span class="hljs-keyword">as</span> IoResult;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-如果我们在使用来自同一个包或模块中的多个不同项，那么可以通过简单的方式将它们一次性引入进来"><a href="#2-🌟🌟-如果我们在使用来自同一个包或模块中的多个不同项，那么可以通过简单的方式将它们一次性引入进来" class="headerlink" title="2.🌟🌟 如果我们在使用来自同一个包或模块中的多个不同项，那么可以通过简单的方式将它们一次性引入进来"></a>2.🌟🌟 如果我们在使用来自同一个包或模块中的多个不同项，那么可以通过简单的方式将它们一次性引入进来</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方式填空</span><br><span class="hljs-comment">// 不要添加新的代码行</span><br><span class="hljs-keyword">use</span> std::collections::__;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c1</span>:HashMap&lt;&amp;<span class="hljs-type">str</span>, <span class="hljs-type">i32</span>&gt; = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">c2</span> = BTreeMap::<span class="hljs-title function_ invoke__">new</span>();<br>    c2.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c3</span>: HashSet&lt;<span class="hljs-type">i32</span>&gt; = HashSet::<span class="hljs-title function_ invoke__">new</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方式填空</span><br><span class="hljs-comment">// 不要添加新的代码行</span><br><span class="hljs-keyword">use</span> std::collections::*;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c1</span>:HashMap&lt;&amp;<span class="hljs-type">str</span>, <span class="hljs-type">i32</span>&gt; = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">c2</span> = BTreeMap::<span class="hljs-title function_ invoke__">new</span>();<br>    c2.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c3</span>: HashSet&lt;<span class="hljs-type">i32</span>&gt; = HashSet::<span class="hljs-title function_ invoke__">new</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方式填空</span><br><span class="hljs-comment">// 不要添加新的代码行</span><br><span class="hljs-keyword">use</span> std::collections::&#123;HashMap, BTreeMap, HashSet&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c1</span>:HashMap&lt;&amp;<span class="hljs-type">str</span>, <span class="hljs-type">i32</span>&gt; = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">c2</span> = BTreeMap::<span class="hljs-title function_ invoke__">new</span>();<br>    c2.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_c3</span>: HashSet&lt;<span class="hljs-type">i32</span>&gt; = HashSet::<span class="hljs-title function_ invoke__">new</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-pub-use-进行再导出"><a href="#使用-pub-use-进行再导出" class="headerlink" title="使用 pub use 进行再导出"></a>使用 pub use 进行再导出</h2><h3 id="3-🌟🌟🌟-在之前创建的hello-package-的库包中-添加一些代码让下面的代码能够正常工作"><a href="#3-🌟🌟🌟-在之前创建的hello-package-的库包中-添加一些代码让下面的代码能够正常工作" class="headerlink" title="3.🌟🌟🌟 在之前创建的hello-package 的库包中, 添加一些代码让下面的代码能够正常工作"></a>3.🌟🌟🌟 在之前创建的hello-package 的库包中, 添加一些代码让下面的代码能够正常工作</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(hello_package::hosting::<span class="hljs-title function_ invoke__">seat_at_table</span>(), <span class="hljs-string">&quot;sit down please&quot;</span>);<br>     <span class="hljs-built_in">assert_eq!</span>(hello_package::<span class="hljs-title function_ invoke__">eat_at_restaurant</span>(),<span class="hljs-string">&quot;yummy yummy!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-comment">// Add this line</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> crate::front_of_house::hosting;<br></code></pre></td></tr></table></figure><h2 id="pub-in-Crate"><a href="#pub-in-Crate" class="headerlink" title="pub(in Crate)"></a>pub(in Crate)</h2><p>有时我们希望某一个项只对特定的包可见，那么就可以使用 pub(in Crate) 语法.</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> a &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> I: <span class="hljs-type">i32</span> = <span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">semisecret</span>(x: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">use</span> self::b::c::J;<br>        x + J<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bar</span>(z: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-title function_ invoke__">semisecret</span>(I) * z<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>(y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-title function_ invoke__">semisecret</span>(I) + y<br>    &#125;<br><br>    <span class="hljs-keyword">mod</span> b &#123;<br>        <span class="hljs-title function_ invoke__">pub</span>(<span class="hljs-keyword">in</span> crate::a) <span class="hljs-keyword">mod</span> c &#123;<br>            <span class="hljs-title function_ invoke__">pub</span>(<span class="hljs-keyword">in</span> crate::a) <span class="hljs-keyword">const</span> J: <span class="hljs-type">i32</span> = <span class="hljs-number">4</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>至此，包与模块章节已经结束，关于 hello-package 的完整代码可以在<a href="https://github.com/sunface/rust-by-practice/tree/master/practices/hello-package">这里</a>找到.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟-使用-use-可以将两个同名类型引入到当前作用域中，但是别忘了-as-关键字&quot;&gt;&lt;a href=&quot;#1-🌟-使用-use-可以将两个同名类型引入到当前作用域中，但是别忘了-as-关键字&quot; class=&quot;headerlink&quot; title=&quot;1.🌟 使</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>14.2.模块 Module</title>
    <link href="https://lilinzta.github.io/2023/10/09/14-2-%E6%A8%A1%E5%9D%97-Module/"/>
    <id>https://lilinzta.github.io/2023/10/09/14-2-%E6%A8%A1%E5%9D%97-Module/</id>
    <published>2023-10-09T13:32:31.000Z</published>
    <updated>2024-01-20T11:33:58.957Z</updated>
    
    <content type="html"><![CDATA[<p>在 Rust 语言圣经中，我们已经深入讲解过模块module，这里就不再赘述，直接开始我们的练习。</p><span id="more"></span><p>之前我们创建了一个 package hello-package，它的目录结构在经过多次修改后，变成了以下模样:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── Cargo.toml<br>├── src<br>│   ├── lib.rs<br>│   └── main.rs<br></code></pre></td></tr></table></figure><p>下面，我们来为其中的库包创建一些模块，然后在二进制包中使用这些模块。</p><h3 id="1-🌟🌟-根据以下的模块树描述实现模块-front-of-house"><a href="#1-🌟🌟-根据以下的模块树描述实现模块-front-of-house" class="headerlink" title="1.🌟🌟 根据以下的模块树描述实现模块 front_of_house :"></a>1.🌟🌟 根据以下的模块树描述实现模块 front_of_house :</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">库包的根(src/lib.rs)<br> └── front_of_house<br>     ├── hosting<br>     │   ├── add_to_waitlist<br>     │   └── seat_at_table<br>     └── serving<br>         ├── take_order<br>         ├── serve_order<br>         ├── take_payment<br>         └── complain<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">// 填空<br>// <span class="hljs-keyword">in</span> lib.rs<br><br>mod front_of_house &#123;<br>    mod hosting &#123;<br>        fn <span class="hljs-function"><span class="hljs-title">add_to_waitlist</span></span>() &#123;&#125;<br><br>        fn <span class="hljs-function"><span class="hljs-title">seat_at_table</span></span>() &#123;&#125;<br>    &#125;<br><br>    mod serving &#123;<br>        fn <span class="hljs-function"><span class="hljs-title">take_order</span></span>() &#123;&#125;<br><br>        fn <span class="hljs-function"><span class="hljs-title">serve_order</span></span>() &#123;&#125;<br><br>        fn <span class="hljs-function"><span class="hljs-title">take_payment</span></span>() &#123;&#125;<br><br>        fn <span class="hljs-function"><span class="hljs-title">complain</span></span>() &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-让我们在库包的根中定义一个函数-eat-at-restaurant-然后在该函数中调用之前创建的函数-eat-at-restaurant"><a href="#2-🌟🌟-让我们在库包的根中定义一个函数-eat-at-restaurant-然后在该函数中调用之前创建的函数-eat-at-restaurant" class="headerlink" title="2.🌟🌟 让我们在库包的根中定义一个函数 eat_at_restaurant, 然后在该函数中调用之前创建的函数 eat_at_restaurant"></a>2.🌟🌟 让我们在库包的根中定义一个函数 eat_at_restaurant, 然后在该函数中调用之前创建的函数 eat_at_restaurant</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-comment">// 填空并修复错误</span><br><br><span class="hljs-comment">// 提示：你需要通过 `pub` 将一些项标记为公有的，这样模块 `front_of_house` 中的项才能被模块外的项访问</span><br><span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-comment">/* ...snip... */</span><br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    <span class="hljs-comment">// 使用绝对路径调用</span><br>    __.<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br><br>    <span class="hljs-comment">// 使用相对路径调用</span><br>     __.<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">seat_at_table</span>() &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> serving &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_order</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">serve_order</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_payment</span>() &#123;&#125;<br><br>        <span class="hljs-comment">// Maybe you don&#x27;t want the guest hearing the your complaining about them</span><br>        <span class="hljs-comment">// So just make it private</span><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">complain</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    <span class="hljs-comment">// 绝对路径</span><br>    crate::front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br><br>    <span class="hljs-comment">// 相对路径</span><br>    front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-我们还可以使用-super-来导入父模块中的项"><a href="#3-🌟🌟-我们还可以使用-super-来导入父模块中的项" class="headerlink" title="3.🌟🌟 我们还可以使用 super 来导入父模块中的项"></a>3.🌟🌟 我们还可以使用 super 来导入父模块中的项</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-keyword">mod</span> back_of_house &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fix_incorrect_order</span>() &#123;<br>        <span class="hljs-title function_ invoke__">cook_order</span>();<br>        <span class="hljs-comment">// 使用三种方式填空</span><br>        <span class="hljs-comment">//1. 使用关键字 `super`</span><br>        <span class="hljs-comment">//2. 使用绝对路径</span><br>        __.<span class="hljs-title function_ invoke__">serve_order</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cook_order</span>() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><br><span class="hljs-keyword">mod</span> back_of_house &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fix_incorrect_order</span>() &#123;<br>        <span class="hljs-title function_ invoke__">cook_order</span>();<br>        <span class="hljs-comment">// 使用二种方式填空</span><br>        <span class="hljs-comment">// 1. 使用关键字 `super`</span><br>        <span class="hljs-comment">// super::front_of_house::serving::serve_order();</span><br>        <span class="hljs-comment">// 2. 使用绝对路径</span><br>        <span class="hljs-comment">// crate::front_of_house::serving::serve_order();</span><br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cook_order</span>() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将模块分离并放入独立的文件中"><a href="#将模块分离并放入独立的文件中" class="headerlink" title="将模块分离并放入独立的文件中"></a>将模块分离并放入独立的文件中</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in lib.rs</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">seat_at_table</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>            <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sit down please&quot;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> serving &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_order</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">serve_order</span>() &#123;&#125;<br><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_payment</span>() &#123;&#125;<br><br>        <span class="hljs-comment">// 我猜你不希望顾客听到你在抱怨他们，因此让这个函数私有化吧</span><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">complain</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br><br>    back_of_house::<span class="hljs-title function_ invoke__">cook_order</span>();<br><br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;yummy yummy!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> back_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fix_incorrect_order</span>() &#123;<br>        <span class="hljs-title function_ invoke__">cook_order</span>();<br>        crate::front_of_house::serving::<span class="hljs-title function_ invoke__">serve_order</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cook_order</span>() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟🌟🌟-请将上面的模块和代码分离到以下目录文件中"><a href="#4-🌟🌟🌟🌟-请将上面的模块和代码分离到以下目录文件中" class="headerlink" title="4.🌟🌟🌟🌟 请将上面的模块和代码分离到以下目录文件中:"></a>4.🌟🌟🌟🌟 请将上面的模块和代码分离到以下目录文件中:</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust">.<br>├── Cargo.toml<br>├── src<br>│   ├── back_of_house.rs<br>│   ├── front_of_house<br>│   │   ├── hosting.rs<br>│   │   ├── <span class="hljs-keyword">mod</span>.rs<br>│   │   └── serving.rs<br>│   ├── lib.rs<br>│   └── main.rs<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in src/lib.rs</span><br><br><span class="hljs-keyword">mod</span> front_of_house;<br><span class="hljs-keyword">mod</span> back_of_house;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br><br>    back_of_house::<span class="hljs-title function_ invoke__">cook_order</span>();<br><br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;yummy yummy!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// in src/back_of_house.rs</span><br><br><span class="hljs-keyword">use</span> crate::front_of_house;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fix_incorrect_order</span>() &#123;<br>    <span class="hljs-title function_ invoke__">cook_order</span>();<br>    front_of_house::serving::<span class="hljs-title function_ invoke__">serve_order</span>();<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cook_order</span>() &#123;&#125;<br><br><span class="hljs-comment">// in src/front_of_house/mod.rs</span><br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> serving;<br><br><span class="hljs-comment">// in src/front_of_house/hosting.rs</span><br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">seat_at_table</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sit down please&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// in src/front_of_house/serving.rs</span><br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_order</span>() &#123;&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">serve_order</span>() &#123;&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_payment</span>() &#123;&#125;<br><br><span class="hljs-comment">// Maybe you don&#x27;t want the guest hearing the your complaining about them</span><br><span class="hljs-comment">// So just make it private</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">complain</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="从二进制包中访问库包的代码"><a href="#从二进制包中访问库包的代码" class="headerlink" title="从二进制包中访问库包的代码"></a>从二进制包中访问库包的代码</h2><h3 id="请确保你已经完成了第四题，然后再继续进行"><a href="#请确保你已经完成了第四题，然后再继续进行" class="headerlink" title="请确保你已经完成了第四题，然后再继续进行."></a>请确保你已经完成了第四题，然后再继续进行.</h3><p>当到达此处时，你的项目结构应该如下所示:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── Cargo.toml<br>├── src<br>│   ├── back_of_house.rs<br>│   ├── front_of_house<br>│   │   ├── hosting.rs<br>│   │   ├── mod.rs<br>│   │   └── serving.rs<br>│   ├── lib.rs<br>│   └── main.rs<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟现在我们可以从二进制包中发起函数调用了"><a href="#5-🌟🌟🌟现在我们可以从二进制包中发起函数调用了" class="headerlink" title="5.🌟🌟🌟现在我们可以从二进制包中发起函数调用了."></a>5.🌟🌟🌟现在我们可以从二进制包中发起函数调用了.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in src/main.rs</span><br><br><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(__, <span class="hljs-string">&quot;sit down please&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(__,<span class="hljs-string">&quot;yummy yummy!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// in src/main.rs</span><br><br><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(front_of_house::hosting::<span class="hljs-title function_ invoke__">seat_at_table</span>(), <span class="hljs-string">&quot;sit down please&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(hello_package::<span class="hljs-title function_ invoke__">eat_at_restaurant</span>(),<span class="hljs-string">&quot;yummy yummy!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Rust 语言圣经中，我们已经深入讲解过模块module，这里就不再赘述，直接开始我们的练习。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>14.1.包 Crate</title>
    <link href="https://lilinzta.github.io/2023/10/07/14-1-%E5%8C%85-Crate/"/>
    <id>https://lilinzta.github.io/2023/10/07/14-1-%E5%8C%85-Crate/</id>
    <published>2023-10-07T11:11:41.000Z</published>
    <updated>2024-01-20T11:34:35.707Z</updated>
    
    <content type="html"><![CDATA[<p>package 是你通过 Cargo 创建的工程或项目，因此在 package 的根目录下会有一个 Cargo.toml 文件。</p><span id="more"></span><h3 id="1-🌟-创建一个-package，拥有以下目录结构"><a href="#1-🌟-创建一个-package，拥有以下目录结构" class="headerlink" title="1.🌟 创建一个 package，拥有以下目录结构:"></a>1.🌟 创建一个 package，拥有以下目录结构:</h3><p>Q:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br><br>1 directory, 2 files<br><br><span class="hljs-comment"># in Cargo.toml</span><br>[package]<br>name = <span class="hljs-string">&quot;hello-package&quot;</span><br>version = <span class="hljs-string">&quot;0.1.0&quot;</span><br>edition = <span class="hljs-string">&quot;2021&quot;</span><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cargo new hello-package<br></code></pre></td></tr></table></figure><blockquote><p>注意! 我们会在包与模块中使用上面的项目作为演示，因此不要删除</p></blockquote><h3 id="2-🌟-创建一个-package，拥有以下目录结构"><a href="#2-🌟-创建一个-package，拥有以下目录结构" class="headerlink" title="2.🌟 创建一个 package，拥有以下目录结构:"></a>2.🌟 创建一个 package，拥有以下目录结构:</h3><p>Q:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── Cargo.toml<br>└── src<br>    └── lib.rs<br><br>1 directory, 2 files<br><br><span class="hljs-comment"># in Cargo.toml</span><br>[package]<br>name = <span class="hljs-string">&quot;hello-package1&quot;</span><br>version = <span class="hljs-string">&quot;0.1.0&quot;</span><br>edition = <span class="hljs-string">&quot;2021&quot;</span><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cargo new --lib hello-package1<br></code></pre></td></tr></table></figure><blockquote><p>该项目可以安全的移除</p></blockquote><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>&#x2F;* 使用你的答案填空 *&#x2F;</p><p>Q: package 1# 和 2# 的区别是什么 ?</p><p>A:</p><p>hello-package有一个二进制crate叫hello-package, src&#x2F;main.rs是根crate.</p><p>hello-pacakge1有一个库crate叫hello-package1, src&#x2F;lib.rs是根crate.</p><h2 id="包Crate"><a href="#包Crate" class="headerlink" title="包Crate"></a>包Crate</h2><p>一个包可以是二进制也可以一个依赖库。每一个包都有一个包根，例如二进制包的包根是 src&#x2F;main.rs，库包的包根是 src&#x2F;lib.rs。包根是编译器开始处理源代码文件的地方，同时也是包模块树的根部。</p><p>在 package hello-package 中，有一个二进制包，该包与 package 同名 : hello-package, 其中 src&#x2F;main.rs 是该二进制包的包根.</p><p>与 hello-package 类似, hello-package1 同样包含一个包，但是与之前的二进制包不同，该 package 包含的是库包，其中 src&#x2F;lib.rs 是其包根.</p><h3 id="4-🌟"><a href="#4-🌟" class="headerlink" title="4.🌟"></a>4.🌟</h3><p>Q: package <code>hello-package1</code> 中的库包名称是?</p><p>A: hello-package1</p><h3 id="5-🌟🌟-为-hello-package-添加一个库包，并且完成以下目录结构的填空"><a href="#5-🌟🌟-为-hello-package-添加一个库包，并且完成以下目录结构的填空" class="headerlink" title="5.🌟🌟 为 hello-package 添加一个库包，并且完成以下目录结构的填空:"></a>5.🌟🌟 为 hello-package 添加一个库包，并且完成以下目录结构的填空:</h3><p>Q:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 填空</span><br>.<br>├── Cargo.lock<br>├── Cargo.toml<br>├── src<br>│   ├── __<br>│   └── __<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 填空</span><br>.<br>├── Cargo.lock<br>├── Cargo.toml<br>├── src<br>│   ├── main.rs<br>│   └── lib.rs<br></code></pre></td></tr></table></figure><p>在上一个步骤后，我们的 hello-package 中已经存在两个包：一个二进制包和一个库包，两个包的名称都与 package 相同：hello-package。</p><h3 id="6-🌟🌟🌟-一个-package-最多只能包含一个库包，但是却可以包含多个二进制包：通过将二进制文件放入到-src-bin-目录下实现-该目录下的每个文件都是一个独立的二进制包，包名与文件名相同，不再与-package-的名称相同。"><a href="#6-🌟🌟🌟-一个-package-最多只能包含一个库包，但是却可以包含多个二进制包：通过将二进制文件放入到-src-bin-目录下实现-该目录下的每个文件都是一个独立的二进制包，包名与文件名相同，不再与-package-的名称相同。" class="headerlink" title="6.🌟🌟🌟 一个 package 最多只能包含一个库包，但是却可以包含多个二进制包：通过将二进制文件放入到 src&#x2F;bin 目录下实现: 该目录下的每个文件都是一个独立的二进制包，包名与文件名相同，不再与 package 的名称相同。"></a>6.🌟🌟🌟 一个 package 最多只能包含一个库包，但是却可以包含多个二进制包：通过将二进制文件放入到 src&#x2F;bin 目录下实现: 该目录下的每个文件都是一个独立的二进制包，包名与文件名相同，不再与 package 的名称相同。</h3><p>Q:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建一个 package 包含以下包：</span><br><span class="hljs-comment"># 1. 三个二进制包: `hello-package`, `main1` and `main2`</span><br><span class="hljs-comment"># 2. 一个库包</span><br><span class="hljs-comment"># 并完成以下目录结构的填空</span><br>.<br>├── Cargo.toml<br>├── Cargo.lock<br>├── src<br>│   ├── __<br>│   ├── __<br>│   └── __<br>│       └── __<br>│       └── __<br>├── tests <span class="hljs-comment"># 存放集成测试文件的目录</span><br>│   └── some_integration_tests.rs<br>├── benches <span class="hljs-comment"># 存放 benchmark 文件的目录dir for benchmark files</span><br>│   └── simple_bench.rs<br>└── examples <span class="hljs-comment"># 存放示例文件的目录</span><br>    └── simple_example.rs<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建一个 package 包含以下包：</span><br><span class="hljs-comment"># 1. 三个二进制包: `hello-package`, `main1` and `main2`</span><br><span class="hljs-comment"># 2. 一个库包</span><br><span class="hljs-comment"># 并完成以下目录结构的填空</span><br>.<br>├── Cargo.toml<br>├── Cargo.lock<br>├── src<br>│   ├── main.rs<br>│   ├── lib.rs<br>│   └── bin<br>│       └── main1.rs<br>│       └── main2.rs<br>├── tests <span class="hljs-comment"># 存放集成测试文件的目录</span><br>│   └── some_integration_tests.rs<br>├── benches <span class="hljs-comment"># 存放 benchmark 文件的目录dir for benchmark files</span><br>│   └── simple_bench.rs<br>└── examples <span class="hljs-comment"># 存放示例文件的目录</span><br>    └── simple_example.rs<br></code></pre></td></tr></table></figure><p>可以看到，上面的 package 结构非常标准，你可以在很多 Rust 项目中看到该结构的身影。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;package 是你通过 Cargo 创建的工程或项目，因此在 package 的根目录下会有一个 Cargo.toml 文件。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>13.2.返回值 result 和 ?</title>
    <link href="https://lilinzta.github.io/2023/10/06/13-2-%E8%BF%94%E5%9B%9E%E5%80%BC-result-%E5%92%8C/"/>
    <id>https://lilinzta.github.io/2023/10/06/13-2-%E8%BF%94%E5%9B%9E%E5%80%BC-result-%E5%92%8C/</id>
    <published>2023-10-06T12:14:30.000Z</published>
    <updated>2024-01-20T11:34:53.172Z</updated>
    
    <content type="html"><![CDATA[<p>Result<T> 是一个枚举类型用于描述返回的结果或错误，它包含两个成员(变体 variants) :</p><ul><li>Ok(T): 返回一个结果值 T</li><li>Err(e): 返回一个错误，e 是具体的错误值<br>简而言之，如果期待一个正确的结果，就返回 Ok，反之则是 Err。</li></ul><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> __ &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n1</span> = n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n2</span> = n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;();<br>    <span class="hljs-title function_ invoke__">Ok</span>(n1.<span class="hljs-title function_ invoke__">unwrap</span>() * n2.<span class="hljs-title function_ invoke__">unwrap</span>())<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(result, __);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(result.__, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n1</span> = n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n2</span> = n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;();<br>    <span class="hljs-title function_ invoke__">Ok</span>(n1.<span class="hljs-title function_ invoke__">unwrap</span>() * n2.<span class="hljs-title function_ invoke__">unwrap</span>())<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-number">20</span>));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(result.<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p>? 跟 unwrap 非常像，但是 ? 会返回一个错误，而不是直接 panic.</p><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用 `?` 来实现 multiply</span><br><span class="hljs-comment">// 不要使用 unwrap !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> __ &#123;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用 `?` 来实现 multiply</span><br><span class="hljs-comment">// 不要使用 unwrap !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n1</span> = n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n2</span> = n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(n1 * n2)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-keyword">self</span>, Read&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file1</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> f &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">match</span> f.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> s) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(_) =&gt; <span class="hljs-title function_ invoke__">Ok</span>(s),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-comment">// 不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file2</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>    __;<br><br>    <span class="hljs-title function_ invoke__">Ok</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">read_file1</span>().<span class="hljs-title function_ invoke__">unwrap_err</span>().<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-title function_ invoke__">read_file2</span>().<span class="hljs-title function_ invoke__">unwrap_err</span>().<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-keyword">self</span>, Read&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file1</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> f &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">match</span> f.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> s) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(_) =&gt; <span class="hljs-title function_ invoke__">Ok</span>(s),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-comment">// 不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file2</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>    File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>)?.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> s)?;<br><br>    <span class="hljs-title function_ invoke__">Ok</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">read_file1</span>().<span class="hljs-title function_ invoke__">unwrap_err</span>().<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-title function_ invoke__">read_file2</span>().<span class="hljs-title function_ invoke__">unwrap_err</span>().<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map-and-then"><a href="#map-and-then" class="headerlink" title="map &amp; and_then"></a>map &amp; and_then</h2><p>map and and_then 是两个常用的组合器( combinator )，可以用于 Result&lt;T, E&gt; (也可用于 Option<T>).</p><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用两种方式填空: map, and then</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_two</span>(n_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>   n_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().__<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">add_two</span>(<span class="hljs-string">&quot;4&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">6</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用两种方式填空: map, and then</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_two</span>(n_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>   n_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map</span>(|num| num + <span class="hljs-number">2</span>)<br>   <span class="hljs-comment">// n_str.parse::&lt;i32&gt;().and_then(|num| Ok(num +2))</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">add_two</span>(<span class="hljs-string">&quot;4&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>(), <span class="hljs-number">6</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟"><a href="#5-🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟"></a>5.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用 Result 重写后，我们使用模式匹配的方式来处理，而无需使用 `unwrap`</span><br><span class="hljs-comment">// 但是这种写法实在过于啰嗦..</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-keyword">match</span> n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;() &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n1)  =&gt; &#123;<br>            <span class="hljs-keyword">match</span> n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;() &#123;<br>                <span class="hljs-title function_ invoke__">Ok</span>(n2)  =&gt; &#123;<br>                    <span class="hljs-title function_ invoke__">Ok</span>(n1 * n2)<br>                &#125;,<br>                <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 重写上面的 `multiply` ，让它尽量简介</span><br><span class="hljs-comment">// 提示：使用 `and_then` 和 `map`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply1</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-comment">// 实现...</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt;) &#123;<br>    <span class="hljs-keyword">match</span> result &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n)  =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n is &#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, e),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">twenty</span> = <span class="hljs-title function_ invoke__">multiply1</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-title function_ invoke__">print</span>(twenty);<br><br>    <span class="hljs-comment">// 下面的调用会提供更有帮助的错误信息</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tt</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-title function_ invoke__">print</span>(tt);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 使用 Result 重写后，我们使用模式匹配的方式来处理，而无需使用 `unwrap`</span><br><span class="hljs-comment">// 但是这种写法实在过于啰嗦..</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-keyword">match</span> n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;() &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n1)  =&gt; &#123;<br>            <span class="hljs-keyword">match</span> n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;() &#123;<br>                <span class="hljs-title function_ invoke__">Ok</span>(n2)  =&gt; &#123;<br>                    <span class="hljs-title function_ invoke__">Ok</span>(n1 * n2)<br>                &#125;,<br>                <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>            &#125;<br>        &#125;,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 重写上面的 `multiply` ，让它尽量简介</span><br><span class="hljs-comment">// 提示：使用 `and_then` 和 `map`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply1</span>(n1_str: &amp;<span class="hljs-type">str</span>, n2_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt; &#123;<br>    <span class="hljs-comment">// 实现...</span><br>    n1_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">and_then</span>(|n1| &#123;<br>        n2_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map</span>(|n2| n1*n2)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, ParseIntError&gt;) &#123;<br>    <span class="hljs-keyword">match</span> result &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n)  =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n is &#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, e),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">twenty</span> = <span class="hljs-title function_ invoke__">multiply1</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-title function_ invoke__">print</span>(twenty);<br><br>    <span class="hljs-comment">// 下面的调用会提供更有帮助的错误信息</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tt</span> = <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-title function_ invoke__">print</span>(tt);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>如果我们要在代码中到处使用 std::result::Result&lt;T, ParseIntError&gt; ，那毫无疑问，代码将变得特别冗长和啰嗦，对于这种情况，可以使用类型别名来解决。</p><p>例如在标准库中，就在大量使用这种方式来简化代码: io::Result.</p><h3 id="6-🌟"><a href="#6-🌟" class="headerlink" title="6.🌟"></a>6.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">__</span>;<br><br><span class="hljs-comment">// 使用上面的别名来引用原来的 `Result` 类型</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(first_number_str: &amp;<span class="hljs-type">str</span>, second_number_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> Res&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    first_number_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">and_then</span>(|first_number| &#123;<br>        second_number_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map</span>(|second_number| first_number * second_number)<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 同样, 这里也使用了类型别名来简化代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>(result: Res&lt;<span class="hljs-type">i32</span>&gt;) &#123;<br>    <span class="hljs-keyword">match</span> result &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n)  =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n is &#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, e),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">print</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>));<br>    <span class="hljs-title function_ invoke__">print</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Res</span>&lt;T&gt; = <span class="hljs-type">Result</span>&lt;T, ParseIntError&gt;;<br><br><span class="hljs-comment">// 使用上面的别名来引用原来的 `Result` 类型</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>(first_number_str: &amp;<span class="hljs-type">str</span>, second_number_str: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> Res&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    first_number_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">and_then</span>(|first_number| &#123;<br>        second_number_str.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">map</span>(|second_number| first_number * second_number)<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">// 同样, 这里也使用了类型别名来简化代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>(result: Res&lt;<span class="hljs-type">i32</span>&gt;) &#123;<br>    <span class="hljs-keyword">match</span> result &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n)  =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n is &#123;&#125;&quot;</span>, n),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Error: &#123;&#125;&quot;</span>, e),<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">print</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>));<br>    <span class="hljs-title function_ invoke__">print</span>(<span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在-fn-main-中使用-Result"><a href="#在-fn-main-中使用-Result" class="headerlink" title="在 fn main 中使用 Result"></a>在 fn main 中使用 Result</h2><p>一个典型的 main 函数长这样:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上 main 函数还可以返回一个 Result 类型：如果 main 函数内部发生了错误，那该错误会被返回并且打印出一条错误的 debug 信息。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), ParseIntError&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number_str</span> = <span class="hljs-string">&quot;10&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number</span> = <span class="hljs-keyword">match</span> number_str.parse::&lt;<span class="hljs-type">i32</span>&gt;() &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(number)  =&gt; number,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(e),<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, number);<br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Result&lt;T&gt; 是一个枚举类型用于描述返回的结果或错误，它包含两个成员(变体 variants) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ok(T): 返回一个结果值 T&lt;/li&gt;
&lt;li&gt;Err(e): 返回一个错误，e 是具体的错误值&lt;br&gt;简而言之，如果期待一个正确的结果，</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>13.1.panic! 深入剖析</title>
    <link href="https://lilinzta.github.io/2023/10/04/13-1-panic-%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/"/>
    <id>https://lilinzta.github.io/2023/10/04/13-1-panic-%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90/</id>
    <published>2023-10-04T03:49:11.000Z</published>
    <updated>2024-01-20T11:35:06.929Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 中最简单的错误处理方式就是使用 panic。</p><span id="more"></span><p>它会打印出一条错误信息并打印出栈调用情况，最终结束当前线程:</p><ul><li>若 panic 发生在 main 线程，那程序会随之退出</li><li>如果是在生成的( spawn )子线程中发生 panic, 那么当前的线程会结束，但是程序依然会继续运行</li></ul><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">drink</span>(beverage: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-keyword">if</span> beverage == <span class="hljs-string">&quot;lemonade&quot;</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>        <span class="hljs-comment">// 实现下面的代码</span><br>        __<br>     &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">drink</span>(__);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">drink</span>(beverage: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-keyword">if</span> beverage == <span class="hljs-string">&quot;lemonade&quot;</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>        <span class="hljs-comment">// 实现下面的代码</span><br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;drink!!!&quot;</span>)<br>     &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">drink</span>(<span class="hljs-string">&quot;lemonade&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见的-panic"><a href="#常见的-panic" class="headerlink" title="常见的 panic"></a>常见的 panic</h2><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有的 panic，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_ invoke__">as_bytes</span>(), [<span class="hljs-number">96</span>, <span class="hljs-number">97</span>, <span class="hljs-number">98</span>]);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = v[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = v.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-comment">// 大部分时候编译器是可以帮我们提前发现溢出错误，并阻止编译通过。但是也有一些时候，这种溢出问题直到运行期才会出现</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">production_rate_per_hour</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-title function_ invoke__">divide</span>(<span class="hljs-number">15</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">divide</span>(x:<span class="hljs-type">u8</span>, y:<span class="hljs-type">u8</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x / y)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">production_rate_per_hour</span>(speed: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cph</span>: <span class="hljs-type">u8</span> = <span class="hljs-number">221</span>;<br>    <span class="hljs-keyword">match</span> speed &#123;<br>        <span class="hljs-number">1</span>..=<span class="hljs-number">4</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>,<br>        <span class="hljs-number">5</span>..=<span class="hljs-number">8</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">0.9</span>,<br>        <span class="hljs-number">9</span>..=<span class="hljs-number">10</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">0.77</span>,<br>        _ =&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>,<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">working_items_per_minute</span>(speed: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>    (<span class="hljs-title function_ invoke__">production_rate_per_hour</span>(speed) / <span class="hljs-number">60</span> <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有的 panic，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">&quot;abc&quot;</span>.<span class="hljs-title function_ invoke__">as_bytes</span>(), [<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>]);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = v[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = v.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-comment">// 大部分时候编译器是可以帮我们提前发现溢出错误，并阻止编译通过。但是也有一些时候，这种溢出问题直到运行期才会出现</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">production_rate_per_hour</span>(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-title function_ invoke__">divide</span>(<span class="hljs-number">15</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">divide</span>(x:<span class="hljs-type">u8</span>, y:<span class="hljs-type">u8</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x / y)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">production_rate_per_hour</span>(speed: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cph</span>: <span class="hljs-type">u8</span> = <span class="hljs-number">22</span>;<br>    <span class="hljs-keyword">match</span> speed &#123;<br>        <span class="hljs-number">1</span>..=<span class="hljs-number">4</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>,<br>        <span class="hljs-number">5</span>..=<span class="hljs-number">8</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">0.9</span>,<br>        <span class="hljs-number">9</span>..=<span class="hljs-number">10</span> =&gt; (speed * cph) <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">0.77</span>,<br>        _ =&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>,<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">working_items_per_minute</span>(speed: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>    (<span class="hljs-title function_ invoke__">production_rate_per_hour</span>(speed) / <span class="hljs-number">60</span> <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="详细的栈调用信息"><a href="#详细的栈调用信息" class="headerlink" title="详细的栈调用信息"></a>详细的栈调用信息</h2><p>默认情况下，栈调用只会展示最基本的信息:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust">thread <span class="hljs-symbol">&#x27;main</span>&#x27; panicked at <span class="hljs-symbol">&#x27;index</span> out of bounds: the len is <span class="hljs-number">3</span> but the index is <span class="hljs-number">99</span>&#x27;, src/main.rs:<span class="hljs-number">4</span>:<span class="hljs-number">5</span><br>note: run with `RUST_BACKTRACE=<span class="hljs-number">1</span>` environment variable to display a backtrace<br></code></pre></td></tr></table></figure><p>但是有时候，我们还希望获取更详细的信息:</p><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## 填空以打印全部的调用栈</span><br><span class="hljs-comment">## 提示: 你可以在之前的默认 panic 信息中找到相关线索</span><br>$ __ cargo run<br>thread <span class="hljs-string">&#x27;main&#x27;</span> panicked at <span class="hljs-string">&#x27;assertion failed: `(left == right)`</span><br><span class="hljs-string">  left: `[97, 98, 99]`,</span><br><span class="hljs-string"> right: `[96, 97, 98]`&#x27;</span>, src/main.rs:3:5<br>stack backtrace:<br>   0: rust_begin_unwind<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:498:5<br>   1: core::panicking::panic_fmt<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:116:14<br>   2: core::panicking::assert_failed_inner<br>   3: core::panicking::assert_failed<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:154:5<br>   4: study_cargo::main<br>             at ./src/main.rs:3:5<br>   5: core::ops::<span class="hljs-keyword">function</span>::FnOnce::call_once<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:227:5<br>note: Some details are omitted, run with `RUST_BACKTRACE=full` <span class="hljs-keyword">for</span> a verbose backtrace.<br><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## 填空以打印全部的调用栈</span><br><span class="hljs-comment">## 提示: 你可以在之前的默认 panic 信息中找到相关线索</span><br>$ RUST_BACKTRACE=1 cargo run<br>thread <span class="hljs-string">&#x27;main&#x27;</span> panicked at <span class="hljs-string">&#x27;assertion failed: `(left == right)`</span><br><span class="hljs-string">  left: `[97, 98, 99]`,</span><br><span class="hljs-string"> right: `[96, 97, 98]`&#x27;</span>, src/main.rs:3:5<br>stack backtrace:<br>   0: rust_begin_unwind<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/std/src/panicking.rs:498:5<br>   1: core::panicking::panic_fmt<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:116:14<br>   2: core::panicking::assert_failed_inner<br>   3: core::panicking::assert_failed<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/panicking.rs:154:5<br>   4: study_cargo::main<br>             at ./src/main.rs:3:5<br>   5: core::ops::<span class="hljs-keyword">function</span>::FnOnce::call_once<br>             at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ops/function.rs:227:5<br>note: Some details are omitted, run with `RUST_BACKTRACE=full` <span class="hljs-keyword">for</span> a verbose backtrace.<br><br></code></pre></td></tr></table></figure><h2 id="unwinding-和-abort"><a href="#unwinding-和-abort" class="headerlink" title="unwinding 和 abort"></a>unwinding 和 abort</h2><p>当出现 panic! 时，程序提供了两种方式来处理终止流程：栈展开和直接终止。</p><p>其中，默认的方式就是 栈展开，这意味着 Rust 会回溯栈上数据和函数调用，因此也意味着更多的善后工作，好处是可以给出充分的报错信息和栈调用信息，便于事后的问题复盘。直接终止，顾名思义，不清理数据就直接退出程序，善后工作交与操作系统来负责。</p><p>对于绝大多数用户，使用默认选择是最好的，但是当你关心最终编译出的二进制可执行文件大小时，那么可以尝试去使用直接终止的方式，例如下面的配置修改 Cargo.toml 文件，实现在 release 模式下遇到 panic 直接终止：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[profile.release]</span><br><span class="hljs-attr">panic</span> = <span class="hljs-string">&#x27;abort&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust 中最简单的错误处理方式就是使用 panic。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>12.3.其它转换</title>
    <link href="https://lilinzta.github.io/2023/10/02/12-3-%E5%85%B6%E5%AE%83%E8%BD%AC%E6%8D%A2/"/>
    <id>https://lilinzta.github.io/2023/10/02/12-3-%E5%85%B6%E5%AE%83%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-10-02T13:06:18.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将任何类型转换成-String"><a href="#将任何类型转换成-String" class="headerlink" title="将任何类型转换成 String"></a>将任何类型转换成 String</h2><p>只要为一个类型实现了 ToString，就可以将任何类型转换成 String。事实上，这种方式并不是最好的，大家还记得 fmt::Display 特征吗？它可以控制一个类型如何打印，在实现它的时候还会自动实现 ToString。</p><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">use</span> std::fmt;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-comment">// 实现 fmt 方法</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = Point &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-built_in">assert_eq!</span>(origin.__, <span class="hljs-string">&quot;The point is (0, 0)&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-built_in">format!</span>(__), <span class="hljs-string">&quot;The point is (0, 0)&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">use</span> std::fmt;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-comment">// 实现 fmt 方法</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter&lt;<span class="hljs-symbol">&#x27;_</span>&gt;) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;The point is (&#123;&#125;, &#123;&#125;)&quot;</span>, <span class="hljs-keyword">self</span>.x, <span class="hljs-keyword">self</span>.y)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = Point &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-built_in">assert_eq!</span>(origin.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-string">&quot;The point is (0, 0)&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, origin), <span class="hljs-string">&quot;The point is (0, 0)&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解析-String"><a href="#解析-String" class="headerlink" title="解析 String"></a>解析 String</h2><h3 id="2-🌟🌟🌟-使用-parse-方法可以将一个-String-转换成-i32-数字，这是因为在标准库中为-i32-类型实现了-FromStr-impl-FromStr-for-i32"><a href="#2-🌟🌟🌟-使用-parse-方法可以将一个-String-转换成-i32-数字，这是因为在标准库中为-i32-类型实现了-FromStr-impl-FromStr-for-i32" class="headerlink" title="2.🌟🌟🌟 使用 parse 方法可以将一个 String 转换成 i32 数字，这是因为在标准库中为 i32 类型实现了 FromStr: : impl FromStr for i32"></a>2.🌟🌟🌟 使用 parse 方法可以将一个 String 转换成 i32 数字，这是因为在标准库中为 i32 类型实现了 FromStr: : impl FromStr for i32</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 为了使用 `from_str` 方法, 你需要引入该特征到当前作用域中</span><br><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>::FromStr;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">parsed</span>: <span class="hljs-type">i32</span> = <span class="hljs-string">&quot;5&quot;</span>.__.<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">turbo_parsed</span> = <span class="hljs-string">&quot;10&quot;</span>.__.<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">from_str</span> = __.<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">sum</span> = parsed + turbo_parsed + from_str;<br>    <span class="hljs-built_in">assert_eq!</span>(sum, <span class="hljs-number">35</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 为了使用 `from_str` 方法, 你需要引入该特征到当前作用域中</span><br><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>::FromStr;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">parsed</span>: <span class="hljs-type">i32</span> = <span class="hljs-string">&quot;5&quot;</span>.<span class="hljs-title function_ invoke__">parse</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">turbo_parsed</span> = <span class="hljs-string">&quot;10&quot;</span>.parse::&lt;<span class="hljs-type">i32</span>&gt;().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">from_str</span> = <span class="hljs-type">i32</span>::<span class="hljs-title function_ invoke__">from_str</span>(<span class="hljs-string">&quot;20&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">sum</span> = parsed + turbo_parsed + from_str;<br>    <span class="hljs-built_in">assert_eq!</span>(sum, <span class="hljs-number">35</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-还可以为自定义类型实现-FromStr-特征"><a href="#3-🌟🌟-还可以为自定义类型实现-FromStr-特征" class="headerlink" title="3.🌟🌟 还可以为自定义类型实现 FromStr 特征"></a>3.🌟🌟 还可以为自定义类型实现 FromStr 特征</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>::FromStr;<br><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FromStr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Err</span> = ParseIntError;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from_str</span>(s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>, <span class="hljs-keyword">Self</span>::<span class="hljs-literal">Err</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">coords</span>: <span class="hljs-type">Vec</span>&lt;&amp;<span class="hljs-type">str</span>&gt; = s.<span class="hljs-title function_ invoke__">trim_matches</span>(|p| p == <span class="hljs-string">&#x27;(&#x27;</span> || p == <span class="hljs-string">&#x27;)&#x27;</span> )<br>                                 .<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>                                 .<span class="hljs-title function_ invoke__">collect</span>();<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x_fromstr</span> = coords[<span class="hljs-number">0</span>].parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">y_fromstr</span> = coords[<span class="hljs-number">1</span>].parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br><br>        <span class="hljs-title function_ invoke__">Ok</span>(Point &#123; x: x_fromstr, y: y_fromstr &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用两种方式填空</span><br>    <span class="hljs-comment">// 不要修改其它地方的代码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = __;<br>    <span class="hljs-built_in">assert_eq!</span>(p.<span class="hljs-title function_ invoke__">unwrap</span>(), Point&#123; x: <span class="hljs-number">3</span>, y: <span class="hljs-number">4</span>&#125; );<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>::FromStr;<br><span class="hljs-keyword">use</span> std::num::ParseIntError;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">FromStr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Err</span> = ParseIntError;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from_str</span>(s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>, <span class="hljs-keyword">Self</span>::<span class="hljs-literal">Err</span>&gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">coords</span>: <span class="hljs-type">Vec</span>&lt;&amp;<span class="hljs-type">str</span>&gt; = s.<span class="hljs-title function_ invoke__">trim_matches</span>(|p| p == <span class="hljs-string">&#x27;(&#x27;</span> || p == <span class="hljs-string">&#x27;)&#x27;</span> )<br>                                 .<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>)<br>                                 .<span class="hljs-title function_ invoke__">collect</span>();<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x_fromstr</span> = coords[<span class="hljs-number">0</span>].parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">y_fromstr</span> = coords[<span class="hljs-number">1</span>].parse::&lt;<span class="hljs-type">i32</span>&gt;()?;<br><br>        <span class="hljs-title function_ invoke__">Ok</span>(Point &#123; x: x_fromstr, y: y_fromstr &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用两种方式填空</span><br>    <span class="hljs-comment">// 不要修改其它地方的代码</span><br>    <span class="hljs-comment">//1. let p = &quot;(3,4)&quot;.parse::&lt;Point&gt;();</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point::<span class="hljs-title function_ invoke__">from_str</span>(<span class="hljs-string">&quot;(3,4)&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p.<span class="hljs-title function_ invoke__">unwrap</span>(), Point&#123; x: <span class="hljs-number">3</span>, y: <span class="hljs-number">4</span>&#125; );<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Deref-特征"><a href="#Deref-特征" class="headerlink" title="Deref 特征"></a>Deref 特征</h2><p>Deref 特征在智能指针 - Deref章节中有更加详细的介绍。</p><h2 id="transmute"><a href="#transmute" class="headerlink" title="transmute"></a>transmute</h2><p>std::mem::transmute 是一个 unsafe 函数，可以把一个类型按位解释为另一个类型，其中这两个类型必须有同样的位数( bits )。</p><p>transmute 相当于将一个类型按位移动到另一个类型，它会将源值的所有位拷贝到目标值中，然后遗忘源值。该函数跟 C 语言中的 memcpy 函数类似。</p><p>正因为此，transmute 非常非常不安全! 调用者必须要自己保证代码的安全性，当然这也是 unsafe 的目的。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>1.transmute 可以将一个指针转换成一个函数指针，该转换并不具备可移植性，原因是在不同机器上，函数指针和数据指针可能有不同的位数( size )。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">pointer</span> = foo <span class="hljs-keyword">as</span> *<span class="hljs-title function_ invoke__">const</span> ();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">function</span> = <span class="hljs-keyword">unsafe</span> &#123;<br>        std::mem::transmute::&lt;*<span class="hljs-title function_ invoke__">const</span> (), <span class="hljs-title function_ invoke__">fn</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>&gt;(pointer)<br>    &#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">function</span>(), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.transmute 还可以扩展或缩短一个不变量的生命周期，将 Unsafe Rust 的不安全性体现的淋漓尽致!</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">R</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">extend_lifetime</span>&lt;<span class="hljs-symbol">&#x27;b</span>&gt;(r: R&lt;<span class="hljs-symbol">&#x27;b</span>&gt;) <span class="hljs-punctuation">-&gt;</span> R&lt;<span class="hljs-symbol">&#x27;static</span>&gt; &#123;<br>    std::mem::transmute::&lt;R&lt;<span class="hljs-symbol">&#x27;b</span>&gt;, R&lt;<span class="hljs-symbol">&#x27;static</span>&gt;&gt;(r)<br>&#125;<br><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">shorten_invariant_lifetime</span>&lt;<span class="hljs-symbol">&#x27;b</span>, <span class="hljs-symbol">&#x27;c</span>&gt;(r: &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-keyword">mut</span> R&lt;<span class="hljs-symbol">&#x27;static</span>&gt;)<br>                                             <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-keyword">mut</span> R&lt;<span class="hljs-symbol">&#x27;c</span>&gt; &#123;<br>    std::mem::transmute::&lt;&amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-keyword">mut</span> R&lt;<span class="hljs-symbol">&#x27;static</span>&gt;, &amp;<span class="hljs-symbol">&#x27;b</span> <span class="hljs-keyword">mut</span> R&lt;<span class="hljs-symbol">&#x27;c</span>&gt;&gt;(r)<br>&#125;<br></code></pre></td></tr></table></figure><p>3.事实上我们还可以使用一些安全的方法来替代 transmute.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">/*Turning raw bytes(&amp;[u8]) to u32, f64, etc.: */</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">raw_bytes</span> = [<span class="hljs-number">0x78</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x12</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-keyword">unsafe</span> &#123; std::mem::transmute::&lt;[<span class="hljs-type">u8</span>; <span class="hljs-number">4</span>], <span class="hljs-type">u32</span>&gt;(raw_bytes) &#125;;<br><br>    <span class="hljs-comment">// use `u32::from_ne_bytes` instead</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-type">u32</span>::<span class="hljs-title function_ invoke__">from_ne_bytes</span>(raw_bytes);<br>    <span class="hljs-comment">// or use `u32::from_le_bytes` or `u32::from_be_bytes` to specify the endianness</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-type">u32</span>::<span class="hljs-title function_ invoke__">from_le_bytes</span>(raw_bytes);<br>    <span class="hljs-built_in">assert_eq!</span>(num, <span class="hljs-number">0x12345678</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-type">u32</span>::<span class="hljs-title function_ invoke__">from_be_bytes</span>(raw_bytes);<br>    <span class="hljs-built_in">assert_eq!</span>(num, <span class="hljs-number">0x78563412</span>);<br><br>    <span class="hljs-comment">/*Turning a pointer into a usize: */</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr</span> = &amp;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr_num_transmute</span> = <span class="hljs-keyword">unsafe</span> &#123; std::mem::transmute::&lt;&amp;<span class="hljs-type">i32</span>, <span class="hljs-type">usize</span>&gt;(ptr) &#125;;<br><br>    <span class="hljs-comment">// Use an `as` cast instead</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr_num_cast</span> = ptr <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> <span class="hljs-type">i32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>;<br><br>    <span class="hljs-comment">/*Turning an &amp;mut T into an &amp;mut U: */</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr</span> = &amp;<span class="hljs-keyword">mut</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">val_transmuted</span> = <span class="hljs-keyword">unsafe</span> &#123; std::mem::transmute::&lt;&amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span>, &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>&gt;(ptr) &#125;;<br><br>    <span class="hljs-comment">// Now, put together `as` and reborrowing - note the chaining of `as`</span><br>    <span class="hljs-comment">// `as` is not transitive</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">val_casts</span> = <span class="hljs-keyword">unsafe</span> &#123; &amp;<span class="hljs-keyword">mut</span> *(ptr <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>) &#125;;<br><br>    <span class="hljs-comment">/*Turning an &amp;str into a &amp;[u8]: */</span><br>    <span class="hljs-comment">// this is not a good way to do this.</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = <span class="hljs-keyword">unsafe</span> &#123; std::mem::transmute::&lt;&amp;<span class="hljs-type">str</span>, &amp;[<span class="hljs-type">u8</span>]&gt;(<span class="hljs-string">&quot;Rust&quot;</span>) &#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>]);<br><br>    <span class="hljs-comment">// You could use `str::as_bytes`</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = <span class="hljs-string">&quot;Rust&quot;</span>.<span class="hljs-title function_ invoke__">as_bytes</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>]);<br><br>    <span class="hljs-comment">// Or, just use a byte string, if you have control over the string</span><br>    <span class="hljs-comment">// literal</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">b&quot;Rust&quot;</span>, &amp;[<span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将任何类型转换成-String&quot;&gt;&lt;a href=&quot;#将任何类型转换成-String&quot; class=&quot;headerlink&quot; title=&quot;将任何类型转换成 String&quot;&gt;&lt;/a&gt;将任何类型转换成 String&lt;/h2&gt;&lt;p&gt;只要为一个类型实现了 ToStrin</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>12.2.From/Into</title>
    <link href="https://lilinzta.github.io/2023/09/30/12-2-From-Into/"/>
    <id>https://lilinzta.github.io/2023/09/30/12-2-From-Into/</id>
    <published>2023-09-30T12:58:48.000Z</published>
    <updated>2024-01-17T15:05:42.358Z</updated>
    
    <content type="html"><![CDATA[<p>From 特征允许让一个类型定义如何基于另一个类型来创建自己，因此它提供了一个很方便的类型转换的方式。</p><span id="more"></span><p>From 和 Into 是配对的，我们只要实现了前者，那后者就会自动被实现：只要实现了 impl From<T> for U， 就可以使用以下两个方法: let u: U &#x3D; U::from(T) 和 let u:U &#x3D; T.into()，前者由 From 特征提供，而后者由自动实现的 Into 特征提供。</p><p>需要注意的是，当使用 into 方法时，你需要进行显式地类型标注，因为编译器很可能无法帮我们推导出所需的类型。</p><p>来看一个例子，我们可以简单的将 &amp;str 转换成 String</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">my_str</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>    <span class="hljs-comment">// 以下三个转换都依赖于一个事实：String 实现了 From&lt;&amp;str&gt; 特征</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(my_str);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string2</span> = my_str.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-comment">// 这里需要显式地类型标注</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string3</span>: <span class="hljs-type">String</span> = my_str.<span class="hljs-title function_ invoke__">into</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这种转换可以发生是因为标准库已经帮我们实现了 From 特征： impl From&lt;&amp;’_ str&gt; for String。你还可以在这里)找到其它实现 From 特征的常用类型。</p><h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>     <span class="hljs-comment">// impl From&lt;bool&gt; for i32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i1</span>:<span class="hljs-type">i32</span> = <span class="hljs-literal">false</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i2</span>:<span class="hljs-type">i32</span> = <span class="hljs-type">i32</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, i2);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 使用两种方式修复错误</span><br>    <span class="hljs-comment">// 1. 哪个类型实现 From 特征 : impl From&lt;char&gt; for ? , 你可以查看一下之前提到的文档，来找到合适的类型</span><br>    <span class="hljs-comment">// 2. 上一章节中介绍过的某个关键字</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i3</span>: <span class="hljs-type">i32</span> = <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_ invoke__">into</span>();<br><br>    <span class="hljs-comment">// 使用两种方法来解决错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">String</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>     <span class="hljs-comment">// impl From&lt;bool&gt; for i32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i1</span>:<span class="hljs-type">i32</span> = <span class="hljs-literal">false</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i2</span>:<span class="hljs-type">i32</span> = <span class="hljs-type">i32</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, i2);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 使用两种方式修复错误</span><br>    <span class="hljs-comment">// 1. 哪个类型实现 From 特征 : impl From&lt;char&gt; for ? , 你可以查看一下之前提到的文档，来找到合适的类型</span><br>    <span class="hljs-comment">// 2. 上一章节中介绍过的某个关键字</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i3</span>: <span class="hljs-type">u32</span> = <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_ invoke__">into</span>();<br><br>    <span class="hljs-comment">// 使用两种方法来解决错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-string">&#x27;a&#x27;</span>.<span class="hljs-title function_ invoke__">into</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>     <span class="hljs-comment">// impl From&lt;bool&gt; for i32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i1</span>:<span class="hljs-type">i32</span> = <span class="hljs-literal">false</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i2</span>:<span class="hljs-type">i32</span> = <span class="hljs-type">i32</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, i2);<br>    <span class="hljs-built_in">assert_eq!</span>(i1, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 使用两种方式修复错误</span><br>    <span class="hljs-comment">// 1. 哪个类型实现 From 特征 : impl From&lt;char&gt; for ? , 你可以查看一下之前提到的文档，来找到合适的类型</span><br>    <span class="hljs-comment">// 2. 上一章节中介绍过的某个关键字</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i3</span>: <span class="hljs-type">i32</span> = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>;<br><br>    <span class="hljs-comment">// 使用两种方法来解决错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="为自定义类型实现-From-特征"><a href="#为自定义类型实现-From-特征" class="headerlink" title="为自定义类型实现 From 特征"></a>为自定义类型实现 From 特征</h2><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// From 被包含在 `std::prelude` 中，因此我们没必要手动将其引入到当前作用域来</span><br><span class="hljs-comment">// use std::convert::From;</span><br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Number</span> &#123;<br>    value: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-comment">// 实现 `from` 方法</span><br>&#125;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = __(<span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(num.value, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span>: Number = __;<br>    <span class="hljs-built_in">assert_eq!</span>(num.value, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// From 被包含在 `std::prelude` 中，因此我们没必要手动将其引入到当前作用域来</span><br><span class="hljs-comment">// use std::convert::From;</span><br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Number</span> &#123;<br>    value: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Number</span> &#123;<br>    <span class="hljs-comment">// 实现 `from` 方法</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(item: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        Number &#123; value: item &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = Number::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(num.value, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span>: Number = <span class="hljs-number">30</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(num.value, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟-当执行错误处理时，为我们自定义的错误类型实现-From-特征是非常有用。这样就可以通过-自动将某个错误类型转换成我们自定义的错误类型"><a href="#3-🌟🌟🌟-当执行错误处理时，为我们自定义的错误类型实现-From-特征是非常有用。这样就可以通过-自动将某个错误类型转换成我们自定义的错误类型" class="headerlink" title="3.🌟🌟🌟 当执行错误处理时，为我们自定义的错误类型实现 From 特征是非常有用。这样就可以通过 ? 自动将某个错误类型转换成我们自定义的错误类型"></a>3.🌟🌟🌟 当执行错误处理时，为我们自定义的错误类型实现 From 特征是非常有用。这样就可以通过 ? 自动将某个错误类型转换成我们自定义的错误类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs;<br><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-keyword">use</span> std::num;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-title function_ invoke__">IoError</span>(io::Error),<br>    <span class="hljs-title function_ invoke__">ParseError</span>(num::ParseIntError),<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-comment">// 实现 from 方法</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;num::ParseIntError&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-comment">// 实现 from 方法</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">open_and_parse_file</span>(file_name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, CliError&gt; &#123;<br>    <span class="hljs-comment">// ? 自动将 io::Error 转换成 CliError</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = fs::<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;file_name)?;<br>    <span class="hljs-comment">// num::ParseIntError -&gt; CliError</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span>: <span class="hljs-type">i32</span> = contents.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">parse</span>()?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(num)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs;<br><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-keyword">use</span> std::num;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-title function_ invoke__">IoError</span>(io::Error),<br>    <span class="hljs-title function_ invoke__">ParseError</span>(num::ParseIntError),<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;io::Error&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-comment">// 实现 from 方法</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(error: io::Error) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        CliError::<span class="hljs-title function_ invoke__">IoError</span>(error)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">From</span>&lt;num::ParseIntError&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">CliError</span> &#123;<br>    <span class="hljs-comment">// 实现 from 方法</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">from</span>(error: num::ParseIntError) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        CliError::<span class="hljs-title function_ invoke__">ParseError</span>(error)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">open_and_parse_file</span>(file_name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">i32</span>, CliError&gt; &#123;<br>    <span class="hljs-comment">// ? 自动将 io::Error 转换成 CliError</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = fs::<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;file_name)?;<br>    <span class="hljs-comment">// num::ParseIntError -&gt; CliError</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span>: <span class="hljs-type">i32</span> = contents.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">parse</span>()?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(num)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TryFrom-TryInto"><a href="#TryFrom-TryInto" class="headerlink" title="TryFrom&#x2F;TryInto"></a>TryFrom&#x2F;TryInto</h2><p>类似于 From 和 Into, TryFrom 和 TryInto 也是用于类型转换的泛型特征。</p><p>但是又与 From&#x2F;Into 不同, TryFrom 和 TryInto 可以对转换后的失败进行处理，然后返回一个 Result。</p><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// TryFrom 和 TryInto 也被包含在 `std::prelude` 中, 因此以下引入是没必要的</span><br><span class="hljs-comment">// use std::convert::TryInto;</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span>: <span class="hljs-type">i16</span> = <span class="hljs-number">256</span>;<br><br>    <span class="hljs-comment">// Into 特征拥有一个方法`into`,</span><br>    <span class="hljs-comment">// 因此 TryInto 有一个方法是 ?</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span>: <span class="hljs-type">u8</span> = <span class="hljs-keyword">match</span> n.__() &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; n,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;there is an error when converting: &#123;:?&#125;, but we catch it&quot;</span>, e.<span class="hljs-title function_ invoke__">to_string</span>());<br>            <span class="hljs-number">0</span><br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, __);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// TryFrom 和 TryInto 也被包含在 `std::prelude` 中, 因此以下引入是没必要的</span><br><span class="hljs-comment">// use std::convert::TryInto;</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span>: <span class="hljs-type">i16</span> = <span class="hljs-number">256</span>;<br><br>    <span class="hljs-comment">// Into 特征拥有一个方法`into`,</span><br>    <span class="hljs-comment">// 因此 TryInto 有一个方法是 ?</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span>: <span class="hljs-type">u8</span> = <span class="hljs-keyword">match</span> n.<span class="hljs-title function_ invoke__">try_into</span>() &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(n) =&gt; n,<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;there is an error when converting: &#123;:?&#125;, but we catch it&quot;</span>, e.<span class="hljs-title function_ invoke__">to_string</span>());<br>            <span class="hljs-number">0</span><br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟"><a href="#5-🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟"></a>5.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">EvenNum</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TryFrom</span>&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">EvenNum</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Error</span> = ();<br><br>    <span class="hljs-comment">// 实现 `try_from`</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">try_from</span>(value: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>, <span class="hljs-keyword">Self</span>::Error&gt; &#123;<br>        <span class="hljs-keyword">if</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-title function_ invoke__">EvenNum</span>(value))<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">Err</span>(())<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(EvenNum::<span class="hljs-title function_ invoke__">try_from</span>(<span class="hljs-number">8</span>), <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-title function_ invoke__">EvenNum</span>(<span class="hljs-number">8</span>)));<br>    <span class="hljs-built_in">assert_eq!</span>(EvenNum::<span class="hljs-title function_ invoke__">try_from</span>(<span class="hljs-number">5</span>), <span class="hljs-title function_ invoke__">Err</span>(()));<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span>: <span class="hljs-type">Result</span>&lt;EvenNum, ()&gt; = <span class="hljs-number">8i32</span>.<span class="hljs-title function_ invoke__">try_into</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(result, __);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span>: <span class="hljs-type">Result</span>&lt;EvenNum, ()&gt; = <span class="hljs-number">5i32</span>.<span class="hljs-title function_ invoke__">try_into</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(result, __);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">EvenNum</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TryFrom</span>&lt;<span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">EvenNum</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Error</span> = ();<br><br>    <span class="hljs-comment">// 实现 `try_from`</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">try_from</span>(value: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-keyword">Self</span>, <span class="hljs-keyword">Self</span>::Error&gt; &#123;<br>        <span class="hljs-keyword">if</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-title function_ invoke__">EvenNum</span>(value))<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">Err</span>(())<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(EvenNum::<span class="hljs-title function_ invoke__">try_from</span>(<span class="hljs-number">8</span>), <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-title function_ invoke__">EvenNum</span>(<span class="hljs-number">8</span>)));<br>    <span class="hljs-built_in">assert_eq!</span>(EvenNum::<span class="hljs-title function_ invoke__">try_from</span>(<span class="hljs-number">5</span>), <span class="hljs-title function_ invoke__">Err</span>(()));<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span>: <span class="hljs-type">Result</span>&lt;EvenNum, ()&gt; = <span class="hljs-number">8i32</span>.<span class="hljs-title function_ invoke__">try_into</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-title function_ invoke__">Ok</span>(<span class="hljs-title function_ invoke__">EvenNum</span>(<span class="hljs-number">8</span>)));<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span>: <span class="hljs-type">Result</span>&lt;EvenNum, ()&gt; = <span class="hljs-number">5i32</span>.<span class="hljs-title function_ invoke__">try_into</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-title function_ invoke__">Err</span>(()));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;From 特征允许让一个类型定义如何基于另一个类型来创建自己，因此它提供了一个很方便的类型转换的方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>12.1.as</title>
    <link href="https://lilinzta.github.io/2023/09/28/12-1-as/"/>
    <id>https://lilinzta.github.io/2023/09/28/12-1-as/</id>
    <published>2023-09-28T01:09:10.000Z</published>
    <updated>2024-01-17T15:05:42.358Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 并没有为基本类型提供隐式的类型转换( coercion )，但是我们可以通过 as 来进行显式地转换。</p><span id="more"></span><h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，填空</span><br><span class="hljs-comment">// 不要移除任何代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">decimal</span> = <span class="hljs-number">97.123_f32</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span>: __ = decimal <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span>: <span class="hljs-type">char</span> = decimal <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c2</span> = integer <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(integer, <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，填空</span><br><span class="hljs-comment">// 不要移除任何代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">decimal</span> = <span class="hljs-number">97.123_f32</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span>: <span class="hljs-type">u8</span> = decimal <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span>: <span class="hljs-type">char</span> = decimal <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c2</span> = integer <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(integer, <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span> - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-默认情况下-数值溢出会导致编译错误，但是我们可以通过添加一行全局注解的方式来避免编译错误-溢出还是会发生"><a href="#2-🌟🌟-默认情况下-数值溢出会导致编译错误，但是我们可以通过添加一行全局注解的方式来避免编译错误-溢出还是会发生" class="headerlink" title="2.🌟🌟 默认情况下, 数值溢出会导致编译错误，但是我们可以通过添加一行全局注解的方式来避免编译错误(溢出还是会发生)"></a>2.🌟🌟 默认情况下, 数值溢出会导致编译错误，但是我们可以通过添加一行全局注解的方式来避免编译错误(溢出还是会发生)</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">u8</span>::MAX, <span class="hljs-number">255</span>);<br>    <span class="hljs-comment">// 如上所示，u8 类型允许的最大值是 255.</span><br>    <span class="hljs-comment">// 因此以下代码会报溢出的错误： literal out of range for `u8`.</span><br>    <span class="hljs-comment">// **请仔细查看相应的编译错误，从中寻找到解决的办法**</span><br>    <span class="hljs-comment">// **不要修改 main 中的任何代码**</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[allow(overflowing_literals)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">u8</span>::MAX, <span class="hljs-number">255</span>);<br>    <span class="hljs-comment">// 如上所示，u8 类型允许的最大值是 255.</span><br>    <span class="hljs-comment">// 因此以下代码会报溢出的错误： literal out of range for `u8`.</span><br>    <span class="hljs-comment">// **请仔细查看相应的编译错误，从中寻找到解决的办法**</span><br>    <span class="hljs-comment">// **不要修改 main 中的任何代码**</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-当将任何数值转换成无符号整型-T-时，如果当前的数值不在新类型的范围内，我们可以对当前数值进行加值或减值操作-增加或减少-T-MAX-1-，直到最新的值在新类型的范围内，假设我们要将-300-转成-u8-类型，由于u8-最大值是-255，因此-300-不在新类型的范围内并且大于新类型的最大值，因此我们需要减去-T-MAX-1，也就是-300-256-44。"><a href="#3-🌟🌟-当将任何数值转换成无符号整型-T-时，如果当前的数值不在新类型的范围内，我们可以对当前数值进行加值或减值操作-增加或减少-T-MAX-1-，直到最新的值在新类型的范围内，假设我们要将-300-转成-u8-类型，由于u8-最大值是-255，因此-300-不在新类型的范围内并且大于新类型的最大值，因此我们需要减去-T-MAX-1，也就是-300-256-44。" class="headerlink" title="3.🌟🌟 当将任何数值转换成无符号整型 T 时，如果当前的数值不在新类型的范围内，我们可以对当前数值进行加值或减值操作( 增加或减少 T::MAX + 1 )，直到最新的值在新类型的范围内，假设我们要将 300 转成 u8 类型，由于u8 最大值是 255，因此 300 不在新类型的范围内并且大于新类型的最大值，因此我们需要减去 T::MAX + 1，也就是 300 - 256 &#x3D; 44。"></a>3.🌟🌟 当将任何数值转换成无符号整型 T 时，如果当前的数值不在新类型的范围内，我们可以对当前数值进行加值或减值操作( 增加或减少 T::MAX + 1 )，直到最新的值在新类型的范围内，假设我们要将 300 转成 u8 类型，由于u8 最大值是 255，因此 300 不在新类型的范围内并且大于新类型的最大值，因此我们需要减去 T::MAX + 1，也就是 300 - 256 &#x3D; 44。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u16</span>, __);<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, __);<br><br>    <span class="hljs-comment">// 事实上，之前说的规则对于正整数而言，就是如下的取模</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1000 mod 256 is : &#123;&#125;&quot;</span>, <span class="hljs-number">1000</span> % <span class="hljs-number">256</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(-<span class="hljs-number">1_i8</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, __);<br><br><br>    <span class="hljs-comment">// 从 Rust 1.45 开始，当浮点数超出目标整数的范围时，转化会直接取正整数取值范围的最大或最小值</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">300.1_f32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, __);<br>    <span class="hljs-built_in">assert_eq!</span>(-<span class="hljs-number">100.1_f32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, __);<br><br><br>    <span class="hljs-comment">// 上面的浮点数转换有一点性能损耗，如果大家对于某段代码有极致的性能要求，</span><br>    <span class="hljs-comment">// 可以考虑下面的方法，但是这些方法的结果可能会溢出并且返回一些无意义的值</span><br>    <span class="hljs-comment">// 总之，请小心使用</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// 300.0 is 44</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;300.0 is &#123;&#125;&quot;</span>, <span class="hljs-number">300.0_f32</span>.to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>        <span class="hljs-comment">// -100.0 as u8 is 156</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;-100.0 as u8 is &#123;&#125;&quot;</span>, (-<span class="hljs-number">100.0_f32</span>).to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>        <span class="hljs-comment">// nan as u8 is 0</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;nan as u8 is &#123;&#125;&quot;</span>, <span class="hljs-type">f32</span>::NAN.to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[allow(overflowing_literals)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u16</span>, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">1000</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, <span class="hljs-number">232</span>);<br><br>    <span class="hljs-comment">// 事实上，之前说的规则对于正整数而言，就是如下的取模</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1000 mod 256 is : &#123;&#125;&quot;</span>, <span class="hljs-number">1000</span> % <span class="hljs-number">256</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(-<span class="hljs-number">1_i8</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, <span class="hljs-number">255</span>);<br><br><br>    <span class="hljs-comment">// 从 Rust 1.45 开始，当浮点数超出目标整数的范围时，转化会直接取正整数取值范围的最大或最小值</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">300.1_f32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, <span class="hljs-number">255</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(-<span class="hljs-number">100.1_f32</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, <span class="hljs-number">0</span>);<br><br><br>    <span class="hljs-comment">// 上面的浮点数转换有一点性能损耗，如果大家对于某段代码有极致的性能要求，</span><br>    <span class="hljs-comment">// 可以考虑下面的方法，但是这些方法的结果可能会溢出并且返回一些无意义的值</span><br>    <span class="hljs-comment">// 总之，请小心使用</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// 300.0 is 44</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;300.0 is &#123;&#125;&quot;</span>, <span class="hljs-number">300.0_f32</span>.to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>        <span class="hljs-comment">// -100.0 as u8 is 156</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;-100.0 as u8 is &#123;&#125;&quot;</span>, (-<span class="hljs-number">100.0_f32</span>).to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>        <span class="hljs-comment">// nan as u8 is 0</span><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;nan as u8 is &#123;&#125;&quot;</span>, <span class="hljs-type">f32</span>::NAN.to_int_unchecked::&lt;<span class="hljs-type">u8</span>&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟🌟-裸指针可以和代表内存地址的整数互相转换"><a href="#4-🌟🌟🌟-裸指针可以和代表内存地址的整数互相转换" class="headerlink" title="4.🌟🌟🌟 裸指针可以和代表内存地址的整数互相转换"></a>4.🌟🌟🌟 裸指针可以和代表内存地址的整数互相转换</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">values</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> = values.<span class="hljs-title function_ invoke__">as_mut_ptr</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">first_address</span>: <span class="hljs-type">usize</span> = p1 __;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">second_address</span> = first_address + <span class="hljs-number">4</span>; <span class="hljs-comment">// 4 == std::mem::size_of::&lt;i32&gt;()</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> = second_address __; <span class="hljs-comment">// p2 指向 values 数组中的第二个元素</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// 将第二个元素加 1</span><br>        __<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(values[<span class="hljs-number">1</span>], <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">values</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> = values.<span class="hljs-title function_ invoke__">as_mut_ptr</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">first_address</span>: <span class="hljs-type">usize</span> = p1 <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">second_address</span> = first_address + <span class="hljs-number">4</span>; <span class="hljs-comment">// 4 == std::mem::size_of::&lt;i32&gt;()</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span> = second_address <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">i32</span>; <span class="hljs-comment">// p2 指向 values 数组中的第二个元素</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// 将第二个元素加 1</span><br>        *p2 += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(values[<span class="hljs-number">1</span>], <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟"><a href="#5-🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟"></a>5.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> :[<span class="hljs-type">u64</span>; <span class="hljs-number">13</span>] = [<span class="hljs-number">0</span>; <span class="hljs-number">13</span>];<br>    <span class="hljs-built_in">assert_eq!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;arr), <span class="hljs-number">8</span> * <span class="hljs-number">13</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: *<span class="hljs-keyword">const</span> [<span class="hljs-type">u64</span>] = &amp;arr;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = a <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> [<span class="hljs-type">u8</span>];<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-built_in">assert_eq!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;*b), __)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> :[<span class="hljs-type">u64</span>; <span class="hljs-number">13</span>] = [<span class="hljs-number">0</span>; <span class="hljs-number">13</span>];<br>    <span class="hljs-built_in">assert_eq!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;arr), <span class="hljs-number">8</span> * <span class="hljs-number">13</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>: *<span class="hljs-keyword">const</span> [<span class="hljs-type">u64</span>] = &amp;arr;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = a <span class="hljs-keyword">as</span> *<span class="hljs-keyword">const</span> [<span class="hljs-type">u8</span>];<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-built_in">assert_eq!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;*b), <span class="hljs-number">13</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust 并没有为基本类型提供隐式的类型转换( coercion )，但是我们可以通过 as 来进行显式地转换。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>11.3.KV存储 HashMap</title>
    <link href="https://lilinzta.github.io/2023/09/21/11-3-KV%E5%AD%98%E5%82%A8-HashMap/"/>
    <id>https://lilinzta.github.io/2023/09/21/11-3-KV%E5%AD%98%E5%82%A8-HashMap/</id>
    <published>2023-09-21T09:21:29.000Z</published>
    <updated>2024-01-20T11:35:29.046Z</updated>
    
    <content type="html"><![CDATA[<p>HashMap 默认使用 SipHash 1-3 哈希算法，该算法对于抵抗 HashDos 攻击非常有效。在性能方面，如果你的 key 是中型大小的，那该算法非常不错，但是如果是小型的 key( 例如整数 )亦或是大型的 key ( 例如字符串 )，那你需要采用社区提供的其它算法来提高性能。</p><span id="more"></span><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">scores</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Sunface&quot;</span>, <span class="hljs-number">98</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Daniel&quot;</span>, <span class="hljs-number">95</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Ashley&quot;</span>, <span class="hljs-number">69.0</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Katie&quot;</span>, <span class="hljs-string">&quot;58&quot;</span>);<br><br>    <span class="hljs-comment">// get 返回一个 Option&lt;&amp;V&gt; 枚举值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = scores.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Sunface&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(score, <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">98</span>));<br><br>    <span class="hljs-keyword">if</span> scores.<span class="hljs-title function_ invoke__">contains_key</span>(<span class="hljs-string">&quot;Daniel&quot;</span>) &#123;<br>        <span class="hljs-comment">// 索引返回一个值 V</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = scores[<span class="hljs-string">&quot;Daniel&quot;</span>];<br>        <span class="hljs-built_in">assert_eq!</span>(score, __);<br>        scores.<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-string">&quot;Daniel&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(scores.<span class="hljs-title function_ invoke__">len</span>(), __);<br><br>    <span class="hljs-keyword">for</span> (name, score) <span class="hljs-keyword">in</span> scores &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The score of &#123;&#125; is &#123;&#125;&quot;</span>, name, score)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">scores</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Sunface&quot;</span>, <span class="hljs-number">98</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Daniel&quot;</span>, <span class="hljs-number">95</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Ashley&quot;</span>, <span class="hljs-number">69</span>);<br>    scores.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;Katie&quot;</span>, <span class="hljs-number">58</span>);<br><br>    <span class="hljs-comment">// get 返回一个 Option&lt;&amp;V&gt; 枚举值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = scores.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Sunface&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(score, <span class="hljs-title function_ invoke__">Some</span>(&amp;<span class="hljs-number">98</span>));<br><br>    <span class="hljs-keyword">if</span> scores.<span class="hljs-title function_ invoke__">contains_key</span>(<span class="hljs-string">&quot;Daniel&quot;</span>) &#123;<br>        <span class="hljs-comment">// 索引返回一个值 V</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = scores[<span class="hljs-string">&quot;Daniel&quot;</span>];<br>        <span class="hljs-built_in">assert_eq!</span>(score, <span class="hljs-number">95</span>);<br>        scores.<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-string">&quot;Daniel&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(scores.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">for</span> (name, score) <span class="hljs-keyword">in</span> scores &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The score of &#123;&#125; is &#123;&#125;&quot;</span>, name, score)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams</span> = [<br>        (<span class="hljs-string">&quot;Chinese Team&quot;</span>, <span class="hljs-number">100</span>),<br>        (<span class="hljs-string">&quot;American Team&quot;</span>, <span class="hljs-number">10</span>),<br>        (<span class="hljs-string">&quot;France Team&quot;</span>, <span class="hljs-number">50</span>),<br>    ];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">teams_map1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">team</span> <span class="hljs-keyword">in</span> &amp;teams &#123;<br>        teams_map1.<span class="hljs-title function_ invoke__">insert</span>(team.<span class="hljs-number">0</span>, team.<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 使用两种方法实现 team_map2</span><br>    <span class="hljs-comment">// 提示:其中一种方法是使用 `collect` 方法</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams_map2</span>...<br><br>    <span class="hljs-built_in">assert_eq!</span>(teams_map1, teams_map2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams</span> = [<br>        (<span class="hljs-string">&quot;Chinese Team&quot;</span>, <span class="hljs-number">100</span>),<br>        (<span class="hljs-string">&quot;American Team&quot;</span>, <span class="hljs-number">10</span>),<br>        (<span class="hljs-string">&quot;France Team&quot;</span>, <span class="hljs-number">50</span>),<br>    ];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">teams_map1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">team</span> <span class="hljs-keyword">in</span> &amp;teams &#123;<br>        teams_map1.<span class="hljs-title function_ invoke__">insert</span>(team.<span class="hljs-number">0</span>, team.<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 使用两种方法实现 team_map2</span><br>    <span class="hljs-comment">// 提示:其中一种方法是使用 `collect` 方法</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams_map2</span>: HashMap&lt;_, _&gt; = teams.<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br><br>    <span class="hljs-built_in">assert_eq!</span>(teams_map1, teams_map2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams</span> = [<br>        (<span class="hljs-string">&quot;Chinese Team&quot;</span>, <span class="hljs-number">100</span>),<br>        (<span class="hljs-string">&quot;American Team&quot;</span>, <span class="hljs-number">10</span>),<br>        (<span class="hljs-string">&quot;France Team&quot;</span>, <span class="hljs-number">50</span>),<br>    ];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">teams_map1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">team</span> <span class="hljs-keyword">in</span> &amp;teams &#123;<br>        teams_map1.<span class="hljs-title function_ invoke__">insert</span>(team.<span class="hljs-number">0</span>, team.<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 使用两种方法实现 team_map2</span><br>    <span class="hljs-comment">// 提示:其中一种方法是使用 `collect` 方法</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams_map2</span> = HashMap::<span class="hljs-title function_ invoke__">from</span>(teams);<br><br>    <span class="hljs-built_in">assert_eq!</span>(teams_map1, teams_map2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 编译器可以根据后续的使用情况帮我自动推断出 HashMap 的类型，当然你也可以显式地标注类型：HashMap&lt;&amp;str, u8&gt;</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">player_stats</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// 查询指定的 key, 若不存在时，则插入新的 kv 值</span><br>    player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(player_stats[<span class="hljs-string">&quot;health&quot;</span>], __);<br><br>    <span class="hljs-comment">// 通过函数来返回新的值</span><br>    player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert_with</span>(random_stat_buff);<br>    <span class="hljs-built_in">assert_eq!</span>(player_stats[<span class="hljs-string">&quot;health&quot;</span>], __);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">health</span> = player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(health, __);<br>    *health -= <span class="hljs-number">50</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(*health, __);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">random_stat_buff</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;<br>    <span class="hljs-comment">// 为了简单，我们没有使用随机，而是返回一个固定的值</span><br>    <span class="hljs-number">42</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 编译器可以根据后续的使用情况帮我自动推断出 HashMap 的类型，当然你也可以显式地标注类型：HashMap&lt;&amp;str, u8&gt;</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">player_stats</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// 查询指定的 key, 若不存在时，则插入新的 kv 值</span><br>    player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(player_stats[<span class="hljs-string">&quot;health&quot;</span>], <span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// 通过函数来返回新的值</span><br>    player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert_with</span>(random_stat_buff);<br>    <span class="hljs-built_in">assert_eq!</span>(player_stats[<span class="hljs-string">&quot;health&quot;</span>], <span class="hljs-number">100</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">health</span> = player_stats.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;health&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(health, &amp;<span class="hljs-number">100</span>);<br>    *health -= <span class="hljs-number">50</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(*health, <span class="hljs-number">50</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">random_stat_buff</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;<br>    <span class="hljs-comment">// 为了简单，我们没有使用随机，而是返回一个固定的值</span><br>    <span class="hljs-number">42</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-key-的限制"><a href="#HashMap-key-的限制" class="headerlink" title="HashMap key 的限制"></a>HashMap key 的限制</h2><p>任何实现了 Eq 和 Hash 特征的类型都可以用于 HashMap 的 key，包括:</p><ul><li>bool (虽然很少用到，因为它只能表达两种 key)</li><li>int, uint 以及它们的变体，例如 u8、i32 等</li><li>String 和 &amp;str (提示: HashMap 的 key 是 String 类型时，你其实可以使用 &amp;str 配合 get 方法进行查询<br>需要注意的是，f32 和 f64 并没有实现 Hash，原因是 浮点数精度 的问题会导致它们无法进行相等比较。</li></ul><p>如果一个集合类型的所有字段都实现了 Eq 和 Hash,那该集合类型会自动实现 Eq 和 Hash。例如 Vect<T> 要实现 Hash，那么首先需要 T 实现 Hash。</p><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-comment">// 提示: `derive` 是实现一些常用特征的好办法</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Viking</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    country: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Viking</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-type">str</span>, country: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> Viking &#123;<br>        Viking &#123;<br>            name: name.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            country: country.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用 HashMap 来存储 viking 的生命值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vikings</span> = HashMap::<span class="hljs-title function_ invoke__">from</span>([<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Einar&quot;</span>, <span class="hljs-string">&quot;Norway&quot;</span>), <span class="hljs-number">25</span>),<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Olaf&quot;</span>, <span class="hljs-string">&quot;Denmark&quot;</span>), <span class="hljs-number">24</span>),<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Harald&quot;</span>, <span class="hljs-string">&quot;Iceland&quot;</span>), <span class="hljs-number">12</span>),<br>    ]);<br><br>    <span class="hljs-comment">// 使用 derive 的方式来打印 viking 的当前状态</span><br>    <span class="hljs-keyword">for</span> (viking, health) <span class="hljs-keyword">in</span> &amp;vikings &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125; has &#123;&#125; hp&quot;</span>, viking, health);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-comment">// 提示: `derive` 是实现一些常用特征的好办法</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-meta">#[derive(Hash, Eq, PartialEq, Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Viking</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    country: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Viking</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: &amp;<span class="hljs-type">str</span>, country: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> Viking &#123;<br>        Viking &#123;<br>            name: name.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            country: country.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用 HashMap 来存储 viking 的生命值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vikings</span> = HashMap::<span class="hljs-title function_ invoke__">from</span>([<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Einar&quot;</span>, <span class="hljs-string">&quot;Norway&quot;</span>), <span class="hljs-number">25</span>),<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Olaf&quot;</span>, <span class="hljs-string">&quot;Denmark&quot;</span>), <span class="hljs-number">24</span>),<br>        (Viking::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Harald&quot;</span>, <span class="hljs-string">&quot;Iceland&quot;</span>), <span class="hljs-number">12</span>),<br>    ]);<br><br>    <span class="hljs-comment">// 使用 derive 的方式来打印 viking 的当前状态</span><br>    <span class="hljs-keyword">for</span> (viking, health) <span class="hljs-keyword">in</span> &amp;vikings &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125; has &#123;&#125; hp&quot;</span>, viking, health);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><p>关于容量，我们在之前的 Vector 中有详细的介绍，而 HashMap 也可以调整容量: 你可以通过 HashMap::with_capacity(uint) 使用指定的容量来初始化，或者使用 HashMap::new() ，后者会提供一个默认的初始化容量。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span>: HashMap&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>&gt; = HashMap::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// 事实上，虽然我们使用了 100 容量来初始化，但是 map 的容量很可能会比 100 更多</span><br>    <span class="hljs-built_in">assert!</span>(map.<span class="hljs-title function_ invoke__">capacity</span>() &gt;= <span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// 对容量进行收缩，你提供的值仅仅是一个允许的最小值，实际上，Rust 会根据当前存储的数据量进行自动设置，当然，这个值会尽量靠近你提供的值，同时还可能会预留一些调整空间</span><br><br>    map.<span class="hljs-title function_ invoke__">shrink_to</span>(<span class="hljs-number">50</span>);<br>    <span class="hljs-built_in">assert!</span>(map.<span class="hljs-title function_ invoke__">capacity</span>() &gt;= <span class="hljs-number">50</span>);<br><br>    <span class="hljs-comment">// 让 Rust  自行调整到一个合适的值，剩余策略同上</span><br>    map.<span class="hljs-title function_ invoke__">shrink_to_fit</span>();<br>    <span class="hljs-built_in">assert!</span>(map.<span class="hljs-title function_ invoke__">capacity</span>() &gt;= <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>对于实现了 Copy 特征的类型，例如 i32，那类型的值会被拷贝到 HashMap 中。而对于有所有权的类型，例如 String，它们的值的所有权将被转移到 HashMap 中。</p><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，尽可能少的去修改代码</span><br><span class="hljs-comment">// 不要移除任何代码行！</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">m1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>  m1.<span class="hljs-title function_ invoke__">insert</span>(v1, v1);<br>  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;v1 is still usable after inserting to hashmap : &#123;&#125;&quot;</span>, v1);<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">m2</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>  <span class="hljs-comment">// 所有权在这里发生了转移</span><br>  m2.<span class="hljs-title function_ invoke__">insert</span>(v2, v1);<br><br>  <span class="hljs-built_in">assert_eq!</span>(v2, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，尽可能少的去修改代码</span><br><span class="hljs-comment">// 不要移除任何代码行！</span><br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">m1</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>  m1.<span class="hljs-title function_ invoke__">insert</span>(v1, v1);<br>  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;v1 is still usable after inserting to hashmap : &#123;&#125;&quot;</span>, v1);<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>  <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">m2</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>  <span class="hljs-comment">// 所有权在这里发生了转移</span><br>  m2.<span class="hljs-title function_ invoke__">insert</span>(v2, v1);<br><br>  <span class="hljs-built_in">assert_eq!</span>(v2, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三方库-Hash-库"><a href="#三方库-Hash-库" class="headerlink" title="三方库 Hash 库"></a>三方库 Hash 库</h2><p>在开头，我们提到过如果现有的 SipHash 1-3 的性能无法满足你的需求，那么可以使用社区提供的替代算法。</p><p>例如其中一个社区库的使用方式如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::hash::BuildHasherDefault;<br><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-comment">// 引入第三方的哈希函数</span><br><span class="hljs-keyword">use</span> twox_hash::XxHash64;<br><br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">hash</span>: HashMap&lt;_, _, BuildHasherDefault&lt;XxHash64&gt;&gt; = <span class="hljs-built_in">Default</span>::<span class="hljs-title function_ invoke__">default</span>();<br>hash.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">42</span>, <span class="hljs-string">&quot;the answer&quot;</span>);<br><span class="hljs-built_in">assert_eq!</span>(hash.<span class="hljs-title function_ invoke__">get</span>(&amp;<span class="hljs-number">42</span>), <span class="hljs-title function_ invoke__">Some</span>(&amp;<span class="hljs-string">&quot;the answer&quot;</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;HashMap 默认使用 SipHash 1-3 哈希算法，该算法对于抵抗 HashDos 攻击非常有效。在性能方面，如果你的 key 是中型大小的，那该算法非常不错，但是如果是小型的 key( 例如整数 )亦或是大型的 key ( 例如字符串 )，那你需要采用社区提供的其它算法来提高性能。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>计算机教学中消失的一个学期</title>
    <link href="https://lilinzta.github.io/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/"/>
    <id>https://lilinzta.github.io/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/</id>
    <published>2023-09-18T12:55:46.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<p>正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。</p><span id="more"></span><p>例如 Shell 编程、命令行配置、Git、Vim、tmux、ssh 等等。如果你是一个计算机小白，那么非常建议你学习一下这门课。</p><p>学习时长：10小时</p><h3 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h3><ul><li>课程网站：<a href="https://missing.csail.mit.edu/2020/">https://missing.csail.mit.edu/2020/</a></li><li>课程中文网站: <a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a></li><li>课程视频：<a href="https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J">https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J</a></li><li>课程中文字幕视频：<ul><li>Missing_Semi_中译组（未完结）：<a href="https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click</a></li><li>刘黑黑a（已完结）：<a href="https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click</a></li></ul></li><li>课程作业：一些随堂小练习，具体见课程网站。<blockquote><p>source: <a href="https://csdiy.wiki/">cs自学指南</a></p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Share" scheme="https://lilinzta.github.io/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>11.2.动态数组 Vector</title>
    <link href="https://lilinzta.github.io/2023/09/18/11-2-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-Vector/"/>
    <id>https://lilinzta.github.io/2023/09/18/11-2-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-Vector/</id>
    <published>2023-09-18T12:01:37.000Z</published>
    <updated>2024-01-20T11:35:40.998Z</updated>
    
    <content type="html"><![CDATA[<p>相比 [T; N] 形式的数组， Vector 最大的特点就是可以动态调整长度。</p><span id="more"></span><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">u8</span>; <span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>(arr);<br>    <span class="hljs-title function_ invoke__">is_vec</span>(v);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-title function_ invoke__">is_vec</span>(v);<br><br>    <span class="hljs-comment">// vec!(..) 和 vec![..] 是同样的宏，宏可以使用 []、()、&#123;&#125;三种形式，因此...</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-title function_ invoke__">is_vec</span>(v);<br><br>    <span class="hljs-comment">// ...在下面的代码中, v 是 Vec&lt;[u8; 3]&gt; , 而不是 Vec&lt;u8&gt;</span><br>    <span class="hljs-comment">// 使用 Vec::new 和 `for` 来重写下面这段代码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-built_in">vec!</span>(arr);<br>    <span class="hljs-title function_ invoke__">is_vec</span>(v1);<br><br>    <span class="hljs-built_in">assert_eq!</span>(v, v1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_vec</span>(v: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">u8</span>; <span class="hljs-number">3</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>(arr);<br>    <span class="hljs-title function_ invoke__">is_vec</span>(&amp;v);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-title function_ invoke__">is_vec</span>(&amp;v);<br><br>    <span class="hljs-comment">// vec!(..) 和 vec![..] 是同样的宏，宏可以使用 []、()、&#123;&#125;三种形式，因此...</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-title function_ invoke__">is_vec</span>(&amp;v);<br><br>    <span class="hljs-comment">// ...在下面的代码中, v 是 Vec&lt;[u8; 3]&gt; , 而不是 Vec&lt;u8&gt;</span><br>    <span class="hljs-comment">// 使用 Vec::new 和 `for` 来重写下面这段代码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v1</span> = <span class="hljs-built_in">vec!</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> &amp;v &#123;<br>        v1.<span class="hljs-title function_ invoke__">push</span>(*i);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">is_vec</span>(&amp;v1);<br><br>    <span class="hljs-built_in">assert_eq!</span>(v, v1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_vec</span>(v: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-Vec-可以使用-extend-方法进行扩展"><a href="#2-🌟🌟-Vec-可以使用-extend-方法进行扩展" class="headerlink" title="2.🌟🌟 Vec 可以使用 extend 方法进行扩展"></a>2.🌟🌟 Vec 可以使用 extend 方法进行扩展</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v1</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);<br>    v1.<span class="hljs-title function_ invoke__">pop</span>();<br>    v1.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v2</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    v2.__;<br><br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v1</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]);<br>    v1.<span class="hljs-title function_ invoke__">pop</span>();<br>    v1.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v2</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    v2.<span class="hljs-title function_ invoke__">extend</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将-X-类型转换-From-Into-特征-成-Vec"><a href="#将-X-类型转换-From-Into-特征-成-Vec" class="headerlink" title="将 X 类型转换(From&#x2F;Into 特征)成 Vec"></a>将 X 类型转换(From&#x2F;Into 特征)成 Vec</h2><p>只要为 Vec 实现了 From<T> 特征，那么 T 就可以被转换成 Vec。</p><h3 id="3-🌟🌟🌟"><a href="#3-🌟🌟🌟" class="headerlink" title="3.🌟🌟🌟"></a>3.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// array -&gt; Vec</span><br>    <span class="hljs-comment">// impl From&lt;[T; N]&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = __(arr);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = arr.__();<br><br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br><br>    <span class="hljs-comment">// String -&gt; Vec</span><br>    <span class="hljs-comment">// impl From&lt;String&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt; = s.__();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = s.<span class="hljs-title function_ invoke__">into_bytes</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br>    <span class="hljs-comment">// impl&lt;&#x27;_&gt; From&lt;&amp;&#x27;_ str&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v3</span> = <span class="hljs-type">Vec</span>::__(s);<br>    <span class="hljs-built_in">assert_eq!</span>(v2, v3);<br><br>    <span class="hljs-comment">// 迭代器 Iterators 可以通过 collect 变成 Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v4</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = [<span class="hljs-number">0</span>; <span class="hljs-number">10</span>].<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(v4, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>; <span class="hljs-number">10</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br> &#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// array -&gt; Vec</span><br>    <span class="hljs-comment">// impl From&lt;[T; N]&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>(arr);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = arr.<span class="hljs-title function_ invoke__">into</span>();<br><br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br><br>    <span class="hljs-comment">// String -&gt; Vec</span><br>    <span class="hljs-comment">// impl From&lt;String&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt; = s.<span class="hljs-title function_ invoke__">into</span>();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = s.<span class="hljs-title function_ invoke__">into_bytes</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(v1, v2);<br><br>    <span class="hljs-comment">// impl&lt;&#x27;_&gt; From&lt;&amp;&#x27;_ str&gt; for Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v3</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>(s);<br>    <span class="hljs-built_in">assert_eq!</span>(v2, v3);<br><br>    <span class="hljs-comment">// 迭代器 Iterators 可以通过 collect 变成 Vec</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v4</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = [<span class="hljs-number">0</span>; <span class="hljs-number">10</span>].<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(v4, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>; <span class="hljs-number">10</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="4-🌟🌟🌟"><a href="#4-🌟🌟🌟" class="headerlink" title="4.🌟🌟🌟"></a>4.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误并实现缺失的代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">5</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, v[i])<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">5</span> &#123;<br>       <span class="hljs-comment">// 实现这里的代码...</span><br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误并实现缺失的代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">5</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, v.<span class="hljs-title function_ invoke__">get</span>(i))<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">5</span> &#123;<br>       <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(x) = v.<span class="hljs-title function_ invoke__">get</span>(i) &#123;<br>           v[i] =  x + <span class="hljs-number">1</span><br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           v.<span class="hljs-title function_ invoke__">push</span>(i + <span class="hljs-number">2</span>)<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-built_in">vec!</span>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>与 String 的切片类似， Vec 也可以使用切片。如果说 Vec 是可变的，那它的切片就是不可变或者说只读的，我们可以通过 &amp; 来获取切片。</p><p>在 Rust 中，将切片作为参数进行传递是更常见的使用方式，例如当一个函数只需要可读性时，那传递 Vec 或 String 的切片 &amp;[T] &#x2F; &amp;str 会更加适合。</p><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = &amp;v[..];<br>    <span class="hljs-comment">// 越界访问将导致 panic.</span><br>    <span class="hljs-comment">// 修改时必须使用 `v.len`</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;v[<span class="hljs-number">0</span>..<span class="hljs-number">4</span>];<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, slice2);<br><br>    <span class="hljs-comment">// 切片是只读的</span><br>    <span class="hljs-comment">// 注意：切片和 `&amp;Vec` 是不同的类型，后者仅仅是 `Vec` 的引用，并可以通过解引用直接获取 `Vec`</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec_ref</span>: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = &amp;<span class="hljs-keyword">mut</span> v;<br>    (*vec_ref).<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice3</span> = &amp;<span class="hljs-keyword">mut</span> v[<span class="hljs-number">0</span>..<span class="hljs-number">3</span>];<br>    slice3.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice3, &amp;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = &amp;v[..];<br>    <span class="hljs-comment">// 越界访问将导致 panic.</span><br>    <span class="hljs-comment">// 修改时必须使用 `v.len`</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;v[<span class="hljs-number">0</span>..v.<span class="hljs-title function_ invoke__">len</span>()];<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, slice2);<br><br>    <span class="hljs-comment">// 切片是只读的</span><br>    <span class="hljs-comment">// 注意：切片和 `&amp;Vec` 是不同的类型，后者仅仅是 `Vec` 的引用，并可以通过解引用直接获取 `Vec`</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec_ref</span>: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = &amp;<span class="hljs-keyword">mut</span> v;<br>    (*vec_ref).<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice3</span> = &amp;<span class="hljs-keyword">mut</span> v[<span class="hljs-number">0</span>..];<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice3, &amp;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><p>容量 capacity 是已经分配好的内存空间，用于存储未来添加到 Vec 中的元素。而长度 len 则是当前 Vec 中已经存储的元素数量。如果要添加新元素时，长度将要超过已有的容量，那容量会自动进行增长：Rust 会重新分配一块更大的内存空间，然后将之前的 Vec 拷贝过去，因此，这里就会发生新的内存分配( 目前 Rust 的容量调整策略是加倍，例如 2 -&gt; 4 -&gt; 8 ..)。</p><p>若这段代码会频繁发生，那频繁的内存分配会大幅影响我们系统的性能，最好的办法就是提前分配好足够的容量，尽量减少内存分配。</p><h3 id="6-🌟🌟"><a href="#6-🌟🌟" class="headerlink" title="6.🌟🌟"></a>6.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), __);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), <span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// 由于提前设置了足够的容量，这里的循环不会造成任何内存分配...</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>        vec.<span class="hljs-title function_ invoke__">push</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), __);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), __);<br><br>    <span class="hljs-comment">// ...但是下面的代码会造成新的内存分配</span><br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">assert!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>() &gt;= <span class="hljs-number">11</span>);<br><br><br>    <span class="hljs-comment">// 填写一个合适的值，在 `for` 循环运行的过程中，不会造成任何内存分配</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(__);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">100</span> &#123;<br>        vec.<span class="hljs-title function_ invoke__">push</span>(i);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), __);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), __);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), <span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// 由于提前设置了足够的容量，这里的循环不会造成任何内存分配...</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>        vec.<span class="hljs-title function_ invoke__">push</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), <span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// ...但是下面的代码会造成新的内存分配</span><br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">assert!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>() &gt;= <span class="hljs-number">11</span>);<br><br><br>    <span class="hljs-comment">// 填写一个合适的值，在 `for` 循环运行的过程中，不会造成任何内存分配</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">100</span> &#123;<br>        vec.<span class="hljs-title function_ invoke__">push</span>(i);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">len</span>(), <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">capacity</span>(), <span class="hljs-number">100</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在-Vec-中存储不同类型的元素"><a href="#在-Vec-中存储不同类型的元素" class="headerlink" title="在 Vec 中存储不同类型的元素"></a>在 Vec 中存储不同类型的元素</h2><p>Vec 中的元素必须是相同的类型，例如以下代码会发生错误:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们可以使用枚举或特征对象来存储不同的类型.</p><h3 id="7-🌟🌟"><a href="#7-🌟🌟" class="headerlink" title="7.🌟🌟"></a>7.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>),<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> : <span class="hljs-type">Vec</span>&lt;IpAddr&gt;= __;<br><br>    <span class="hljs-comment">// 枚举的比较需要派生 PartialEq 特征</span><br>    <span class="hljs-built_in">assert_eq!</span>(v[<span class="hljs-number">0</span>], IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));<br>    <span class="hljs-built_in">assert_eq!</span>(v[<span class="hljs-number">1</span>], IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-type">String</span>),<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> : <span class="hljs-type">Vec</span>&lt;IpAddr&gt;= <span class="hljs-built_in">vec!</span>[<br>        IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()),<br>        IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())<br>    ];<br><br>    <span class="hljs-comment">// 枚举的比较需要派生 PartialEq 特征</span><br>    <span class="hljs-built_in">assert_eq!</span>(v[<span class="hljs-number">0</span>], IpAddr::<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));<br>    <span class="hljs-built_in">assert_eq!</span>(v[<span class="hljs-number">1</span>], IpAddr::<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟"><a href="#8-🌟🌟" class="headerlink" title="8.🌟🌟"></a>8.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V4</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V4</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv4: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V6</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V6</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv6: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: __= <span class="hljs-built_in">vec!</span>[<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ip</span> <span class="hljs-keyword">in</span> v &#123;<br>        ip.<span class="hljs-title function_ invoke__">display</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V4</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V4</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv4: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">V6</span>(<span class="hljs-type">String</span>);<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IpAddr</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">V6</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv6: &#123;:?&#125;&quot;</span>,<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> IpAddr&gt;&gt; = <span class="hljs-built_in">vec!</span>[<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V4</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">V6</span>(<span class="hljs-string">&quot;::1&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>())),<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ip</span> <span class="hljs-keyword">in</span> v &#123;<br>        ip.<span class="hljs-title function_ invoke__">display</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;相比 [T; N] 形式的数组， Vector 最大的特点就是可以动态调整长度。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>11.1.动态字符串 String</title>
    <link href="https://lilinzta.github.io/2023/09/17/11-1-%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-String/"/>
    <id>https://lilinzta.github.io/2023/09/17/11-1-%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2-String/</id>
    <published>2023-09-17T03:21:46.000Z</published>
    <updated>2024-01-20T11:35:54.968Z</updated>
    
    <content type="html"><![CDATA[<p>std::string::String 是 UTF-8 编码、可增长的动态字符串. 它也是我们日常开发中最常用的字符串类型，同时对于它所拥有的内容拥有所有权。</p><span id="more"></span><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-comment">// 1. 不要使用 `to_string()`</span><br><span class="hljs-comment">// 2. 不要添加/删除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;hello, &quot;</span>;<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    s.<span class="hljs-title function_ invoke__">push</span>(__);<br><br>    <span class="hljs-title function_ invoke__">move_ownership</span>(s);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">move_ownership</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ownership of \&quot;&#123;&#125;\&quot; is moved here!&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-comment">// 1. 不要使用 `to_string()`</span><br><span class="hljs-comment">// 2. 不要添加/删除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">move_ownership</span>(s.<span class="hljs-title function_ invoke__">clone</span>());<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">move_ownership</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ownership of \&quot;&#123;&#125;\&quot; is moved here!&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="String-and-str"><a href="#String-and-str" class="headerlink" title="String and &amp;str"></a>String and &amp;str</h2><p>虽然 String 的底层是 Vec<u8> 也就是字节数组的形式存储的，但是它是基于 UTF-8 编码的字符序列。String 分配在堆上、可增长且不是以 null 结尾。<br>而 &amp;str 是切片引用类型( &amp;[u8] )，指向一个合法的 UTF-8 字符序列，总之，&amp;str 和 String 的关系类似于 &amp;[T] 和 Vec<T> 。</p><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span>: &amp;<span class="hljs-type">str</span> = __; <span class="hljs-comment">// 使用两种方法</span><br>   <span class="hljs-built_in">assert_eq!</span>(slice1, <span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = __;<br>   <span class="hljs-built_in">assert_eq!</span>(slice2, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice3</span>: __ = __;<br>   slice3.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br>   <span class="hljs-built_in">assert_eq!</span>(slice3, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span>: &amp;<span class="hljs-type">str</span> = &amp;s; <span class="hljs-comment">// 使用两种方法</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span>: &amp;<span class="hljs-type">str</span> = s.<span class="hljs-title function_ invoke__">as_str</span>(); <span class="hljs-comment">// 使用两种方法</span><br>   <span class="hljs-built_in">assert_eq!</span>(slice1, <span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">5</span>];<br>   <span class="hljs-built_in">assert_eq!</span>(slice2, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice3</span>: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>   slice3.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br>   <span class="hljs-built_in">assert_eq!</span>(slice3, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 问题:  我们的代码中发生了多少次堆内存分配？</span><br><span class="hljs-comment">// 你的回答: 2</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 基于 `&amp;str` 类型创建一个 String,</span><br>    <span class="hljs-comment">// 字符串字面量的类型是 `&amp;str`</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>   <span class="hljs-comment">// 创建一个切片引用指向 String `s`</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: &amp;<span class="hljs-type">str</span> = &amp;s;<br><br>   <span class="hljs-comment">// 基于刚创建的切片来创建一个 String</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">String</span> = slice.<span class="hljs-title function_ invoke__">to_string</span>();<br><br>   <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UTF-8-索引"><a href="#UTF-8-索引" class="headerlink" title="UTF-8 &amp; 索引"></a>UTF-8 &amp; 索引</h2><p>由于 String 都是 UTF-8 编码的，这会带来几个影响:</p><ul><li>如果你需要的是非 UTF-8 字符串，可以考虑 OsString</li><li>无法通过索引的方式访问一个 String</li></ul><h3 id="4-🌟🌟🌟-我们无法通过索引的方式访问字符串中的某个字符，但是可以通过切片的方式来获取字符串的某一部分-s1-start-end"><a href="#4-🌟🌟🌟-我们无法通过索引的方式访问字符串中的某个字符，但是可以通过切片的方式来获取字符串的某一部分-s1-start-end" class="headerlink" title="4.🌟🌟🌟 我们无法通过索引的方式访问字符串中的某个字符，但是可以通过切片的方式来获取字符串的某一部分 &amp;s1[start..end]"></a>4.🌟🌟🌟 我们无法通过索引的方式访问字符串中的某个字符，但是可以通过切片的方式来获取字符串的某一部分 &amp;s1[start..end]</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, 世界&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = s[<span class="hljs-number">0</span>]; <span class="hljs-comment">//提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, <span class="hljs-string">&quot;h&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;s[<span class="hljs-number">3</span>..<span class="hljs-number">5</span>];<span class="hljs-comment">// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br>    <span class="hljs-built_in">assert_eq!</span>(slice2, <span class="hljs-string">&quot;世&quot;</span>);<br><br>    <span class="hljs-comment">// 迭代 s 中的所有字符</span><br>    <span class="hljs-keyword">for</span> (i, c) <span class="hljs-keyword">in</span> s.__ &#123;<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">7</span> &#123;<br>            <span class="hljs-built_in">assert_eq!</span>(c, <span class="hljs-string">&#x27;世&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, 世界&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">1</span>]; <span class="hljs-comment">//提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, <span class="hljs-string">&quot;h&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;s[<span class="hljs-number">7</span>..<span class="hljs-number">10</span>];<span class="hljs-comment">// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br>    <span class="hljs-built_in">assert_eq!</span>(slice2, <span class="hljs-string">&quot;世&quot;</span>);<br><br>    <span class="hljs-comment">// 迭代 s 中的所有字符</span><br>    <span class="hljs-keyword">for</span> (i, c) <span class="hljs-keyword">in</span> s.<span class="hljs-title function_ invoke__">chars</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">7</span> &#123;<br>            <span class="hljs-built_in">assert_eq!</span>(c, <span class="hljs-string">&#x27;世&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="utf8-slice"><a href="#utf8-slice" class="headerlink" title="utf8_slice"></a>utf8_slice</h2><p>我们可以使用 utf8_slice 来按照字符的自然索引方式对 UTF-8 字符串进行切片访问，与之前的切片方式相比，它索引的是字符，而之前的方式索引的是字节.</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> utf8_slice;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;The 🚀 goes to the 🌑!&quot;</span>;<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">rocket</span> = utf8_slice::<span class="hljs-title function_ invoke__">slice</span>(s, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>   <span class="hljs-comment">// Will equal &quot;🚀&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟"><a href="#5-🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟"></a>5.🌟🌟🌟</h3><blockquote><p>tips:也许你需要使用 from_utf8 方法<br>Q:</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    __;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>];<br><br>    <span class="hljs-comment">// 将字节数组转换成 String</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = __;<br><br><br>    <span class="hljs-built_in">assert_eq!</span>(s, s1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">108</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>];<br><br>    <span class="hljs-comment">// 将字节数组转换成 String</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_utf8</span>(v).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br><br>    <span class="hljs-built_in">assert_eq!</span>(s, s1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内部表示"><a href="#内部表示" class="headerlink" title="内部表示"></a>内部表示</h2><p>事实上 String 是一个智能指针，它作为一个结构体存储在栈上，然后指向存储在堆上的字符串底层数据。<br>存储在栈上的智能指针结构体由三部分组成：一个指针只指向堆上的字节数组，已使用的长度以及已分配的容量 capacity (已使用的长度小于等于已分配的容量，当容量不够时，会重新分配内存空间)。</p><h3 id="6-🌟🌟-如果-String-的当前容量足够，那么添加字符将不会导致新的内存分配"><a href="#6-🌟🌟-如果-String-的当前容量足够，那么添加字符将不会导致新的内存分配" class="headerlink" title="6.🌟🌟 如果 String 的当前容量足够，那么添加字符将不会导致新的内存分配"></a>6.🌟🌟 如果 String 的当前容量足够，那么添加字符将不会导致新的内存分配</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改下面的代码以打印如下内容:</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 循环中不会发生任何内存分配</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s.<span class="hljs-title function_ invoke__">capacity</span>());<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">2</span> &#123;<br>        s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s.<span class="hljs-title function_ invoke__">capacity</span>());<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改下面的代码以打印如下内容:</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 25</span><br><span class="hljs-comment">// 循环中不会发生任何内存分配</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">25</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s.<span class="hljs-title function_ invoke__">capacity</span>());<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">2</span> &#123;<br>        s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s.<span class="hljs-title function_ invoke__">capacity</span>());<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-🌟🌟🌟"><a href="#7-🌟🌟🌟" class="headerlink" title="7.🌟🌟🌟"></a>7.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::mem;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">story</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Rust By Practice&quot;</span>);<br><br>    <span class="hljs-comment">// 阻止 String 的数据被自动 drop</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">story</span> = mem::ManuallyDrop::<span class="hljs-title function_ invoke__">new</span>(story);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr</span> = story.__();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = story.__();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">capacity</span> = story.__();<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">16</span>, len);<br><br>    <span class="hljs-comment">// 我们可以基于 ptr 指针、长度和容量来重新构建 String.</span><br>    <span class="hljs-comment">// 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-keyword">unsafe</span> &#123; <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_raw_parts</span>(ptr, len, capacity) &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*story, s);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::mem;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">story</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Rust By Practice&quot;</span>);<br><br>    <span class="hljs-comment">// 阻止 String 的数据被自动 drop</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">story</span> = mem::ManuallyDrop::<span class="hljs-title function_ invoke__">new</span>(story);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ptr</span> = story.<span class="hljs-title function_ invoke__">as_mut_ptr</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = story.<span class="hljs-title function_ invoke__">len</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">capacity</span> = story.<span class="hljs-title function_ invoke__">capacity</span>();<br><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">16</span>, len);<br><br>    <span class="hljs-comment">// 我们可以基于 ptr 指针、长度和容量来重新构建 String.</span><br>    <span class="hljs-comment">// 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-keyword">unsafe</span> &#123; <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from_raw_parts</span>(ptr, len, capacity) &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*story, s);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;std::string::String 是 UTF-8 编码、可增长的动态字符串. 它也是我们日常开发中最常用的字符串类型，同时对于它所拥有的内容拥有所有权。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>10.5.进一步深入特征</title>
    <link href="https://lilinzta.github.io/2023/09/15/10-5-%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%B7%B1%E5%85%A5%E7%89%B9%E5%BE%81/"/>
    <id>https://lilinzta.github.io/2023/09/15/10-5-%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%B7%B1%E5%85%A5%E7%89%B9%E5%BE%81/</id>
    <published>2023-09-15T15:22:23.000Z</published>
    <updated>2024-01-17T15:05:42.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h2><p>关联类型主要用于提升代码的可读性，例如以下代码:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">CacheableItem</span>: <span class="hljs-built_in">Clone</span> + <span class="hljs-built_in">Default</span> + fmt::<span class="hljs-built_in">Debug</span> + Decodable + Encodable &#123;<br>  <span class="hljs-keyword">type</span> <span class="hljs-title class_">Address</span>: <span class="hljs-built_in">AsRef</span>&lt;[<span class="hljs-type">u8</span>]&gt; + <span class="hljs-built_in">Clone</span> + fmt::<span class="hljs-built_in">Debug</span> + <span class="hljs-built_in">Eq</span> + Hash;<br>  <span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_null</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比 AsRef&lt;[u8]&gt; + Clone + fmt::Debug + Eq + Hash， Address 的使用可以极大的减少其它类型在实现该特征时所需的模版代码.</p><h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Container</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><br><span class="hljs-comment">// 使用关联类型实现重新实现以下特征</span><br><span class="hljs-comment">// trait Contains &#123;</span><br><span class="hljs-comment">//    type A;</span><br><span class="hljs-comment">//    type B;</span><br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Contains</span>&lt;A, B&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">contains</span>(&amp;<span class="hljs-keyword">self</span>, _: &amp;A, _: &amp;B) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">first</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">last</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Contains</span>&lt;<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Container</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">contains</span>(&amp;<span class="hljs-keyword">self</span>, number_1: &amp;<span class="hljs-type">i32</span>, number_2: &amp;<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        (&amp;<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span> == number_1) &amp;&amp; (&amp;<span class="hljs-keyword">self</span>.<span class="hljs-number">1</span> == number_2)<br>    &#125;<br>    <span class="hljs-comment">// Grab the first number.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">first</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span> &#125;<br><br>    <span class="hljs-comment">// Grab the last number.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">last</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">difference</span>&lt;A, B, C: Contains&lt;A, B&gt;&gt;(container: &amp;C) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    container.<span class="hljs-title function_ invoke__">last</span>() - container.<span class="hljs-title function_ invoke__">first</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number_1</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number_2</span> = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">container</span> = <span class="hljs-title function_ invoke__">Container</span>(number_1, number_2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Does container contain &#123;&#125; and &#123;&#125;: &#123;&#125;&quot;</span>,<br>        &amp;number_1, &amp;number_2,<br>        container.<span class="hljs-title function_ invoke__">contains</span>(&amp;number_1, &amp;number_2));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;First number: &#123;&#125;&quot;</span>, container.<span class="hljs-title function_ invoke__">first</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Last number: &#123;&#125;&quot;</span>, container.<span class="hljs-title function_ invoke__">last</span>());<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The difference is: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">difference</span>(&amp;container));<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Container</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><br><span class="hljs-comment">// 使用关联类型实现重新实现以下特征</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Contains</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">A</span>;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">B</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">contains</span>(&amp;<span class="hljs-keyword">self</span>, _: &amp;<span class="hljs-keyword">Self</span>::A, _: &amp;<span class="hljs-keyword">Self</span>::B) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">first</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">last</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Contains</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Container</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">A</span> = <span class="hljs-type">i32</span>;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">B</span> = <span class="hljs-type">i32</span>;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">contains</span>(&amp;<span class="hljs-keyword">self</span>, number_1: &amp;<span class="hljs-type">i32</span>, number_2: &amp;<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        (&amp;<span class="hljs-keyword">self</span>.<span class="hljs-number">0</span> == number_1) &amp;&amp; (&amp;<span class="hljs-keyword">self</span>.<span class="hljs-number">1</span> == number_2)<br>    &#125;<br>    <span class="hljs-comment">// Grab the first number.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">first</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span> &#125;<br><br>    <span class="hljs-comment">// Grab the last number.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">last</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-number">1</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">difference</span>&lt;C: Contains&gt;(container: &amp;C) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    container.<span class="hljs-title function_ invoke__">last</span>() - container.<span class="hljs-title function_ invoke__">first</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number_1</span> = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number_2</span> = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">container</span> = <span class="hljs-title function_ invoke__">Container</span>(number_1, number_2);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Does container contain &#123;&#125; and &#123;&#125;: &#123;&#125;&quot;</span>,<br>        &amp;number_1, &amp;number_2,<br>        container.<span class="hljs-title function_ invoke__">contains</span>(&amp;number_1, &amp;number_2));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;First number: &#123;&#125;&quot;</span>, container.<span class="hljs-title function_ invoke__">first</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Last number: &#123;&#125;&quot;</span>, container.<span class="hljs-title function_ invoke__">last</span>());<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The difference is: &#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">difference</span>(&amp;container));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义默认的泛型类型参数"><a href="#定义默认的泛型类型参数" class="headerlink" title="定义默认的泛型类型参数"></a>定义默认的泛型类型参数</h2><p>当我们使用泛型类型参数时，可以为该泛型参数指定一个具体的默认类型，这样当实现该特征时，如果该默认类型可以使用，那用户再无需手动指定具体的类型。</p><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops::Sub;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-comment">// 用三种方法填空: 其中两种使用默认的泛型参数，另外一种不使用</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">__</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = <span class="hljs-keyword">Self</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, other: <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::Output &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x - other.x,<br>            y: <span class="hljs-keyword">self</span>.y - other.y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(Point &#123; x: <span class="hljs-number">2</span>, y: <span class="hljs-number">3</span> &#125; - Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span> &#125;,<br>        Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">3</span> &#125;);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops::Sub;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-comment">// 用三种方法填空: 其中两种使用默认的泛型参数，另外一种不使用</span><br><span class="hljs-keyword">impl</span>&lt;T: Sub&lt;Output = T&gt;&gt; Sub&lt;Point&lt;T&gt;&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = <span class="hljs-keyword">Self</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, other: <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::Output &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x - other.x,<br>            y: <span class="hljs-keyword">self</span>.y - other.y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(Point &#123; x: <span class="hljs-number">2</span>, y: <span class="hljs-number">3</span> &#125; - Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span> &#125;,<br>        Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">3</span> &#125;);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops::Sub;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-comment">// 用三种方法填空: 其中两种使用默认的泛型参数，另外一种不使用</span><br><span class="hljs-keyword">impl</span>&lt;T: Sub&lt;Output = T&gt;&gt; Sub&lt;<span class="hljs-keyword">Self</span>&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = <span class="hljs-keyword">Self</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, other: <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::Output &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x - other.x,<br>            y: <span class="hljs-keyword">self</span>.y - other.y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(Point &#123; x: <span class="hljs-number">2</span>, y: <span class="hljs-number">3</span> &#125; - Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span> &#125;,<br>        Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">3</span> &#125;);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops::Sub;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-comment">// 用三种方法填空: 其中两种使用默认的泛型参数，另外一种不使用</span><br><span class="hljs-keyword">impl</span>&lt;T: Sub&lt;Output = T&gt;&gt; Sub <span class="hljs-keyword">for</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = <span class="hljs-keyword">Self</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, other: <span class="hljs-keyword">Self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>::Output &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x - other.x,<br>            y: <span class="hljs-keyword">self</span>.y - other.y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(Point &#123; x: <span class="hljs-number">2</span>, y: <span class="hljs-number">3</span> &#125; - Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span> &#125;,<br>        Point &#123; x: <span class="hljs-number">1</span>, y: <span class="hljs-number">3</span> &#125;);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完全限定语法"><a href="#完全限定语法" class="headerlink" title="完全限定语法"></a>完全限定语法</h2><p>在 Rust 中，两个不同特征的方法完全可以同名，且你可以为同一个类型同时实现这两个特征。这种情况下，就出现了一个问题：该如何调用这两个特征上定义的同名方法。为了解决这个问题，我们需要使用完全限定语法( Fully Qualified Syntax )。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">UsernameWidget</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">AgeWidget</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Form</span> &#123;<br>    username: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">UsernameWidget</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Form</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.username.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">AgeWidget</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Form</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;<br>        <span class="hljs-keyword">self</span>.age<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">form</span> = Form&#123;<br>        username: <span class="hljs-string">&quot;rustacean&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(),<br>        age: <span class="hljs-number">28</span>,<br>    &#125;;<br><br>    <span class="hljs-comment">// 如果你反注释下面一行代码，将看到一个错误: Fully Qualified Syntax</span><br>    <span class="hljs-comment">// 毕竟，这里有好几个同名的 `get` 方法</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;, form.get());</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">username</span> = UsernameWidget::<span class="hljs-title function_ invoke__">get</span>(&amp;form);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">&quot;rustacean&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(), username);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = AgeWidget::<span class="hljs-title function_ invoke__">get</span>(&amp;form); <span class="hljs-comment">// 你还可以使用以下语法 `&lt;Form as AgeWidget&gt;::get`</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">28</span>, age);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Pilot</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Wizard</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Human</span>;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Pilot</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;This is your captain speaking.&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Wizard</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Up!&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;*waving arms furiously*&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">person</span> = Human;<br><br>    <span class="hljs-built_in">assert_eq!</span>(__, <span class="hljs-string">&quot;This is your captain speaking.&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(__, <span class="hljs-string">&quot;Up!&quot;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(__, <span class="hljs-string">&quot;*waving arms furiously*&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Pilot</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Wizard</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Human</span>;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Pilot</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;This is your captain speaking.&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Wizard</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Up!&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Human</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;*waving arms furiously*&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">person</span> = Human;<br><br>    <span class="hljs-built_in">assert_eq!</span>(Pilot::<span class="hljs-title function_ invoke__">fly</span>(&amp;person), <span class="hljs-string">&quot;This is your captain speaking.&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(Wizard::<span class="hljs-title function_ invoke__">fly</span>(&amp;person), <span class="hljs-string">&quot;Up!&quot;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(person.<span class="hljs-title function_ invoke__">fly</span>(), <span class="hljs-string">&quot;*waving arms furiously*&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Supertraits"><a href="#Supertraits" class="headerlink" title="Supertraits"></a>Supertraits</h2><p>有些时候我们希望在特征上实现类似继承的特性，例如让一个特征 A 使用另一个特征 B 的功能。这种情况下，一个类型要实现特征 A 首先要实现特征 B， 特征 B 就被称为 supertrait</p><h3 id="4-🌟🌟🌟"><a href="#4-🌟🌟🌟" class="headerlink" title="4.🌟🌟🌟"></a>4.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">name</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-comment">// Person 是 Student 的 supertrait .</span><br><span class="hljs-comment">// 实现 Student 需要同时实现 Person.</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Student</span>: Person &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">university</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Programmer</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fav_language</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-comment">// CompSciStudent (computer science student) 是 Programmer</span><br><span class="hljs-comment">// 和 Student 的 subtrait. 实现 CompSciStudent 需要先实现这两个 supertraits.</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">CompSciStudent</span>: Programmer + Student &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">git_username</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">comp_sci_student_greeting</span>(student: &amp;<span class="hljs-keyword">dyn</span> CompSciStudent) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<br>        <span class="hljs-string">&quot;My name is &#123;&#125; and I attend &#123;&#125;. My favorite language is &#123;&#125;. My Git username is &#123;&#125;&quot;</span>,<br>        student.<span class="hljs-title function_ invoke__">name</span>(),<br>        student.<span class="hljs-title function_ invoke__">university</span>(),<br>        student.<span class="hljs-title function_ invoke__">fav_language</span>(),<br>        student.<span class="hljs-title function_ invoke__">git_username</span>()<br>    )<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    university: <span class="hljs-type">String</span>,<br>    fav_language: <span class="hljs-type">String</span>,<br>    git_username: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-comment">// 为 CSStudent 实现所需的特征</span><br><span class="hljs-keyword">impl</span> ...<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">student</span> = CSStudent &#123;<br>        name: <span class="hljs-string">&quot;Sunfei&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        university: <span class="hljs-string">&quot;XXX&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        fav_language: <span class="hljs-string">&quot;Rust&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        git_username: <span class="hljs-string">&quot;sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;;<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">comp_sci_student_greeting</span>(__));<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">name</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-comment">// Person 是 Student 的 supertrait .</span><br><span class="hljs-comment">// 实现 Student 需要同时实现 Person.</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Student</span>: Person &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">university</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Programmer</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fav_language</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-comment">// CompSciStudent (computer science student) 是 Programmer </span><br><span class="hljs-comment">// 和 Student 的 subtrait. 实现 CompSciStudent 需要先实现这两个 supertraits.</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">CompSciStudent</span>: Programmer + Student &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">git_username</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">comp_sci_student_greeting</span>(student: &amp;<span class="hljs-keyword">dyn</span> CompSciStudent) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<br>        <span class="hljs-string">&quot;My name is &#123;&#125; and I attend &#123;&#125;. My favorite language is &#123;&#125;. My Git username is &#123;&#125;&quot;</span>,<br>        student.<span class="hljs-title function_ invoke__">name</span>(),<br>        student.<span class="hljs-title function_ invoke__">university</span>(),<br>        student.<span class="hljs-title function_ invoke__">fav_language</span>(),<br>        student.<span class="hljs-title function_ invoke__">git_username</span>()<br>    )<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    university: <span class="hljs-type">String</span>,<br>    fav_language: <span class="hljs-type">String</span>,<br>    git_username: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-comment">// 为 CSStudent 实现所需的特征</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">name</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.name.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">university</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.university.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Programmer</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fav_language</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.fav_language.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">CompSciStudent</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">CSStudent</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">git_username</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.git_username.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">student</span> = CSStudent &#123;<br>        name: <span class="hljs-string">&quot;Sunfei&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        university: <span class="hljs-string">&quot;XXX&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        fav_language: <span class="hljs-string">&quot;Rust&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        git_username: <span class="hljs-string">&quot;sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;;<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">comp_sci_student_greeting</span>(&amp;student));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="孤儿原则"><a href="#孤儿原则" class="headerlink" title="孤儿原则"></a>孤儿原则</h2><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fmt;<br><br><span class="hljs-comment">// 定义一个 newtype `Pretty`</span><br><br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">Pretty</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;\&quot;&#123;&#125;\&quot;&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;, world&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">w</span> = <span class="hljs-title function_ invoke__">Pretty</span>(<span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;w = &#123;&#125;&quot;</span>, w);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fmt;<br><br><span class="hljs-comment">// 定义一个 newtype `Pretty`</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pretty</span>(<span class="hljs-type">String</span>);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">fmt</span>::Display <span class="hljs-keyword">for</span> <span class="hljs-title class_">Pretty</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fmt</span>(&amp;<span class="hljs-keyword">self</span>, f: &amp;<span class="hljs-keyword">mut</span> fmt::Formatter) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>        <span class="hljs-built_in">write!</span>(f, <span class="hljs-string">&quot;\&quot;&#123;&#125;\&quot;&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-number">0</span>.<span class="hljs-title function_ invoke__">clone</span>() + <span class="hljs-string">&quot;, world&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">w</span> = <span class="hljs-title function_ invoke__">Pretty</span>(<span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;w = &#123;&#125;&quot;</span>, w);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关联类型&quot;&gt;&lt;a href=&quot;#关联类型&quot; class=&quot;headerlink&quot; title=&quot;关联类型&quot;&gt;&lt;/a&gt;关联类型&lt;/h2&gt;&lt;p&gt;关联类型主要用于提升代码的可读性，例如以下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>10.4.特征对象</title>
    <link href="https://lilinzta.github.io/2023/09/02/10-4-%E7%89%B9%E5%BE%81%E5%AF%B9%E8%B1%A1/"/>
    <id>https://lilinzta.github.io/2023/09/02/10-4-%E7%89%B9%E5%BE%81%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-09-02T09:17:10.000Z</published>
    <updated>2024-01-17T15:05:42.358Z</updated>
    
    <content type="html"><![CDATA[<p>在特征练习中 我们已经知道当函数返回多个类型时，impl Trait 是无法使用的。</p><p>对于数组而言，其中一个限制就是无法存储不同类型的元素，但是通过之前的学习，大家应该知道枚举可以在部分场景解决这种问题，但是这种方法局限性较大。此时就需要我们的主角登场了。</p><span id="more"></span><h2 id="使用-dyn-返回特征"><a href="#使用-dyn-返回特征" class="headerlink" title="使用 dyn 返回特征"></a>使用 dyn 返回特征</h2><p>Rust 编译器需要知道一个函数的返回类型占用多少内存空间。由于特征的不同实现类型可能会占用不同的内存，因此通过 impl Trait 返回多个类型是不被允许的，但是我们可以返回一个 dyn 特征对象来解决问题。</p><h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Duck</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">swim</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck is swimming&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Swan</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck.. oh sorry, the swan is flying&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>&#123;<br>        <span class="hljs-string">&quot;duck duck&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>&#123;<br>        <span class="hljs-string">&quot;swan swan&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">duck</span> = __;<br>    duck.<span class="hljs-title function_ invoke__">swim</span>();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = <span class="hljs-title function_ invoke__">hatch_a_bird</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 变成鸟儿后，它忘记了如何游，因此以下代码会报错</span><br>    <span class="hljs-comment">// bird.swim();</span><br>    <span class="hljs-comment">// 但它依然可以叫唤</span><br>    <span class="hljs-built_in">assert_eq!</span>(bird.<span class="hljs-title function_ invoke__">quack</span>(), <span class="hljs-string">&quot;duck duck&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = <span class="hljs-title function_ invoke__">hatch_a_bird</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 这只鸟儿忘了如何飞翔，因此以下代码会报错</span><br>    <span class="hljs-comment">// bird.fly();</span><br>    <span class="hljs-comment">// 但它也可以叫唤</span><br>    <span class="hljs-built_in">assert_eq!</span>(bird.<span class="hljs-title function_ invoke__">quack</span>(), <span class="hljs-string">&quot;swan swan&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">hatch_a_bird</span>...<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Duck</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">swim</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck is swimming&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Swan</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck.. oh sorry, the swan is flying&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>&#123;<br>        <span class="hljs-string">&quot;duck duck&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>&#123;<br>        <span class="hljs-string">&quot;swan swan&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">duck</span> = Duck;<br>    duck.<span class="hljs-title function_ invoke__">swim</span>();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = <span class="hljs-title function_ invoke__">hatch_a_bird</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 变成鸟儿后，它忘记了如何游，因此以下代码会报错</span><br>    <span class="hljs-comment">// bird.swim();</span><br>    <span class="hljs-comment">// 但它依然可以叫唤</span><br>    <span class="hljs-built_in">assert_eq!</span>(bird.<span class="hljs-title function_ invoke__">quack</span>(), <span class="hljs-string">&quot;duck duck&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">bird</span> = <span class="hljs-title function_ invoke__">hatch_a_bird</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 这只鸟儿忘了如何飞翔，因此以下代码会报错</span><br>    <span class="hljs-comment">// bird.fly();</span><br>    <span class="hljs-comment">// 但它也可以叫唤</span><br>    <span class="hljs-built_in">assert_eq!</span>(bird.<span class="hljs-title function_ invoke__">quack</span>(), <span class="hljs-string">&quot;swan swan&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">hatch_a_bird</span>(species: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span><span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Bird&gt; &#123;<br>    <span class="hljs-keyword">if</span> species == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Swan&#123;&#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Duck&#123;&#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在数组中使用特征对象"><a href="#在数组中使用特征对象" class="headerlink" title="在数组中使用特征对象"></a>在数组中使用特征对象</h2><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Duck</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck is flying&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Swan</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck.. oh sorry, the swan is flying&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;duck duck&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;swan swan&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">birds</span> __;<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">bird</span> <span class="hljs-keyword">in</span> birds &#123;<br>        bird.<span class="hljs-title function_ invoke__">quack</span>();<br>        <span class="hljs-comment">// 当 duck 和 swan 变成 bird 后，它们都忘了如何翱翔于天际，只记得该怎么叫唤了。。</span><br>        <span class="hljs-comment">// 因此，以下代码会报错</span><br>        <span class="hljs-comment">// bird.fly();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Bird</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>);<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Duck</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck is flying&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Swan</span>;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fly</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Look, the duck.. oh sorry, the swan is flying&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;duck duck&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Swan</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">quack</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-string">&quot;swan swan&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">birds</span>: [<span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Bird&gt;; <span class="hljs-number">2</span>] = [<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Duck &#123;&#125;), <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Swan &#123;&#125;)];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">bird</span> <span class="hljs-keyword">in</span> birds &#123;<br>        bird.<span class="hljs-title function_ invoke__">quack</span>();<br>        <span class="hljs-comment">// 当 duck 和 swan 变成 bird 后，它们都忘了如何翱翔于天际，只记得该怎么叫唤了。。</span><br>        <span class="hljs-comment">// 因此，以下代码会报错</span><br>        <span class="hljs-comment">// bird.fly();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="dyn-and-Box"><a href="#dyn-and-Box" class="headerlink" title="&amp;dyn and Box"></a>&amp;dyn and Box<dyn></h2><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Draw</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Draw</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u8</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;u8: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Draw</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">f64</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;f64: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1.1f64</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">8u8</span>;<br><br>    <span class="hljs-comment">// draw x</span><br>    <span class="hljs-title function_ invoke__">draw_with_box</span>(__);<br><br>    <span class="hljs-comment">// draw y</span><br>    <span class="hljs-title function_ invoke__">draw_with_ref</span>(&amp;y);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw_with_box</span>(x: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Draw&gt;) &#123;<br>    x.<span class="hljs-title function_ invoke__">draw</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw_with_ref</span>(x: __) &#123;<br>    x.<span class="hljs-title function_ invoke__">draw</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Draw</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Draw</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u8</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;u8: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Draw</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">f64</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;f64: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1.1f64</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">8u8</span>;<br><br>    <span class="hljs-comment">// draw x</span><br>    <span class="hljs-title function_ invoke__">draw_with_box</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(x));<br><br>    <span class="hljs-comment">// draw y</span><br>    <span class="hljs-title function_ invoke__">draw_with_ref</span>(&amp;y);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw_with_box</span>(x: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Draw&gt;) &#123;<br>    x.<span class="hljs-title function_ invoke__">draw</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">draw_with_ref</span>(x: &amp;<span class="hljs-keyword">dyn</span> Draw) &#123;<br>    x.<span class="hljs-title function_ invoke__">draw</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态分发和动态分发Static-and-Dynamic-dispatch"><a href="#静态分发和动态分发Static-and-Dynamic-dispatch" class="headerlink" title="静态分发和动态分发Static and Dynamic dispatch"></a>静态分发和动态分发Static and Dynamic dispatch</h2><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u8</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;u8: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>) &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;string: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>) &#125;<br>&#125;<br><br><span class="hljs-comment">// 通过泛型实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">static_dispatch</span>...<br><br><span class="hljs-comment">// 通过特征对象实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dynamic_dispatch</span>...<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5u8</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-string">&quot;Hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><br>    <span class="hljs-title function_ invoke__">static_dispatch</span>(x);<br>    <span class="hljs-title function_ invoke__">dynamic_dispatch</span>(&amp;y);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u8</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;u8: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>) &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Foo</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">method</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;string: &#123;&#125;&quot;</span>, *<span class="hljs-keyword">self</span>) &#125;<br>&#125;<br><br><span class="hljs-comment">// 通过泛型实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">static_dispatch</span>&lt;T: Foo&gt;(x: T) &#123;<br>    x.<span class="hljs-title function_ invoke__">method</span>();<br>&#125;<br><br><span class="hljs-comment">// 通过特征对象实现以下函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">dynamic_dispatch</span>(x: &amp;<span class="hljs-keyword">dyn</span> Foo) &#123;<br>    x.<span class="hljs-title function_ invoke__">method</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5u8</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-string">&quot;Hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><br>    <span class="hljs-title function_ invoke__">static_dispatch</span>(x);<br>    <span class="hljs-title function_ invoke__">dynamic_dispatch</span>(&amp;y);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象安全"><a href="#对象安全" class="headerlink" title="对象安全"></a>对象安全</h2><p>一个特征能变成特征对象，首先该特征必须是对象安全的，即该特征的所有方法都必须拥有以下特点：</p><ul><li>返回类型不能是 Self</li><li>不能使用泛型参数</li></ul><h3 id="5-🌟🌟🌟🌟"><a href="#5-🌟🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟🌟"></a>5.🌟🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法让代码工作</span><br><span class="hljs-comment">// 不要添加/删除任何代码行</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">MyTrait</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u32</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123; <span class="hljs-number">42</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">clone</span>() &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">my_function</span>(x: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt;)  &#123;<br>    x.<span class="hljs-title function_ invoke__">f</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">13_u32</span>));<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;abc&quot;</span>)));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法让代码工作</span><br><span class="hljs-comment">// 不要添加/删除任何代码行</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">MyTrait</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u32</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123; <span class="hljs-number">42</span> &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">clone</span>() &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">my_function</span>(x: <span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> &#123;<br>    x.<span class="hljs-title function_ invoke__">f</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-number">13_u32</span>);<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;abc&quot;</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法让代码工作</span><br><span class="hljs-comment">// 不要添加/删除任何代码行</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">MyTrait</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt;;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">u32</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt; &#123; <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">42</span>) &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MyTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">String</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">f</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt; &#123; <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">clone</span>()) &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">my_function</span>(x: <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> MyTrait&gt; &#123;<br>    x.<span class="hljs-title function_ invoke__">f</span>()<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">13_u32</span>));<br>    <span class="hljs-title function_ invoke__">my_function</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;abc&quot;</span>)));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在特征练习中 我们已经知道当函数返回多个类型时，impl Trait 是无法使用的。&lt;/p&gt;
&lt;p&gt;对于数组而言，其中一个限制就是无法存储不同类型的元素，但是通过之前的学习，大家应该知道枚举可以在部分场景解决这种问题，但是这种方法局限性较大。此时就需要我们的主角登场了。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>shell_gpt</title>
    <link href="https://lilinzta.github.io/2023/08/26/shell-gpt/"/>
    <id>https://lilinzta.github.io/2023/08/26/shell-gpt/</id>
    <published>2023-08-26T08:24:01.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。"><a href="#由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。" class="headerlink" title="由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。"></a>由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。</h2><span id="more"></span><blockquote><p>Tips: 下面都是废话，可以直接看这两个链接：<a href="https://github.com/chatanywhere/GPT_API_free">GPT_API_free</a>和<a href="https://github.com/TheR1D/shell_gpt">shell_gpt</a></p></blockquote><h2 id="获取一个免费的GPT-API"><a href="#获取一个免费的GPT-API" class="headerlink" title="获取一个免费的GPT_API"></a>获取一个免费的GPT_API</h2><p>点击第一个链接，获取免费的GPT_API，当然也可以付费获得更好的体验。</p><p>与官方的API使用步骤基本相同，需要额外设置代理，具体使用可以详细阅读文档。</p><h2 id="shell-gpt使用GPT-API-free"><a href="#shell-gpt使用GPT-API-free" class="headerlink" title="shell_gpt使用GPT_API_free"></a>shell_gpt使用GPT_API_free</h2><p>第二个链接，使用方法说的很详细。配置文件在<code>~/.config/shell_gpt/.sgptrc</code>,需要配置(修改)以下两个变量:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">OPENAI_API_KEY</span>=领取的免费API(一般为sk-开头)<br><span class="hljs-attr">OPENAI_API_HOST</span>=https://api.chatanywhere.cn 或者 https://api.chatanywhere.com.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。&quot;&gt;&lt;a href=&quot;#由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。&quot; class=&quot;headerlink&quot; title=&quot;由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。&quot;&gt;&lt;/a&gt;由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务。&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Share" scheme="https://lilinzta.github.io/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>10.3.特征 Trait</title>
    <link href="https://lilinzta.github.io/2023/08/20/10-3-%E7%89%B9%E5%BE%81-Traits/"/>
    <id>https://lilinzta.github.io/2023/08/20/10-3-%E7%89%B9%E5%BE%81-Traits/</id>
    <published>2023-08-20T12:49:30.000Z</published>
    <updated>2024-01-20T11:36:23.539Z</updated>
    
    <content type="html"><![CDATA[<p>特征 Trait 可以告诉编译器一个特定的类型所具有的、且能跟其它类型共享的特性。我们可以使用特征通过抽象的方式来定义这种共享行为，还可以使用特征约束来限定一个泛型类型必须要具有某个特定的行为。</p><span id="more"></span><blockquote><p>Note: 特征跟其它语言的接口较为类似，但是仍然有一些区别</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sheep</span> &#123; naked: <span class="hljs-type">bool</span>, name: <span class="hljs-type">String</span> &#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Sheep</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_naked</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">self</span>.naked<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">shear</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">is_naked</span>() &#123;<br>            <span class="hljs-comment">// `Sheep` 结构体上定义的方法可以调用 `Sheep` 所实现的特征的方法</span><br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is already naked...&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">name</span>());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; gets a haircut!&quot;</span>, <span class="hljs-keyword">self</span>.name);<br><br>            <span class="hljs-keyword">self</span>.naked = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 关联函数签名；`Self` 指代实现者的类型</span><br>    <span class="hljs-comment">// 例如我们在为 Pig 类型实现特征时，那 `new` 函数就会返回一个 `Pig` 类型的实例，这里的 `Self` 指代的就是 `Pig` 类型</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span>;<br><br>    <span class="hljs-comment">// 方法签名</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">name</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br><br>    <span class="hljs-comment">// 方法还能提供默认的定义实现</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">talk</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; says &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">name</span>(), <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">noise</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Sheep</span> &#123;<br>    <span class="hljs-comment">// `Self` 被替换成具体的实现者类型： `Sheep`</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(name: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> Sheep &#123;<br>        Sheep &#123; name: name, naked: <span class="hljs-literal">false</span> &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">name</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">self</span>.name.<span class="hljs-title function_ invoke__">clone</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">is_naked</span>() &#123;<br>            <span class="hljs-string">&quot;baaaaah?&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;baaaaah!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 默认的特征方法可以被重写</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">talk</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; pauses briefly... &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.name, <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">noise</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 这里的类型注释时必须的</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">dolly</span>: Sheep = Animal::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;Dolly&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-comment">// TODO ^ 尝试去除类型注释，看看会发生什么</span><br><br>    dolly.<span class="hljs-title function_ invoke__">talk</span>();<br>    dolly.<span class="hljs-title function_ invoke__">shear</span>();<br>    dolly.<span class="hljs-title function_ invoke__">talk</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 完成两个 `impl` 语句块</span><br><span class="hljs-comment">// 不要修改 `main` 中的代码</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_hi</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_something</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Student</span> &#123;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span> &#123;&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Teacher</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = Student &#123;&#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(s.<span class="hljs-title function_ invoke__">say_hi</span>(), <span class="hljs-string">&quot;hi&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(s.<span class="hljs-title function_ invoke__">say_something</span>(), <span class="hljs-string">&quot;I&#x27;m a good student&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = Teacher &#123;&#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-title function_ invoke__">say_hi</span>(), <span class="hljs-string">&quot;Hi, I&#x27;m your new teacher&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-title function_ invoke__">say_something</span>(), <span class="hljs-string">&quot;I&#x27;m not a bad teacher&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 完成两个 `impl` 语句块</span><br><span class="hljs-comment">// 不要修改 `main` 中的代码</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_hi</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_something</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_something</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I&#x27;m a good student&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span> &#123;&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_hi</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hi, I&#x27;m your new teacher&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_something</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I&#x27;m not a bad teacher&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = Student &#123;&#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(s.<span class="hljs-title function_ invoke__">say_hi</span>(), <span class="hljs-string">&quot;hi&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(s.<span class="hljs-title function_ invoke__">say_something</span>(), <span class="hljs-string">&quot;I&#x27;m a good student&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = Teacher &#123;&#125;;<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-title function_ invoke__">say_hi</span>(), <span class="hljs-string">&quot;Hi, I&#x27;m your new teacher&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-title function_ invoke__">say_something</span>(), <span class="hljs-string">&quot;I&#x27;m not a bad teacher&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Derive-派生"><a href="#Derive-派生" class="headerlink" title="Derive 派生"></a>Derive 派生</h2><p>我们可以使用 #[derive] 属性来派生一些特征，对于这些特征编译器会自动进行默认实现，对于日常代码开发而言，这是非常方便的，例如大家经常用到的 Debug 特征，就是直接通过派生来获取默认实现，而无需我们手动去完成这个工作。</p><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// `Centimeters`, 一个元组结构体，可以被比较大小</span><br><span class="hljs-meta">#[derive(PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Centimeters</span>(<span class="hljs-type">f64</span>);<br><br><span class="hljs-comment">// `Inches`, 一个元组结构体可以被打印</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Inches</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Inches</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">to_centimeters</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Centimeters &#123;<br>        <span class="hljs-keyword">let</span> &amp;<span class="hljs-title function_ invoke__">Inches</span>(inches) = <span class="hljs-keyword">self</span>;<br><br>        <span class="hljs-title function_ invoke__">Centimeters</span>(inches <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">2.54</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 添加一些属性让代码工作</span><br><span class="hljs-comment">// 不要修改其它代码！</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Seconds</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_one_second</span> = <span class="hljs-title function_ invoke__">Seconds</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One second looks like: &#123;:?&#125;&quot;</span>, _one_second);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_this_is_true</span> = _one_second == _one_second;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_this_is_true</span> = _one_second &gt; _one_second;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">foot</span> = <span class="hljs-title function_ invoke__">Inches</span>(<span class="hljs-number">12</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One foot equals &#123;:?&#125;&quot;</span>, foot);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">meter</span> = <span class="hljs-title function_ invoke__">Centimeters</span>(<span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cmp</span> =<br>        <span class="hljs-keyword">if</span> foot.<span class="hljs-title function_ invoke__">to_centimeters</span>() &lt; meter &#123;<br>            <span class="hljs-string">&quot;smaller&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;bigger&quot;</span><br>        &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One foot is &#123;&#125; than one meter.&quot;</span>, cmp);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// `Centimeters`, 一个元组结构体，可以被比较大小</span><br><span class="hljs-meta">#[derive(PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Centimeters</span>(<span class="hljs-type">f64</span>);<br><br><span class="hljs-comment">// `Inches`, 一个元组结构体可以被打印</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Inches</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Inches</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">to_centimeters</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> Centimeters &#123;<br>        <span class="hljs-keyword">let</span> &amp;<span class="hljs-title function_ invoke__">Inches</span>(inches) = <span class="hljs-keyword">self</span>;<br><br>        <span class="hljs-title function_ invoke__">Centimeters</span>(inches <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-number">2.54</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 添加一些属性让代码工作</span><br><span class="hljs-comment">// 不要修改其它代码！</span><br><span class="hljs-meta">#[derive(PartialEq, PartialOrd, Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Seconds</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_one_second</span> = <span class="hljs-title function_ invoke__">Seconds</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One second looks like: &#123;:?&#125;&quot;</span>, _one_second);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_this_is_true</span> = _one_second == _one_second;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_this_is_true</span> = _one_second &gt; _one_second;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">foot</span> = <span class="hljs-title function_ invoke__">Inches</span>(<span class="hljs-number">12</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One foot equals &#123;:?&#125;&quot;</span>, foot);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">meter</span> = <span class="hljs-title function_ invoke__">Centimeters</span>(<span class="hljs-number">100.0</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">cmp</span> =<br>        <span class="hljs-keyword">if</span> foot.<span class="hljs-title function_ invoke__">to_centimeters</span>() &lt; meter &#123;<br>            <span class="hljs-string">&quot;smaller&quot;</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-string">&quot;bigger&quot;</span><br>        &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One foot is &#123;&#125; than one meter.&quot;</span>, cmp);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>在 Rust 中，许多运算符都可以被重载，事实上，运算符仅仅是特征方法调用的语法糖。例如 a + b 中的 + 是 std::ops::Add 特征的 add 方法调用，因此我们可以为自定义类型实现该特征来支持该类型的加法运算。</p><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops;<br><br><span class="hljs-comment">// 实现 fn multiply 方法</span><br><span class="hljs-comment">// 如上所述，`+` 需要 `T` 类型实现 `std::ops::Add` 特征</span><br><span class="hljs-comment">// 那么, `*` 运算符需要实现什么特征呢? 你可以在这里找到答案: https://doc.rust-lang.org/core/ops/</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">6</span>, <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-number">2u8</span>, <span class="hljs-number">3u8</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5.0</span>, <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">5.0</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::ops;<br><br><span class="hljs-comment">// 实现 fn multiply 方法</span><br><span class="hljs-comment">// 如上所述，`+` 需要 `T` 类型实现 `std::ops::Add` 特征</span><br><span class="hljs-comment">// 那么, `*` 运算符需要实现什么特征呢? 你可以在这里找到答案: https://doc.rust-lang.org/core/ops/</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">multiply</span>&lt;T: ops::Mul&lt;Output = T&gt;&gt;(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    x * y<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">6</span>, <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-number">2u8</span>, <span class="hljs-number">3u8</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5.0</span>, <span class="hljs-title function_ invoke__">multiply</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">5.0</span>));<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟🌟"><a href="#4-🌟🌟🌟" class="headerlink" title="4.🌟🌟🌟"></a>4.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要修改 `main` 中的代码!</span><br><span class="hljs-keyword">use</span> std::ops;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bar</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FooBar</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BarFoo</span>;<br><br><span class="hljs-comment">// 下面的代码实现了自定义类型的相加： Foo + Bar = FooBar</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ops</span>::Add&lt;Bar&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = FooBar;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(<span class="hljs-keyword">self</span>, _rhs: Bar) <span class="hljs-punctuation">-&gt;</span> FooBar &#123;<br>        FooBar<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ops</span>::Sub&lt;Foo&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Bar</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = BarFoo;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, _rhs: Foo) <span class="hljs-punctuation">-&gt;</span> BarFoo &#123;<br>        BarFoo<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改下面代码</span><br>    <span class="hljs-comment">// 你需要为 FooBar 派生一些特征来让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>(Foo + Bar, FooBar);<br>    <span class="hljs-built_in">assert_eq!</span>(Foo - Bar, BarFoo);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要修改 `main` 中的代码!</span><br><span class="hljs-keyword">use</span> std::ops;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Foo</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Bar</span>;<br><br><span class="hljs-meta">#[derive(PartialEq, Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FooBar</span>;<br><br><span class="hljs-meta">#[derive(PartialEq, Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BarFoo</span>;<br><br><span class="hljs-comment">// 下面的代码实现了自定义类型的相加： Foo + Bar = FooBar</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ops</span>::Add&lt;Bar&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = FooBar;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(<span class="hljs-keyword">self</span>, _rhs: Bar) <span class="hljs-punctuation">-&gt;</span> FooBar &#123;<br>        FooBar<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">ops</span>::Sub&lt;Bar&gt; <span class="hljs-keyword">for</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">type</span> <span class="hljs-title class_">Output</span> = BarFoo;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">sub</span>(<span class="hljs-keyword">self</span>, _rhs: Bar) <span class="hljs-punctuation">-&gt;</span> BarFoo &#123;<br>        BarFoo<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改下面代码</span><br>    <span class="hljs-comment">// 你需要为 FooBar 派生一些特征来让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>(Foo + Bar, FooBar);<br>    <span class="hljs-built_in">assert_eq!</span>(Foo - Bar, BarFoo);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用特征作为函数参数"><a href="#使用特征作为函数参数" class="headerlink" title="使用特征作为函数参数"></a>使用特征作为函数参数</h2><p>除了使用具体类型来作为函数参数，我们还能通过 impl Trait 的方式来指定实现了该特征的参数：该参数能接受的类型必须要实现指定的特征。</p><h3 id="5-🌟🌟🌟"><a href="#5-🌟🌟🌟" class="headerlink" title="5.🌟🌟🌟"></a>5.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现 `fn summary` </span><br><span class="hljs-comment">// 修复错误且不要移除任何代码行</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span> &#123;<br>    title: <span class="hljs-type">String</span>,<br>    author: <span class="hljs-type">String</span>,<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Post</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;The author of post &#123;&#125; is &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.title, <span class="hljs-keyword">self</span>.author)<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Weibo</span> &#123;<br>    username: <span class="hljs-type">String</span>,<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Weibo</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125; published a weibo &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.username, <span class="hljs-keyword">self</span>.content)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">post</span> = Post &#123;<br>        title: <span class="hljs-string">&quot;Popular Rust&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        author: <span class="hljs-string">&quot;Sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;Rust is awesome!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">weibo</span> = Weibo &#123;<br>        username: <span class="hljs-string">&quot;sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;Weibo seems to be worse than Tweet&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>    &#125;;<br><br>    <span class="hljs-title function_ invoke__">summary</span>(post);<br>    <span class="hljs-title function_ invoke__">summary</span>(weibo);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, post);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, weibo);<br>&#125;<br><br><span class="hljs-comment">// 在下面实现 `fn summary` 函数</span><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现 `fn summary` </span><br><span class="hljs-comment">// 修复错误且不要移除任何代码行</span><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Summary</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span> &#123;<br>    title: <span class="hljs-type">String</span>,<br>    author: <span class="hljs-type">String</span>,<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Post</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;The author of post &#123;&#125; is &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.title, <span class="hljs-keyword">self</span>.author)<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Weibo</span> &#123;<br>    username: <span class="hljs-type">String</span>,<br>    content: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Weibo</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">summarize</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125; published a weibo &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.username, <span class="hljs-keyword">self</span>.content)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">post</span> = Post &#123;<br>        title: <span class="hljs-string">&quot;Popular Rust&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        author: <span class="hljs-string">&quot;Sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;Rust is awesome!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>    &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">weibo</span> = Weibo &#123;<br>        username: <span class="hljs-string">&quot;sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>        content: <span class="hljs-string">&quot;Weibo seems to be worse than Tweet&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>    &#125;;<br><br>    <span class="hljs-title function_ invoke__">summary</span>(&amp;post);<br>    <span class="hljs-title function_ invoke__">summary</span>(&amp;weibo);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, post);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, weibo);<br>&#125;<br><br><span class="hljs-comment">// 在下面实现 `fn summary` 函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">summary</span>(t: &amp;<span class="hljs-keyword">impl</span> <span class="hljs-title class_">Summary</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span> = t.<span class="hljs-title function_ invoke__">summarize</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用特征作为函数返回值"><a href="#使用特征作为函数返回值" class="headerlink" title="使用特征作为函数返回值"></a>使用特征作为函数返回值</h2><p>我们还可以在函数的返回值中使用 impl Trait 语法。然后只有在返回值是同一个类型时，才能这么使用，如果返回值是不同的类型，你可能更需要特征对象。</p><h3 id="6-🌟🌟"><a href="#6-🌟🌟" class="headerlink" title="6.🌟🌟"></a>6.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sheep</span> &#123;&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cow</span> &#123;&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Sheep</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-string">&quot;baaaaah!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Cow</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-string">&quot;moooooo!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 返回一个类型，该类型实现了 Animal 特征，但是我们并不能在编译期获知具体返回了哪个类型</span><br><span class="hljs-comment">// 修复这里的错误，你可以使用虚假的随机，也可以使用特征对象</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">random_animal</span>(random_number: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">if</span> random_number &lt; <span class="hljs-number">0.5</span> &#123;<br>        Sheep &#123;&#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Cow &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">random_number</span> = <span class="hljs-number">0.234</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">animal</span> = <span class="hljs-title function_ invoke__">random_animal</span>(random_number);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You&#x27;ve randomly chosen an animal, and it says &#123;&#125;&quot;</span>, animal.<span class="hljs-title function_ invoke__">noise</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Sheep</span> &#123;&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cow</span> &#123;&#125;<br><br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span>;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Sheep</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-string">&quot;baaaaah!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Cow</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">noise</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-string">&quot;moooooo!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 返回一个类型，该类型实现了 Animal 特征，但是我们并不能在编译期获知具体返回了哪个类型</span><br><span class="hljs-comment">// 修复这里的错误，你可以使用虚假的随机，也可以使用特征对象</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">random_animal</span>(random_number: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Animal&gt; &#123;<br>    <span class="hljs-keyword">if</span> random_number &lt; <span class="hljs-number">0.5</span> &#123;<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Sheep &#123;&#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Cow &#123;&#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">random_number</span> = <span class="hljs-number">0.234</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">animal</span> = <span class="hljs-title function_ invoke__">random_animal</span>(random_number);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;You&#x27;ve randomly chosen an animal, and it says &#123;&#125;&quot;</span>, animal.<span class="hljs-title function_ invoke__">noise</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="特征约束"><a href="#特征约束" class="headerlink" title="特征约束"></a>特征约束</h2><p>impl Trait 语法非常直观简洁，但它实际上是特征约束的语法糖。<br>当使用泛型参数时，我们往往需要为该参数指定特定的行为，这种指定方式就是通过特征约束来实现的。</p><h3 id="7-🌟🌟"><a href="#7-🌟🌟" class="headerlink" title="7.🌟🌟"></a>7.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-comment">// 通过两种方法使用特征约束来实现 `fn sum`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>&lt;T&gt;(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>), <span class="hljs-number">3.0</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>&lt;T: std::ops::Add&lt;Output = T&gt;&gt;(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>), <span class="hljs-number">3.0</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>&lt;T&gt;(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> T<br><span class="hljs-keyword">where</span><br>    T: std::ops::Add&lt;Output = T&gt;,<br>&#123;<br>    x + y<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟"><a href="#8-🌟🌟" class="headerlink" title="8.🌟🌟"></a>8.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码中的错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            x,<br>            y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: std::fmt::<span class="hljs-built_in">Debug</span> + <span class="hljs-built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cmp_display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.x &gt;= <span class="hljs-keyword">self</span>.y &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is x = &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.x);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is y = &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.y);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Unit</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">pair</span> = Pair&#123;<br>        x: <span class="hljs-title function_ invoke__">Unit</span>(<span class="hljs-number">1</span>),<br>        y: <span class="hljs-title function_ invoke__">Unit</span>(<span class="hljs-number">3</span>)<br>    &#125;;<br><br>    pair.<span class="hljs-title function_ invoke__">cmp_display</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码中的错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            x,<br>            y,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: std::fmt::<span class="hljs-built_in">Debug</span> + <span class="hljs-built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cmp_display</span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.x &gt;= <span class="hljs-keyword">self</span>.y &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is x = &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.x);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The largest member is y = &#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>.y);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#[derive(Debug, PartialEq, PartialOrd)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Unit</span>(<span class="hljs-type">i32</span>);<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">pair</span> = Pair&#123;<br>        x: <span class="hljs-title function_ invoke__">Unit</span>(<span class="hljs-number">1</span>),<br>        y: <span class="hljs-title function_ invoke__">Unit</span>(<span class="hljs-number">3</span>)<br>    &#125;;<br><br>    pair.<span class="hljs-title function_ invoke__">cmp_display</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-🌟🌟🌟"><a href="#9-🌟🌟🌟" class="headerlink" title="9.🌟🌟🌟"></a>9.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">example1</span>() &#123;<br>    <span class="hljs-comment">// `T: Trait` 是最常使用的方式</span><br>    <span class="hljs-comment">// `T: Fn(u32) -&gt; u32` 说明 `T` 只能接收闭包类型的参数</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cacher</span>&lt;T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>&gt; &#123;<br>        calculation: T,<br>        value: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">u32</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>&gt; Cacher&lt;T&gt; &#123;<br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(calculation: T) <span class="hljs-punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;<br>            Cacher &#123;<br>                calculation,<br>                value: <span class="hljs-literal">None</span>,<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span>.value &#123;<br>                <span class="hljs-title function_ invoke__">Some</span>(v) =&gt; v,<br>                <span class="hljs-literal">None</span> =&gt; &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">self</span>.calculation)(arg);<br>                    <span class="hljs-keyword">self</span>.value = <span class="hljs-title function_ invoke__">Some</span>(v);<br>                    v<br>                &#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cacher</span> = Cacher::<span class="hljs-title function_ invoke__">new</span>(|x| x+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">10</span>), __);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">15</span>), __);<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">example2</span>() &#123;<br>    <span class="hljs-comment">// 还可以使用 `where` 来约束 T</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cacher</span>&lt;T&gt;<br>        <span class="hljs-keyword">where</span> T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>,<br>    &#123;<br>        calculation: T,<br>        value: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">u32</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span>&lt;T&gt; Cacher&lt;T&gt;<br>        <span class="hljs-keyword">where</span> T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>,<br>    &#123;<br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(calculation: T) <span class="hljs-punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;<br>            Cacher &#123;<br>                calculation,<br>                value: <span class="hljs-literal">None</span>,<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span>.value &#123;<br>                <span class="hljs-title function_ invoke__">Some</span>(v) =&gt; v,<br>                <span class="hljs-literal">None</span> =&gt; &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">self</span>.calculation)(arg);<br>                    <span class="hljs-keyword">self</span>.value = <span class="hljs-title function_ invoke__">Some</span>(v);<br>                    v<br>                &#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cacher</span> = Cacher::<span class="hljs-title function_ invoke__">new</span>(|x| x+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">20</span>), __);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">25</span>), __);<br>&#125;<br><br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">example1</span>();<br>    <span class="hljs-title function_ invoke__">example2</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">example1</span>() &#123;<br>    <span class="hljs-comment">// `T: Trait` 是最常使用的方式</span><br>    <span class="hljs-comment">// `T: Fn(u32) -&gt; u32` 说明 `T` 只能接收闭包类型的参数</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cacher</span>&lt;T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>&gt; &#123;<br>        calculation: T,<br>        value: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">u32</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>&gt; Cacher&lt;T&gt; &#123;<br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(calculation: T) <span class="hljs-punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;<br>            Cacher &#123;<br>                calculation,<br>                value: <span class="hljs-literal">None</span>,<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span>.value &#123;<br>                <span class="hljs-title function_ invoke__">Some</span>(v) =&gt; v,<br>                <span class="hljs-literal">None</span> =&gt; &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">self</span>.calculation)(arg);<br>                    <span class="hljs-keyword">self</span>.value = <span class="hljs-title function_ invoke__">Some</span>(v);<br>                    v<br>                &#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cacher</span> = Cacher::<span class="hljs-title function_ invoke__">new</span>(|x| x+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">10</span>), <span class="hljs-number">11</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">15</span>), <span class="hljs-number">11</span>);<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">example2</span>() &#123;<br>    <span class="hljs-comment">// 还可以使用 `where` 来约束 T</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cacher</span>&lt;T&gt;<br>        <span class="hljs-keyword">where</span> T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>,<br>    &#123;<br>        calculation: T,<br>        value: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">u32</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span>&lt;T&gt; Cacher&lt;T&gt;<br>        <span class="hljs-keyword">where</span> T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span>,<br>    &#123;<br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(calculation: T) <span class="hljs-punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;<br>            Cacher &#123;<br>                calculation,<br>                value: <span class="hljs-literal">None</span>,<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>            <span class="hljs-keyword">match</span> <span class="hljs-keyword">self</span>.value &#123;<br>                <span class="hljs-title function_ invoke__">Some</span>(v) =&gt; v,<br>                <span class="hljs-literal">None</span> =&gt; &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">self</span>.calculation)(arg);<br>                    <span class="hljs-keyword">self</span>.value = <span class="hljs-title function_ invoke__">Some</span>(v);<br>                    v<br>                &#125;,<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cacher</span> = Cacher::<span class="hljs-title function_ invoke__">new</span>(|x| x+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">20</span>), <span class="hljs-number">21</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(cacher.<span class="hljs-title function_ invoke__">value</span>(<span class="hljs-number">25</span>), <span class="hljs-number">21</span>);<br>&#125;<br><br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">example1</span>();<br>    <span class="hljs-title function_ invoke__">example2</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;特征 Trait 可以告诉编译器一个特定的类型所具有的、且能跟其它类型共享的特性。我们可以使用特征通过抽象的方式来定义这种共享行为，还可以使用特征约束来限定一个泛型类型必须要具有某个特定的行为。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>10.2.Const 泛型</title>
    <link href="https://lilinzta.github.io/2023/08/19/10-2-Const-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://lilinzta.github.io/2023/08/19/10-2-Const-%E6%B3%9B%E5%9E%8B/</id>
    <published>2023-08-19T09:12:46.000Z</published>
    <updated>2024-01-20T11:36:35.202Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的泛型中，可以抽象为一句话：针对类型实现的泛型，所有的泛型都是为了抽象不同的类型，那有没有针对值的泛型？答案就是 Const 泛型。</p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="1-下面的例子同时使用泛型和-const-泛型来实现一个结构体，该结构体的字段中的数组长度是可变的"><a href="#1-下面的例子同时使用泛型和-const-泛型来实现一个结构体，该结构体的字段中的数组长度是可变的" class="headerlink" title="1.下面的例子同时使用泛型和 const 泛型来实现一个结构体，该结构体的字段中的数组长度是可变的"></a>1.下面的例子同时使用泛型和 const 泛型来实现一个结构体，该结构体的字段中的数组长度是可变的</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArrayPair</span>&lt;T, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; &#123;<br>    left: [T; N],<br>    right: [T; N],<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: <span class="hljs-built_in">Debug</span>, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; <span class="hljs-built_in">Debug</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">ArrayPair</span>&lt;T, N&gt; &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-目前，const-泛型参数只能使用以下形式的实参"><a href="#2-目前，const-泛型参数只能使用以下形式的实参" class="headerlink" title="2.目前，const 泛型参数只能使用以下形式的实参:"></a>2.目前，const 泛型参数只能使用以下形式的实参:</h3><ul><li>一个单独的 const 泛型参数</li><li>一个字面量 (i.e. 整数, 布尔值或字符).</li><li>一个具体的 const 表达式( 表达式中不能包含任何 泛型参数)<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>&lt;<span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt;() &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">bar</span>&lt;T, <span class="hljs-keyword">const</span> M: <span class="hljs-type">usize</span>&gt;() &#123;<br>    foo::&lt;M&gt;(); <span class="hljs-comment">// ok: 符合第一种</span><br>    foo::&lt;<span class="hljs-number">2021</span>&gt;(); <span class="hljs-comment">// ok: 符合第二种</span><br>    foo::&lt;&#123;<span class="hljs-number">20</span> * <span class="hljs-number">100</span> + <span class="hljs-number">20</span> * <span class="hljs-number">10</span> + <span class="hljs-number">1</span>&#125;&gt;(); <span class="hljs-comment">// ok: 符合第三种</span><br><br>    foo::&lt;&#123; M + <span class="hljs-number">1</span> &#125;&gt;(); <span class="hljs-comment">// error: 违背第三种，const 表达式中不能有泛型参数 M</span><br>    foo::&lt;&#123; std::mem::size_of::&lt;T&gt;() &#125;&gt;(); <span class="hljs-comment">// error: 泛型表达式包含了泛型参数 T</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span>: [<span class="hljs-type">u8</span>; M]; <span class="hljs-comment">// ok: 符合第一种</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span>: [<span class="hljs-type">u8</span>; std::mem::size_of::&lt;T&gt;()]; <span class="hljs-comment">// error: 泛型表达式包含了泛型参数 T</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-const-泛型还能帮我们避免一些运行时检查，提升性能"><a href="#3-const-泛型还能帮我们避免一些运行时检查，提升性能" class="headerlink" title="3.const 泛型还能帮我们避免一些运行时检查，提升性能"></a>3.const 泛型还能帮我们避免一些运行时检查，提升性能</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">MinSlice</span>&lt;T, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; &#123;<br>    <span class="hljs-keyword">pub</span> head: [T; N],<br>    <span class="hljs-keyword">pub</span> tail: [T],<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: &amp;[<span class="hljs-type">u8</span>] = <span class="hljs-string">b&quot;Hello, world&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">reference</span>: <span class="hljs-type">Option</span>&lt;&amp;<span class="hljs-type">u8</span>&gt; = slice.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">6</span>);<br>    <span class="hljs-comment">// 我们知道 `.get` 返回的是 `Some(b&#x27; &#x27;)`</span><br>    <span class="hljs-comment">// 但编译器不知道</span><br>    <span class="hljs-built_in">assert!</span>(reference.<span class="hljs-title function_ invoke__">is_some</span>());<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: &amp;[<span class="hljs-type">u8</span>] = <span class="hljs-string">b&quot;Hello, world&quot;</span>;<br><br>    <span class="hljs-comment">// 当编译构建 MinSlice 时会进行长度检查，也就是在编译期我们就知道它的长度是 12</span><br>    <span class="hljs-comment">// 在运行期，一旦 `unwrap` 成功，在 `MinSlice` 的作用域内，就再无需任何检查</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">minslice</span> = MinSlice::&lt;<span class="hljs-type">u8</span>, <span class="hljs-number">12</span>&gt;::<span class="hljs-title function_ invoke__">from_slice</span>(slice).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span>: <span class="hljs-type">u8</span> = minslice.head[<span class="hljs-number">6</span>];<br>    <span class="hljs-built_in">assert_eq!</span>(value, <span class="hljs-string">b&#x27; &#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1-🌟🌟-是结构体类型的一部分，和数组类型一样，这意味着长度不同会导致类型不同：-Array-和-Array-是不同的类型"><a href="#1-🌟🌟-是结构体类型的一部分，和数组类型一样，这意味着长度不同会导致类型不同：-Array-和-Array-是不同的类型" class="headerlink" title="1.🌟🌟 &lt;T, const N: usize&gt; 是结构体类型的一部分，和数组类型一样，这意味着长度不同会导致类型不同： Array&lt;i32, 3&gt; 和 Array&lt;i32, 4&gt; 是不同的类型"></a>1.🌟🌟 &lt;T, const N: usize&gt; 是结构体类型的一部分，和数组类型一样，这意味着长度不同会导致类型不同： Array&lt;i32, 3&gt; 和 Array&lt;i32, 4&gt; 是不同的类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Array</span>&lt;T, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; &#123;<br>    data : [T; N]<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arrays</span> = [<br>        Array&#123;<br>            data: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        &#125;,<br>        Array &#123;<br>            data: [<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>],<br>        &#125;,<br>        Array &#123;<br>            data: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>        &#125;<br>    ];<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Array</span>&lt;T, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt; &#123;<br>    data : [T; N]<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arrays</span> = [<br>        Array&#123;<br>            data: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        &#125;,<br>        Array &#123;<br>            data: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        &#125;,<br>        Array &#123;<br>            data: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>        &#125;<br>    ];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_array</span>&lt;__&gt;(__) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, arr);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-title function_ invoke__">print_array</span>(arr);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>];<br>    <span class="hljs-title function_ invoke__">print_array</span>(arr);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_array</span>&lt;T: std::fmt::<span class="hljs-built_in">Debug</span>, <span class="hljs-keyword">const</span> N: <span class="hljs-type">usize</span>&gt;(arr: [T; N]) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, arr);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-title function_ invoke__">print_array</span>(arr);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>];<br>    <span class="hljs-title function_ invoke__">print_array</span>(arr);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟-有时我们希望能限制一个变量占用内存的大小，例如在嵌入式环境中，此时-const-泛型参数的第三种形式-const-表达式-就非常适合"><a href="#3-🌟🌟🌟-有时我们希望能限制一个变量占用内存的大小，例如在嵌入式环境中，此时-const-泛型参数的第三种形式-const-表达式-就非常适合" class="headerlink" title="3.🌟🌟🌟 有时我们希望能限制一个变量占用内存的大小，例如在嵌入式环境中，此时 const 泛型参数的第三种形式 const 表达式 就非常适合."></a>3.🌟🌟🌟 有时我们希望能限制一个变量占用内存的大小，例如在嵌入式环境中，此时 const 泛型参数的第三种形式 const 表达式 就非常适合.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(incomplete_features)]</span><br><span class="hljs-meta">#![feature(generic_const_exprs)]</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">check_size</span>&lt;T&gt;(val: T)<br><span class="hljs-keyword">where</span><br>    Assert&lt;&#123; core::mem::size_of::&lt;T&gt;() &lt; <span class="hljs-number">768</span> &#125;&gt;: IsTrue,<br>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">// 修复 main 函数中的错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-number">0u8</span>; <span class="hljs-number">767</span>]);<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-number">0i32</span>; <span class="hljs-number">191</span>]);<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-string">&quot;hello你好&quot;</span>; __]); <span class="hljs-comment">// size of &amp;str ?</span><br>    <span class="hljs-title function_ invoke__">check_size</span>([(); __].<span class="hljs-title function_ invoke__">map</span>(|_| <span class="hljs-string">&quot;hello你好&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));  <span class="hljs-comment">// size of String?</span><br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-string">&#x27;中&#x27;</span>; __]); <span class="hljs-comment">// size of char ?</span><br>&#125;<br><br><br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Assert</span>&lt;<span class="hljs-keyword">const</span> CHECK: <span class="hljs-type">bool</span>&gt; &#123;&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">trait</span> <span class="hljs-title class_">IsTrue</span> &#123;&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">IsTrue</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Assert</span>&lt;<span class="hljs-literal">true</span>&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![allow(incomplete_features)]</span><br><span class="hljs-meta">#![feature(generic_const_exprs)]</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">check_size</span>&lt;T&gt;(val: T)<br><span class="hljs-keyword">where</span><br>    Assert&lt;&#123; core::mem::size_of::&lt;T&gt;() &lt; <span class="hljs-number">768</span> &#125;&gt;: IsTrue,<br>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">// 修复 main 函数中的错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-number">0u8</span>; <span class="hljs-number">767</span>]);<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-number">0i32</span>; <span class="hljs-number">191</span>]);<br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-string">&quot;hello你好&quot;</span>; <span class="hljs-number">47</span>]); <span class="hljs-comment">// size of &amp;str ?</span><br>    <span class="hljs-title function_ invoke__">check_size</span>([(); <span class="hljs-number">31</span>].<span class="hljs-title function_ invoke__">map</span>(|_| <span class="hljs-string">&quot;hello你好&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()));  <span class="hljs-comment">// size of String?</span><br>    <span class="hljs-title function_ invoke__">check_size</span>([<span class="hljs-string">&#x27;中&#x27;</span>; <span class="hljs-number">191</span>]); <span class="hljs-comment">// size of char ?</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前的泛型中，可以抽象为一句话：针对类型实现的泛型，所有的泛型都是为了抽象不同的类型，那有没有针对值的泛型？答案就是 Const 泛型。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>10.1.泛型</title>
    <link href="https://lilinzta.github.io/2023/08/18/10-1-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://lilinzta.github.io/2023/08/18/10-1-%E6%B3%9B%E5%9E%8B/</id>
    <published>2023-08-18T14:40:51.000Z</published>
    <updated>2024-01-17T15:05:42.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>;          <span class="hljs-comment">// 具体的类型 `A`.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span>(A);       <span class="hljs-comment">// 具体的类型 `S`.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SGen</span>&lt;T&gt;(T); <span class="hljs-comment">// 泛型 `SGen`.</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">reg_fn</span>(_s: S) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gen_spec_t</span>(_s: SGen&lt;A&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gen_spec_i32</span>(_s: SGen&lt;<span class="hljs-type">i32</span>&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">generic</span>&lt;T&gt;(_s: SGen&lt;T&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用非泛型函数</span><br>    <span class="hljs-title function_ invoke__">reg_fn</span>(__);          <span class="hljs-comment">// 具体的类型</span><br>    <span class="hljs-title function_ invoke__">gen_spec_t</span>(__);   <span class="hljs-comment">// 隐式地指定类型参数  `A`.</span><br>    <span class="hljs-title function_ invoke__">gen_spec_i32</span>(__); <span class="hljs-comment">// 隐式地指定类型参数`i32`.</span><br><br>    <span class="hljs-comment">// 显式地指定类型参数 `char`</span><br>    generic::&lt;<span class="hljs-type">char</span>&gt;(__);<br><br>    <span class="hljs-comment">// 隐式地指定类型参数 `char`.</span><br>    <span class="hljs-title function_ invoke__">generic</span>(__);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>;          <span class="hljs-comment">// 具体的类型 `A`.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">S</span>(A);       <span class="hljs-comment">// 具体的类型 `S`.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SGen</span>&lt;T&gt;(T); <span class="hljs-comment">// 泛型 `SGen`.</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">reg_fn</span>(_s: S) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gen_spec_t</span>(_s: SGen&lt;A&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gen_spec_i32</span>(_s: SGen&lt;<span class="hljs-type">i32</span>&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">generic</span>&lt;T&gt;(_s: SGen&lt;T&gt;) &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用非泛型函数</span><br>    <span class="hljs-title function_ invoke__">reg_fn</span>(<span class="hljs-title function_ invoke__">S</span>(A));          <span class="hljs-comment">// 具体的类型</span><br>    <span class="hljs-title function_ invoke__">gen_spec_t</span>(<span class="hljs-title function_ invoke__">SGen</span>(A));   <span class="hljs-comment">// 隐式地指定类型参数  `A`.</span><br>    <span class="hljs-title function_ invoke__">gen_spec_i32</span>(<span class="hljs-title function_ invoke__">SGen</span>(<span class="hljs-number">6</span>)); <span class="hljs-comment">// 隐式地指定类型参数`i32`.</span><br><br>    <span class="hljs-comment">// 显式地指定类型参数 `char`</span><br>    generic::&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-title function_ invoke__">SGen</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<br><br>    <span class="hljs-comment">// 隐式地指定类型参数 `char`.</span><br>    <span class="hljs-title function_ invoke__">generic</span>(<span class="hljs-title function_ invoke__">SGen</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现下面的泛型函数 sum</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">2i8</span>, <span class="hljs-number">3i8</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">50</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">2.46</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1.23</span>, <span class="hljs-number">1.23</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现下面的泛型函数 sum</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>&lt;T: std::ops::Add&lt;Output = T&gt;&gt;(x: T, y: T) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    x + y<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">2i8</span>, <span class="hljs-number">3i8</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">50</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">2.46</span>, <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1.23</span>, <span class="hljs-number">1.23</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体和impl"><a href="#结构体和impl" class="headerlink" title="结构体和impl"></a>结构体和impl</h2><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现一个结构体 Point 让代码工作</span><br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = Point &#123; x: <span class="hljs-number">1.0</span>, y: <span class="hljs-number">4.0</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 实现一个结构体 Point 让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">integer</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">float</span> = Point &#123; x: <span class="hljs-number">1.0</span>, y: <span class="hljs-number">4.0</span> &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改以下结构体让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改这行代码！</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point&#123;x: <span class="hljs-number">5</span>, y : <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改以下结构体让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T, U&gt; &#123;<br>    x: T,<br>    y: U,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改这行代码！</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point&#123;x: <span class="hljs-number">5</span>, y : <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 为 Val 增加泛型参数，不要修改 `main` 中的代码</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Val</span> &#123;<br>    val: <span class="hljs-type">f64</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Val</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">f64</span> &#123;<br>        &amp;<span class="hljs-keyword">self</span>.val<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = Val&#123; val: <span class="hljs-number">3.0</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = Val&#123; val: <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()&#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, x.<span class="hljs-title function_ invoke__">value</span>(), y.<span class="hljs-title function_ invoke__">value</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 为 Val 增加泛型参数，不要修改 `main` 中的代码</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Val</span>&lt;T&gt; &#123;<br>    val: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Val&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.val<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = Val&#123; val: <span class="hljs-number">3.0</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = Val&#123; val: <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()&#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, x.<span class="hljs-title function_ invoke__">value</span>(), y.<span class="hljs-title function_ invoke__">value</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="6-🌟🌟🌟"><a href="#6-🌟🌟🌟" class="headerlink" title="6.🌟🌟🌟"></a>6.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T, U&gt; &#123;<br>    x: T,<br>    y: U,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;<br>    <span class="hljs-comment">// 实现 mixup，不要修改其它代码！</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mixup</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span> = Point &#123; x: <span class="hljs-string">&quot;Hello&quot;</span>, y: <span class="hljs-string">&#x27;中&#x27;</span>&#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p3</span> = p1.<span class="hljs-title function_ invoke__">mixup</span>(p2);<br><br>    <span class="hljs-built_in">assert_eq!</span>(p3.x, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p3.y, <span class="hljs-string">&#x27;中&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T, U&gt; &#123;<br>    x: T,<br>    y: U,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;<br>    <span class="hljs-comment">// 实现 mixup，不要修改其它代码！</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">mixup</span>&lt;V, W&gt;(<span class="hljs-keyword">self</span>, other: Point&lt;V, W&gt;) <span class="hljs-punctuation">-&gt;</span> Point&lt;T, W&gt; &#123;<br>        Point &#123;<br>            x: <span class="hljs-keyword">self</span>.x,<br>            y: other.y<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p1</span> = Point &#123; x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p2</span> = Point &#123; x: <span class="hljs-string">&quot;Hello&quot;</span>, y: <span class="hljs-string">&#x27;中&#x27;</span>&#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p3</span> = p1.<span class="hljs-title function_ invoke__">mixup</span>(p2);<br><br>    <span class="hljs-built_in">assert_eq!</span>(p3.x, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p3.y, <span class="hljs-string">&#x27;中&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-🌟🌟"><a href="#7-🌟🌟" class="headerlink" title="7.🌟🌟"></a>7.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span>&lt;<span class="hljs-type">f32</span>&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">distance_from_origin</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f32</span> &#123;<br>        (<span class="hljs-keyword">self</span>.x.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>) + <span class="hljs-keyword">self</span>.y.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>)).<span class="hljs-title function_ invoke__">sqrt</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point&#123;x: <span class="hljs-number">5</span>, y: <span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,p.<span class="hljs-title function_ invoke__">distance_from_origin</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&lt;T&gt; &#123;<br>    x: T,<br>    y: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span>&lt;<span class="hljs-type">f32</span>&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">distance_from_origin</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f32</span> &#123;<br>        (<span class="hljs-keyword">self</span>.x.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>) + <span class="hljs-keyword">self</span>.y.<span class="hljs-title function_ invoke__">powi</span>(<span class="hljs-number">2</span>)).<span class="hljs-title function_ invoke__">sqrt</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point&#123;x: <span class="hljs-number">5.0_f32</span>, y: <span class="hljs-number">10.0_f32</span>&#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,p.<span class="hljs-title function_ invoke__">distance_from_origin</span>())<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;1-🌟🌟🌟&quot;&gt;&lt;a href=&quot;#1-🌟🌟🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟🌟&quot;</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>9.方法和关联函数</title>
    <link href="https://lilinzta.github.io/2023/08/17/9-%E6%96%B9%E6%B3%95%E5%92%8C%E5%85%B3%E8%81%94%E5%87%BD%E6%95%B0/"/>
    <id>https://lilinzta.github.io/2023/08/17/9-%E6%96%B9%E6%B3%95%E5%92%8C%E5%85%B3%E8%81%94%E5%87%BD%E6%95%B0/</id>
    <published>2023-08-17T13:58:31.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">f64</span>,<br>    y: <span class="hljs-type">f64</span>,<br>&#125;<br><br><span class="hljs-comment">// `Point` 的关联函数都放在下面的 `impl` 语句块中</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-comment">// 关联函数的使用方法跟构造器非常类似</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">origin</span>() <span class="hljs-punctuation">-&gt;</span> Point &#123;<br>        Point &#123; x: <span class="hljs-number">0.0</span>, y: <span class="hljs-number">0.0</span> &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 另外一个关联函数，有两个参数</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(x: <span class="hljs-type">f64</span>, y: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> Point &#123;<br>        Point &#123; x: x, y: y &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    p1: Point,<br>    p2: Point,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">// 这是一个方法</span><br>    <span class="hljs-comment">// `&amp;self` 是 `self: &amp;Self` 的语法糖</span><br>    <span class="hljs-comment">// `Self` 是当前调用对象的类型，对于本例来说 `Self` = `Rectangle`</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">// 使用点操作符可以访问 `self` 中的结构体字段</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">Point</span> &#123; x: x1, y: y1 &#125; = <span class="hljs-keyword">self</span>.p1;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">Point</span> &#123; x: x2, y: y2 &#125; = <span class="hljs-keyword">self</span>.p2;<br><br><br>        <span class="hljs-comment">// `abs` 是一个 `f64` 类型的方法，会返回调用者的绝对值</span><br>        ((x1 - x2) * (y1 - y2)).<span class="hljs-title function_ invoke__">abs</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">perimeter</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">Point</span> &#123; x: x1, y: y1 &#125; = <span class="hljs-keyword">self</span>.p1;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">Point</span> &#123; x: x2, y: y2 &#125; = <span class="hljs-keyword">self</span>.p2;<br><br>        <span class="hljs-number">2.0</span> * ((x1 - x2).<span class="hljs-title function_ invoke__">abs</span>() + (y1 - y2).<span class="hljs-title function_ invoke__">abs</span>())<br>    &#125;<br><br>    <span class="hljs-comment">// 该方法要求调用者是可变的，`&amp;mut self` 是 `self: &amp;mut Self` 的语法糖</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">translate</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, x: <span class="hljs-type">f64</span>, y: <span class="hljs-type">f64</span>) &#123;<br>        <span class="hljs-keyword">self</span>.p1.x += x;<br>        <span class="hljs-keyword">self</span>.p2.x += x;<br><br>        <span class="hljs-keyword">self</span>.p1.y += y;<br>        <span class="hljs-keyword">self</span>.p2.y += y;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// `Pair` 持有两个分配在堆上的整数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>(<span class="hljs-type">Box</span>&lt;<span class="hljs-type">i32</span>&gt;, <span class="hljs-type">Box</span>&lt;<span class="hljs-type">i32</span>&gt;);<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Pair</span> &#123;<br>    <span class="hljs-comment">// 该方法会拿走调用者的所有权</span><br>    <span class="hljs-comment">// `self` 是 `self: Self` 的语法糖</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">Pair</span>(first, second) = <span class="hljs-keyword">self</span>;<br><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Destroying Pair(&#123;&#125;, &#123;&#125;)&quot;</span>, first, second);<br><br>        <span class="hljs-comment">// `first` 和 `second` 在这里超出作用域并被释放</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rectangle</span> = Rectangle &#123;<br>        <span class="hljs-comment">// 关联函数的调用不是通过点操作符，而是使用 `::`</span><br>        p1: Point::<span class="hljs-title function_ invoke__">origin</span>(),<br>        p2: Point::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>),<br>    &#125;;<br><br>    <span class="hljs-comment">// 方法才是通过点操作符调用</span><br>    <span class="hljs-comment">// 注意，这里的方法需要的是 `&amp;self` 但是我们并没有使用 `(&amp;rectangle).perimeter()` 来调用，原因在于：</span><br>    <span class="hljs-comment">// 编译器会帮我们自动取引用</span><br>    <span class="hljs-comment">//  `rectangle.perimeter()` === `Rectangle::perimeter(&amp;rectangle)`</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Rectangle perimeter: &#123;&#125;&quot;</span>, rectangle.<span class="hljs-title function_ invoke__">perimeter</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Rectangle area: &#123;&#125;&quot;</span>, rectangle.<span class="hljs-title function_ invoke__">area</span>());<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">square</span> = Rectangle &#123;<br>        p1: Point::<span class="hljs-title function_ invoke__">origin</span>(),<br>        p2: Point::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>),<br>    &#125;;<br><br><br>    <span class="hljs-comment">// 错误！`rectangle` 是不可变的，但是这个方法要求一个可变的对象</span><br>    <span class="hljs-comment">//rectangle.translate(1.0, 0.0);</span><br>    <span class="hljs-comment">// TODO ^ 试着反注释此行，看看会发生什么</span><br><br>    <span class="hljs-comment">// 可以！可变对象可以调用可变的方法</span><br>    square.<span class="hljs-title function_ invoke__">translate</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">pair</span> = <span class="hljs-title function_ invoke__">Pair</span>(<span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>), <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">2</span>));<br><br>    pair.<span class="hljs-title function_ invoke__">destroy</span>();<br><br>    <span class="hljs-comment">// Error! 上一个 `destroy` 调用拿走了 `pair` 的所有权</span><br>    <span class="hljs-comment">//pair.destroy();</span><br>    <span class="hljs-comment">// TODO ^ 试着反注释此行</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="1-🌟🌟-方法跟函数类似：都是使用-fn-声明，有参数和返回值。但是与函数不同的是，方法定义在结构体的上下文中-枚举、特征对象也可以定义方法-，而且方法的第一个参数一定是-self-或其变体-self-、-mut-self，self-代表了当前调用的结构体实例。"><a href="#1-🌟🌟-方法跟函数类似：都是使用-fn-声明，有参数和返回值。但是与函数不同的是，方法定义在结构体的上下文中-枚举、特征对象也可以定义方法-，而且方法的第一个参数一定是-self-或其变体-self-、-mut-self，self-代表了当前调用的结构体实例。" class="headerlink" title="1.🌟🌟 方法跟函数类似：都是使用 fn 声明，有参数和返回值。但是与函数不同的是，方法定义在结构体的上下文中(枚举、特征对象也可以定义方法)，而且方法的第一个参数一定是 self 或其变体 &amp;self 、&amp;mut self，self 代表了当前调用的结构体实例。"></a>1.🌟🌟 方法跟函数类似：都是使用 fn 声明，有参数和返回值。但是与函数不同的是，方法定义在结构体的上下文中(枚举、特征对象也可以定义方法)，而且方法的第一个参数一定是 self 或其变体 &amp;self 、&amp;mut self，self 代表了当前调用的结构体实例。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">// 完成 area 方法，返回矩形 Rectangle 的面积</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123; width: <span class="hljs-number">30</span>, height: <span class="hljs-number">50</span> &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(rect1.<span class="hljs-title function_ invoke__">area</span>(), <span class="hljs-number">1500</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">// 完成 area 方法，返回矩形 Rectangle 的面积</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123; width: <span class="hljs-number">30</span>, height: <span class="hljs-number">50</span> &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(rect1.<span class="hljs-title function_ invoke__">area</span>(), <span class="hljs-number">1500</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-self-会拿走当前结构体实例-调用对象-的所有权，而-self-却只会借用一个不可变引用，-mut-self-会借用一个可变引用"><a href="#2-🌟🌟-self-会拿走当前结构体实例-调用对象-的所有权，而-self-却只会借用一个不可变引用，-mut-self-会借用一个可变引用" class="headerlink" title="2.🌟🌟 self 会拿走当前结构体实例(调用对象)的所有权，而 &amp;self 却只会借用一个不可变引用，&amp;mut self 会借用一个可变引用"></a>2.🌟🌟 self 会拿走当前结构体实例(调用对象)的所有权，而 &amp;self 却只会借用一个不可变引用，&amp;mut self 会借用一个可变引用</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 只填空，不要删除任何代码行!</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_state</span>(__)  &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the current state is &#123;&#125;&quot;</span>, __.color);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">light</span> = TrafficLight&#123;<br>        color: <span class="hljs-string">&quot;red&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(),<br>    &#125;;<br>    <span class="hljs-comment">// 不要拿走 `light` 的所有权</span><br>    light.<span class="hljs-title function_ invoke__">show_state</span>();<br>    <span class="hljs-comment">// 否则下面代码会报错</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, light);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 只填空，不要删除任何代码行!</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_state</span>(&amp;<span class="hljs-keyword">self</span>)  &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the current state is &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.color);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">light</span> = TrafficLight&#123;<br>        color: <span class="hljs-string">&quot;red&quot;</span>.<span class="hljs-title function_ invoke__">to_owned</span>(),<br>    &#125;;<br>    <span class="hljs-comment">// 不要拿走 `light` 的所有权</span><br>    light.<span class="hljs-title function_ invoke__">show_state</span>();<br>    <span class="hljs-comment">// 否则下面代码会报错</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, light);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-self-实际上是-self-Self-的缩写或者说语法糖"><a href="#3-🌟🌟-self-实际上是-self-Self-的缩写或者说语法糖" class="headerlink" title="3.🌟🌟 &amp;self 实际上是 self: &amp;Self 的缩写或者说语法糖"></a>3.🌟🌟 &amp;self 实际上是 self: &amp;Self 的缩写或者说语法糖</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-comment">// 使用 `Self` 填空</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_state</span>(__)  &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the current state is &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.color);<br>    &#125;<br><br>    <span class="hljs-comment">// 填空，不要使用 `Self` 或其变体</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">change_state</span>(__) &#123;<br>        <span class="hljs-keyword">self</span>.color = <span class="hljs-string">&quot;green&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-comment">// 使用 `Self` 填空</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_state</span>(<span class="hljs-keyword">self</span>: &amp;<span class="hljs-keyword">Self</span>)  &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the current state is &#123;&#125;&quot;</span>, <span class="hljs-keyword">self</span>.color);<br>    &#125;<br><br>    <span class="hljs-comment">// 填空，不要使用 `Self` 或其变体</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">change_state</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">self</span>.color = <span class="hljs-string">&quot;green&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="Associated-function"><a href="#Associated-function" class="headerlink" title="Associated function"></a>Associated function</h2><h3 id="4-🌟🌟-定义在-impl-语句块中的函数被称为关联函数，因为它们跟当前类型关联在一起。关联函数与方法最大的区别就是它第一个参数不是-self-，原因是它们不需要使用当前的实例，因此关联函数往往可以用于构造函数：初始化一个实例对象。"><a href="#4-🌟🌟-定义在-impl-语句块中的函数被称为关联函数，因为它们跟当前类型关联在一起。关联函数与方法最大的区别就是它第一个参数不是-self-，原因是它们不需要使用当前的实例，因此关联函数往往可以用于构造函数：初始化一个实例对象。" class="headerlink" title="4.🌟🌟 定义在 impl 语句块中的函数被称为关联函数，因为它们跟当前类型关联在一起。关联函数与方法最大的区别就是它第一个参数不是 self ，原因是它们不需要使用当前的实例，因此关联函数往往可以用于构造函数：初始化一个实例对象。"></a>4.🌟🌟 定义在 impl 语句块中的函数被称为关联函数，因为它们跟当前类型关联在一起。关联函数与方法最大的区别就是它第一个参数不是 self ，原因是它们不需要使用当前的实例，因此关联函数往往可以用于构造函数：初始化一个实例对象。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-comment">// 1. 实现下面的关联函数 `new`,</span><br>    <span class="hljs-comment">// 2. 该函数返回一个 TrafficLight 实例，包含 `color` &quot;red&quot;</span><br>    <span class="hljs-comment">// 3. 该函数必须使用 `Self` 作为类型，不能在签名或者函数体中使用 `TrafficLight`</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>()<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_state</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        &amp;<span class="hljs-keyword">self</span>.color<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">light</span> = TrafficLight::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(light.<span class="hljs-title function_ invoke__">get_state</span>(), <span class="hljs-string">&quot;red&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    color: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLight</span> &#123;<br>    <span class="hljs-comment">// 1. 实现下面的关联函数 `new`,</span><br>    <span class="hljs-comment">// 2. 该函数返回一个 TrafficLight 实例，包含 `color` &quot;red&quot;</span><br>    <span class="hljs-comment">// 3. 该函数必须使用 `Self` 作为类型，不能在签名或者函数体中使用 `TrafficLight`</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            color: <span class="hljs-string">&quot;red&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_state</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>        &amp;<span class="hljs-keyword">self</span>.color<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">light</span> = TrafficLight::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(light.<span class="hljs-title function_ invoke__">get_state</span>(), <span class="hljs-string">&quot;red&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多个-impl-语句块"><a href="#多个-impl-语句块" class="headerlink" title="多个 impl 语句块"></a>多个 impl 语句块</h2><h3 id="5-🌟-每一个结构体允许拥有多个-impl-语句块"><a href="#5-🌟-每一个结构体允许拥有多个-impl-语句块" class="headerlink" title="5.🌟 每一个结构体允许拥有多个 impl 语句块"></a>5.🌟 每一个结构体允许拥有多个 impl 语句块</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-comment">// 使用多个 `impl` 语句块重写下面的代码</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">can_hold</span>(&amp;<span class="hljs-keyword">self</span>, other: &amp;Rectangle) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">self</span>.width &gt; other.width &amp;&amp; <span class="hljs-keyword">self</span>.height &gt; other.height<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-comment">// 使用多个 `impl` 语句块重写下面的代码</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">can_hold</span>(&amp;<span class="hljs-keyword">self</span>, other: &amp;Rectangle) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">self</span>.width &gt; other.width &amp;&amp; <span class="hljs-keyword">self</span>.height &gt; other.height<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="Enums"><a href="#Enums" class="headerlink" title="Enums"></a>Enums</h2><h3 id="6-🌟🌟🌟-我们还可以为枚举类型定义方法"><a href="#6-🌟🌟🌟-我们还可以为枚举类型定义方法" class="headerlink" title="6.🌟🌟🌟 我们还可以为枚举类型定义方法"></a>6.🌟🌟🌟 我们还可以为枚举类型定义方法</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">TrafficLightColor</span> &#123;<br>    Red,<br>    Yellow,<br>    Green,<br>&#125;<br><br><span class="hljs-comment">// 为 TrafficLightColor 实现所需的方法</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLightColor</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = TrafficLightColor::Yellow;<br><br>    <span class="hljs-built_in">assert_eq!</span>(c.<span class="hljs-title function_ invoke__">color</span>(), <span class="hljs-string">&quot;yellow&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,c);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">TrafficLightColor</span> &#123;<br>    Red,<br>    Yellow,<br>    Green,<br>&#125;<br><br><span class="hljs-comment">// 为 TrafficLightColor 实现所需的方法</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">TrafficLightColor</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">color</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            TrafficLightColor::Red =&gt; <span class="hljs-string">&quot;red&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            TrafficLightColor::Yellow =&gt; <span class="hljs-string">&quot;yellow&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            TrafficLightColor::Green =&gt; <span class="hljs-string">&quot;green&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = TrafficLightColor::Yellow;<br><br>    <span class="hljs-built_in">assert_eq!</span>(c.<span class="hljs-title function_ invoke__">color</span>(), <span class="hljs-string">&quot;yellow&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>,c);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>8.2.模式</title>
    <link href="https://lilinzta.github.io/2023/08/16/8-2-%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lilinzta.github.io/2023/08/16/8-2-%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-08-16T12:30:09.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟🌟-使用-可以匹配多个值-而使用-可以匹配一个闭区间的数值序列"><a href="#1-🌟🌟-使用-可以匹配多个值-而使用-可以匹配一个闭区间的数值序列" class="headerlink" title="1.🌟🌟 使用 | 可以匹配多个值, 而使用 ..&#x3D; 可以匹配一个闭区间的数值序列"></a>1.🌟🌟 使用 | 可以匹配多个值, 而使用 ..&#x3D; 可以匹配一个闭区间的数值序列</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">match_number</span>(n: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">match</span> n &#123;<br>        <span class="hljs-comment">// 匹配一个单独的值</span><br>        <span class="hljs-number">1</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One!&quot;</span>),<br>        <span class="hljs-comment">// 使用 `|` 填空，不要使用 `..` 或 `..=`</span><br>        __ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 2 -&gt; 5&quot;</span>),<br>        <span class="hljs-comment">// 匹配一个闭区间的数值序列</span><br>        <span class="hljs-number">6</span>..=<span class="hljs-number">10</span> =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 6 -&gt; 10&quot;</span>)<br>        &#125;,<br>        _ =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 11 -&gt; +infinite&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">match_number</span>(n: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">match</span> n &#123;<br>        <span class="hljs-comment">// 匹配一个单独的值</span><br>        <span class="hljs-number">1</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;One!&quot;</span>),<br>        <span class="hljs-comment">// 使用 `|` 填空，不要使用 `..` 或 `..=`</span><br>        <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 2 -&gt; 5&quot;</span>),<br>        <span class="hljs-comment">// 匹配一个闭区间的数值序列</span><br>        <span class="hljs-number">6</span>..=<span class="hljs-number">10</span> =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 6 -&gt; 10&quot;</span>)<br>        &#125;,<br>        _ =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match 11 -&gt; +infinite&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟🌟-操作符可以让我们将一个与模式相匹配的值绑定到新的变量上"><a href="#2-🌟🌟🌟-操作符可以让我们将一个与模式相匹配的值绑定到新的变量上" class="headerlink" title="2.🌟🌟🌟 @ 操作符可以让我们将一个与模式相匹配的值绑定到新的变量上"></a>2.🌟🌟🌟 @ 操作符可以让我们将一个与模式相匹配的值绑定到新的变量上</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，让 p 匹配第二个分支</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point &#123; x: __, y: __ &#125;;<br><br>    <span class="hljs-keyword">match</span> p &#123;<br>        Point &#123; x, y: <span class="hljs-number">0</span> &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On the x axis at &#123;&#125;&quot;</span>, x),<br>        <span class="hljs-comment">// 第二个分支</span><br>        Point &#123; x: <span class="hljs-number">0</span>..=<span class="hljs-number">5</span>, y: y@ (<span class="hljs-number">10</span> | <span class="hljs-number">20</span> | <span class="hljs-number">30</span>) &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On the y axis at &#123;&#125;&quot;</span>, y),<br>        Point &#123; x, y &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On neither axis: (&#123;&#125;, &#123;&#125;)&quot;</span>, x, y),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    x: <span class="hljs-type">i32</span>,<br>    y: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，让 p 匹配第二个分支</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Point &#123; x: <span class="hljs-number">0</span>, y: <span class="hljs-number">10</span> &#125;;<br><br>    <span class="hljs-keyword">match</span> p &#123;<br>        Point &#123; x, y: <span class="hljs-number">0</span> &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On the x axis at &#123;&#125;&quot;</span>, x),<br>        <span class="hljs-comment">// 第二个分支</span><br>        Point &#123; x: <span class="hljs-number">0</span>..=<span class="hljs-number">5</span>, y: y@ (<span class="hljs-number">10</span> | <span class="hljs-number">20</span> | <span class="hljs-number">30</span>) &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On the y axis at &#123;&#125;&quot;</span>, y),<br>        Point &#123; x, y &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;On neither axis: (&#123;&#125;, &#123;&#125;)&quot;</span>, x, y),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟"><a href="#3-🌟🌟🌟" class="headerlink" title="3.🌟🌟🌟"></a>3.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Hello &#123; id: <span class="hljs-type">i32</span> &#125;,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg</span> = Message::Hello &#123; id: <span class="hljs-number">5</span> &#125;;<br><br>    <span class="hljs-keyword">match</span> msg &#123;<br>        Message::Hello &#123;<br>            id:  <span class="hljs-number">3</span>..=<span class="hljs-number">7</span>,<br>        &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;id 值的范围在 [3, 7] 之间: &#123;&#125;&quot;</span>, id),<br>        Message::Hello &#123; id: newid@<span class="hljs-number">10</span> | <span class="hljs-number">11</span> | <span class="hljs-number">12</span> &#125; =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;id 值的范围在 [10, 12] 之间: &#123;&#125;&quot;</span>, newid)<br>        &#125;<br>        Message::Hello &#123; id &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Found some other id: &#123;&#125;&quot;</span>, id),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Hello &#123; id: <span class="hljs-type">i32</span> &#125;,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg</span> = Message::Hello &#123; id: <span class="hljs-number">5</span> &#125;;<br><br>    <span class="hljs-keyword">match</span> msg &#123;<br>        Message::Hello &#123;<br>            id: id@<span class="hljs-number">3</span>..=<span class="hljs-number">7</span>,<br>        &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;id 值的范围在 [3, 7] 之间: &#123;&#125;&quot;</span>, id),<br>        Message::Hello &#123; id: newid@(<span class="hljs-number">10</span> | <span class="hljs-number">11</span> | <span class="hljs-number">12</span>) &#125; =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;id 值的范围在 [10, 12] 之间: &#123;&#125;&quot;</span>, newid)<br>        &#125;<br>        Message::Hello &#123; id &#125; =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Found some other id: &#123;&#125;&quot;</span>, id),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟-匹配守卫（match-guard）是一个位于-match-分支模式之后的额外-if-条件，它能为分支模式提供更进一步的匹配条件。"><a href="#4-🌟🌟-匹配守卫（match-guard）是一个位于-match-分支模式之后的额外-if-条件，它能为分支模式提供更进一步的匹配条件。" class="headerlink" title="4.🌟🌟 匹配守卫（match guard）是一个位于 match 分支模式之后的额外 if 条件，它能为分支模式提供更进一步的匹配条件。"></a>4.🌟🌟 匹配守卫（match guard）是一个位于 match 分支模式之后的额外 if 条件，它能为分支模式提供更进一步的匹配条件。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空让代码工作，必须使用 `split`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">split</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">match</span> num &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(x) __ =&gt; <span class="hljs-built_in">assert!</span>(x &lt; split),<br>        <span class="hljs-title function_ invoke__">Some</span>(x) =&gt; <span class="hljs-built_in">assert!</span>(x &gt;= split),<br>        <span class="hljs-literal">None</span> =&gt; (),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空让代码工作，必须使用 `split`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">split</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">match</span> num &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(x) <span class="hljs-keyword">if</span> x &lt; split =&gt; <span class="hljs-built_in">assert!</span>(x &lt; split),<br>        <span class="hljs-title function_ invoke__">Some</span>(x) =&gt; <span class="hljs-built_in">assert!</span>(x &gt;= split),<br>        <span class="hljs-literal">None</span> =&gt; (),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟🌟-使用-忽略一部分值"><a href="#5-🌟🌟🌟-使用-忽略一部分值" class="headerlink" title="5.🌟🌟🌟 使用 .. 忽略一部分值"></a>5.🌟🌟🌟 使用 .. 忽略一部分值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">numbers</span> = (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">2048</span>);<br><br>    <span class="hljs-keyword">match</span> numbers &#123;<br>        __ =&gt; &#123;<br>           <span class="hljs-built_in">assert_eq!</span>(first, <span class="hljs-number">2</span>);<br>           <span class="hljs-built_in">assert_eq!</span>(last, <span class="hljs-number">2048</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">numbers</span> = (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">2048</span>);<br><br>    <span class="hljs-keyword">match</span> numbers &#123;<br>        (first, .., last) =&gt; &#123;<br>           <span class="hljs-built_in">assert_eq!</span>(first, <span class="hljs-number">2</span>);<br>           <span class="hljs-built_in">assert_eq!</span>(last, <span class="hljs-number">2048</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-使用模式-mut-V-去匹配一个可变引用时，你需要格外小心，因为匹配出来的-V-是一个值，而不是可变引用"><a href="#6-🌟🌟-使用模式-mut-V-去匹配一个可变引用时，你需要格外小心，因为匹配出来的-V-是一个值，而不是可变引用" class="headerlink" title="6.🌟🌟 使用模式 &amp;mut V 去匹配一个可变引用时，你需要格外小心，因为匹配出来的 V 是一个值，而不是可变引用"></a>6.🌟🌟 使用模式 &amp;mut V 去匹配一个可变引用时，你需要格外小心，因为匹配出来的 V 是一个值，而不是可变引用</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，尽量少地修改代码</span><br><span class="hljs-comment">// 不要移除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r</span> = &amp;<span class="hljs-keyword">mut</span> v;<br><br>    <span class="hljs-keyword">match</span> r &#123;<br>       &amp;<span class="hljs-keyword">mut</span> value =&gt; value.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot; world!&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，尽量少地修改代码</span><br><span class="hljs-comment">// 不要移除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r</span> = &amp;<span class="hljs-keyword">mut</span> v;<br><br>    <span class="hljs-keyword">match</span> r &#123;<br>       value =&gt; value.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot; world!&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟🌟-使用-可以匹配多个值-而使用-可以匹配一个闭区间的数值序列&quot;&gt;&lt;a href=&quot;#1-🌟🌟-使用-可以匹配多个值-而使用-可以匹配一个闭区间的数值序列&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟 使用 | 可以匹配多个值,</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Desktop Cube</title>
    <link href="https://lilinzta.github.io/2023/08/16/Desktop-Cube/"/>
    <id>https://lilinzta.github.io/2023/08/16/Desktop-Cube/</id>
    <published>2023-08-16T01:00:45.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟桌面切换特效"><a href="#虚拟桌面切换特效" class="headerlink" title="虚拟桌面切换特效"></a>虚拟桌面切换特效</h1><span id="more"></span><p><a href="https://github.com/zzag/kwin-effects-cube">KDE</a><br><a href="https://github.com/Schneegans/Desktop-Cube">GNOME</a></p><p>好像GNOME的可玩性更高一点(仅指这个扩展)，改天试试Debian+GNOME。</p><h3 id="Install-for-KDE-and-…"><a href="#Install-for-KDE-and-…" class="headerlink" title="Install for KDE and …"></a>Install for KDE and …</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S kwin-effects-cube<br></code></pre></td></tr></table></figure><p>安装完后依次点击 <code>工作区行为 -&gt; 桌面特效 -&gt; Cube</code> 进行设置</p><h3 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h3><video id="video" width="100%" height="100%" controls="" preload="none" poster="/res/post/Desktop-Cube/Desktop-Cube.jpg">      <source id="show" src="/res/post/Desktop-Cube/Desktop-Cube.mp4" type="video/mp4"></videos>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;虚拟桌面切换特效&quot;&gt;&lt;a href=&quot;#虚拟桌面切换特效&quot; class=&quot;headerlink&quot; title=&quot;虚拟桌面切换特效&quot;&gt;&lt;/a&gt;虚拟桌面切换特效&lt;/h1&gt;</summary>
    
    
    
    
    <category term="KDE" scheme="https://lilinzta.github.io/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>Neovim Switcher</title>
    <link href="https://lilinzta.github.io/2023/08/15/Neovim-Switcher/"/>
    <id>https://lilinzta.github.io/2023/08/15/Neovim-Switcher/</id>
    <published>2023-08-15T05:36:46.000Z</published>
    <updated>2024-01-20T12:10:06.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在多种Neovime配置之间无缝切换"><a href="#在多种Neovime配置之间无缝切换" class="headerlink" title="在多种Neovime配置之间无缝切换"></a>在多种Neovime配置之间无缝切换</h1><span id="more"></span><blockquote><p><a href="https://www.youtube.com/watch?v=LkHjJlSgKZY">视频介绍在这里</a></p></blockquote><blockquote><p><a href="https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b">不喜欢看视频?</a></p></blockquote><p>zsh用户在.zshrc加入以下配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">alias</span> nvim-lazy=<span class="hljs-string">&quot;NVIM_APPNAME=LazyVim nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-kick=<span class="hljs-string">&quot;NVIM_APPNAME=kickstart nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-chad=<span class="hljs-string">&quot;NVIM_APPNAME=NvChad nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-astro=<span class="hljs-string">&quot;NVIM_APPNAME=AstroNvim nvim&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">nvims</span></span>() &#123;<br>  items=(<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-string">&quot;kickstart&quot;</span> <span class="hljs-string">&quot;LazyVim&quot;</span> <span class="hljs-string">&quot;NvChad&quot;</span> <span class="hljs-string">&quot;AstroNvim&quot;</span>)<br>  config=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;items[@]&#125;</span>&quot;</span> | fzf --prompt=<span class="hljs-string">&quot; Neovim Config ❯ &quot;</span> --height=~50% --layout=reverse --border --exit-0)<br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-variable">$config</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nothing selected&quot;</span><br>    <span class="hljs-built_in">return</span> 0<br>  <span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$config</span> == <span class="hljs-string">&quot;default&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    config=<span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  NVIM_APPNAME=<span class="hljs-variable">$config</span> nvim <span class="hljs-variable">$@</span><br>&#125;<br><br><span class="hljs-built_in">bindkey</span> -s ^a <span class="hljs-string">&quot;nvims\n&quot;</span><br></code></pre></td></tr></table></figure><p>使用git来管理似乎会很有意思，可惜我git太烂，改天再逝。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;在多种Neovime配置之间无缝切换&quot;&gt;&lt;a href=&quot;#在多种Neovime配置之间无缝切换&quot; class=&quot;headerlink&quot; title=&quot;在多种Neovime配置之间无缝切换&quot;&gt;&lt;/a&gt;在多种Neovime配置之间无缝切换&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Neovim" scheme="https://lilinzta.github.io/tags/Neovim/"/>
    
  </entry>
  
  <entry>
    <title>8.1.match,matches! 和 if let</title>
    <link href="https://lilinzta.github.io/2023/08/14/8-1-match-matches-%E5%92%8C-if-let/"/>
    <id>https://lilinzta.github.io/2023/08/14/8-1-match-matches-%E5%92%8C-if-let/</id>
    <published>2023-08-14T13:44:14.000Z</published>
    <updated>2024-01-20T11:37:02.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>    East,<br>    West,<br>    North,<br>    South,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">dire</span> = Direction::South;<br>    <span class="hljs-keyword">match</span> dire &#123;<br>        Direction::East =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;East&quot;</span>),<br>        __  =&gt; &#123; <span class="hljs-comment">// 在这里匹配 South 或 North</span><br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;South or North&quot;</span>);<br>        &#125;,<br>        _ =&gt; <span class="hljs-built_in">println!</span>(__),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>    East,<br>    West,<br>    North,<br>    South,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">dire</span> = Direction::South;<br>    <span class="hljs-keyword">match</span> dire &#123;<br>        Direction::East =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;East&quot;</span>),<br>        Direction::South | Direction::North  =&gt; &#123; <span class="hljs-comment">// 在这里匹配 South 或 North</span><br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;South or North&quot;</span>);<br>        &#125;,<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;West&quot;</span>),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-match-是一个表达式，因此可以用在赋值语句中"><a href="#2-🌟🌟-match-是一个表达式，因此可以用在赋值语句中" class="headerlink" title="2.🌟🌟 match 是一个表达式，因此可以用在赋值语句中"></a>2.🌟🌟 match 是一个表达式，因此可以用在赋值语句中</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">boolean</span> = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 使用 match 表达式填空，并满足以下条件</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// boolean = true =&gt; binary = 1</span><br>    <span class="hljs-comment">// boolean = false =&gt; binary = 0</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">binary</span> = __;<br><br>    <span class="hljs-built_in">assert_eq!</span>(binary, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">boolean</span> = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 使用 match 表达式填空，并满足以下条件</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// boolean = true =&gt; binary = 1</span><br>    <span class="hljs-comment">// boolean = false =&gt; binary = 0</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">binary</span> = <span class="hljs-keyword">match</span> boolean &#123;<br>        <span class="hljs-literal">true</span> =&gt; <span class="hljs-number">1</span>,<br>        <span class="hljs-literal">false</span> =&gt; <span class="hljs-number">0</span><br>    &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(binary, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-使用-match-匹配出枚举成员持有的值"><a href="#3-🌟🌟-使用-match-匹配出枚举成员持有的值" class="headerlink" title="3.🌟🌟 使用 match 匹配出枚举成员持有的值"></a>3.🌟🌟 使用 match 匹配出枚举成员持有的值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msgs</span> = [<br>        Message::Quit,<br>        Message::Move&#123;x:<span class="hljs-number">1</span>, y:<span class="hljs-number">3</span>&#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">msg</span> <span class="hljs-keyword">in</span> msgs &#123;<br>        <span class="hljs-title function_ invoke__">show_message</span>(msg)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_message</span>(msg: Message) &#123;<br>    <span class="hljs-keyword">match</span> msg &#123;<br>        __ =&gt; &#123; <span class="hljs-comment">// 这里匹配 Message::Move</span><br>            <span class="hljs-built_in">assert_eq!</span>(a, <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">assert_eq!</span>(b, <span class="hljs-number">3</span>);<br>        &#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(_, g, b) =&gt; &#123;<br>            <span class="hljs-built_in">assert_eq!</span>(g, __);<br>            <span class="hljs-built_in">assert_eq!</span>(b, __);<br>        &#125;<br>        __ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;no data in these variants&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msgs</span> = [<br>        Message::Quit,<br>        Message::Move&#123;x:<span class="hljs-number">1</span>, y:<span class="hljs-number">3</span>&#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">msg</span> <span class="hljs-keyword">in</span> msgs &#123;<br>        <span class="hljs-title function_ invoke__">show_message</span>(msg)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_message</span>(msg: Message) &#123;<br>    <span class="hljs-keyword">match</span> msg &#123;<br>        Message::Move&#123;x: a, y: b&#125; =&gt; &#123; <span class="hljs-comment">// 这里匹配 Message::Move</span><br>            <span class="hljs-built_in">assert_eq!</span>(a, <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">assert_eq!</span>(b, <span class="hljs-number">3</span>);<br>        &#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(_, g, b) =&gt; &#123;<br>            <span class="hljs-built_in">assert_eq!</span>(g, <span class="hljs-number">255</span>);<br>            <span class="hljs-built_in">assert_eq!</span>(b, <span class="hljs-number">0</span>);<br>        &#125;<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;no data in these variants&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="matches"><a href="#matches" class="headerlink" title="matches!"></a>matches!</h2><p>matches! 看起来像 match, 但是它可以做一些特别的事情</p><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">alphabets</span> = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span> , <span class="hljs-string">&#x27;Y&#x27;</span>];<br><br>    <span class="hljs-comment">// 使用 `matches` 填空</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ab</span> <span class="hljs-keyword">in</span> alphabets &#123;<br>        <span class="hljs-built_in">assert!</span>(__)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">alphabets</span> = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span> , <span class="hljs-string">&#x27;Y&#x27;</span>];<br><br>    <span class="hljs-comment">// 使用 `matches` 填空</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">ab</span> <span class="hljs-keyword">in</span> alphabets &#123;<br>        <span class="hljs-built_in">assert!</span>(matches!(ab, <span class="hljs-string">&#x27;a&#x27;</span>..=<span class="hljs-string">&#x27;z&#x27;</span> | <span class="hljs-string">&#x27;A&#x27;</span>..=<span class="hljs-string">&#x27;Z&#x27;</span> | <span class="hljs-string">&#x27;0&#x27;</span>..=<span class="hljs-string">&#x27;9&#x27;</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyEnum</span> &#123;<br>    Foo,<br>    Bar<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[MyEnum::Foo,MyEnum::Bar,MyEnum::Foo];<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">e</span> <span class="hljs-keyword">in</span> v &#123;<br>        <span class="hljs-keyword">if</span> e == MyEnum::Foo &#123; <span class="hljs-comment">// 修复错误，只能修改本行代码</span><br>            count += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(count, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MyEnum</span> &#123;<br>    Foo,<br>    Bar<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[MyEnum::Foo,MyEnum::Bar,MyEnum::Foo];<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">e</span> <span class="hljs-keyword">in</span> v &#123;<br>        <span class="hljs-keyword">if</span> matches!(e, MyEnum::Foo) &#123; <span class="hljs-comment">// 修复错误，只能修改本行代码</span><br>            count += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(count, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a>if let</h2><p>在有些时候, 使用 match 匹配枚举有些太重了，此时 if let 就非常适合.</p><h3 id="6-🌟"><a href="#6-🌟" class="headerlink" title="6.🌟"></a>6.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">o</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">7</span>);<br><br>    <span class="hljs-comment">// 移除整个 `match` 语句块，使用 `if let` 替代</span><br>    <span class="hljs-keyword">match</span> o &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;This is a really long string and `&#123;:?&#125;`&quot;</span>, i);<br>        &#125;<br>        _ =&gt; &#123;&#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">o</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">7</span>);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(i) = o &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;This is a really long string and `&#123;:?&#125;`&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-🌟🌟"><a href="#7-🌟🌟" class="headerlink" title="7.🌟🌟"></a>7.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_ invoke__">Bar</span>(<span class="hljs-type">u8</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Foo::<span class="hljs-title function_ invoke__">Bar</span>(<span class="hljs-number">1</span>);<br><br>    __ &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;foobar 持有的值是: &#123;&#125;&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_ invoke__">Bar</span>(<span class="hljs-type">u8</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Foo::<span class="hljs-title function_ invoke__">Bar</span>(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Foo</span>::<span class="hljs-title function_ invoke__">Bar</span>(i) = a &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;foobar 持有的值是: &#123;&#125;&quot;</span>, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟"><a href="#8-🌟🌟" class="headerlink" title="8.🌟🌟"></a>8.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Foo</span> &#123;<br>    Bar,<br>    Baz,<br>    <span class="hljs-title function_ invoke__">Qux</span>(<span class="hljs-type">u32</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Foo::<span class="hljs-title function_ invoke__">Qux</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-comment">// 移除以下代码，使用 `match` 代替</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Foo</span>::Bar = a &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match foo::bar&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Foo</span>::Baz = a &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match foo::baz&quot;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match others&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Foo</span> &#123;<br>    Bar,<br>    Baz,<br>    <span class="hljs-title function_ invoke__">Qux</span>(<span class="hljs-type">u32</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = Foo::<span class="hljs-title function_ invoke__">Qux</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">match</span> a &#123;<br>        Foo::Bar =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match foo::bar&quot;</span>),<br>        Foo::Baz =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match foo::baz&quot;</span>),<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;match others&quot;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量遮蔽-Shadowing"><a href="#变量遮蔽-Shadowing" class="headerlink" title="变量遮蔽( Shadowing )"></a>变量遮蔽( Shadowing )</h2><h3 id="9-🌟🌟"><a href="#9-🌟🌟" class="headerlink" title="9.🌟🌟"></a>9.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 就地修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(age) = age &#123; <span class="hljs-comment">// 创建一个新的变量，该变量与之前的 `age` 变量同名</span><br>       <span class="hljs-built_in">assert_eq!</span>(age, <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">30</span>));<br>    &#125; <span class="hljs-comment">// 新的 `age` 变量在这里超出作用域</span><br><br>    <span class="hljs-keyword">match</span> age &#123;<br>        <span class="hljs-comment">// `match` 也能实现变量遮蔽</span><br>        <span class="hljs-title function_ invoke__">Some</span>(age) =&gt;  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;age 是一个新的变量，它的值是 &#123;&#125;&quot;</span>,age),<br>        _ =&gt; ()<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 就地修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(age) = age &#123; <span class="hljs-comment">// 创建一个新的变量，该变量与之前的 `age` 变量同名</span><br>       <span class="hljs-built_in">assert_eq!</span>(age, <span class="hljs-number">30</span>);<br>    &#125; <span class="hljs-comment">// 新的 `age` 变量在这里超出作用域</span><br><br>    <span class="hljs-keyword">match</span> age &#123;<br>        <span class="hljs-comment">// `match` 也能实现变量遮蔽</span><br>        <span class="hljs-title function_ invoke__">Some</span>(age) =&gt;  <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;age 是一个新的变量，它的值是 &#123;&#125;&quot;</span>,age),<br>        _ =&gt; ()<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;match&quot;&gt;&lt;a href=&quot;#match&quot; class=&quot;headerlink&quot; title=&quot;match&quot;&gt;&lt;/a&gt;match&lt;/h2&gt;&lt;h3 id=&quot;1-🌟🌟&quot;&gt;&lt;a href=&quot;#1-🌟🌟&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>7.流程控制</title>
    <link href="https://lilinzta.github.io/2023/08/13/7-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://lilinzta.github.io/2023/08/13/7-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
    <published>2023-08-13T10:23:46.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if-else"><a href="#if-else" class="headerlink" title="if&#x2F;else"></a>if&#x2F;else</h2><h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is negative&quot;</span>, n);<br>    &#125; __ n &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is positive&quot;</span>, n);<br>    &#125; __ &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is zero&quot;</span>, n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is negative&quot;</span>, n);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is positive&quot;</span>, n);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; is zero&quot;</span>, n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-if-else-可以用作表达式来进行赋值"><a href="#2-🌟🌟-if-else-可以用作表达式来进行赋值" class="headerlink" title="2.🌟🌟 if&#x2F;else 可以用作表达式来进行赋值"></a>2.🌟🌟 if&#x2F;else 可以用作表达式来进行赋值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">big_n</span> =<br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span> &amp;&amp; n &gt; -<span class="hljs-number">10</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot; 数字太小，先增加 10 倍再说&quot;</span>);<br><br>            <span class="hljs-number">10</span> * n<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;数字太大，我们得让它减半&quot;</span>);<br><br>            n / <span class="hljs-number">2.0</span> ;<br>        &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>, n, big_n);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">big_n</span> =<br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span> &amp;&amp; n &gt; -<span class="hljs-number">10</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot; 数字太小，先增加 10 倍再说&quot;</span>);<br><br>            <span class="hljs-number">10</span> * n<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;数字太大，我们得让它减半&quot;</span>);<br><br>            n / <span class="hljs-number">2</span><br>        &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>, n, big_n);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="3-🌟-for-in-可以用于迭代一个迭代器，例如序列-a-b"><a href="#3-🌟-for-in-可以用于迭代一个迭代器，例如序列-a-b" class="headerlink" title="3.🌟 for in 可以用于迭代一个迭代器，例如序列 a..b."></a>3.🌟 for in 可以用于迭代一个迭代器，例如序列 a..b.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">n</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..=<span class="hljs-number">100</span> &#123; <span class="hljs-comment">// 修改此行，让代码工作</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">100</span> &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;NEVER LET THIS RUN&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">n</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">100</span> &#123; <span class="hljs-comment">// 修改此行，让代码工作</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">100</span> &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;NEVER LET THIS RUN&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要新增或删除代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">names</span> = [<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;liming&quot;</span>),<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hanmeimei&quot;</span>)];<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">name</span> <span class="hljs-keyword">in</span> names &#123;<br>        <span class="hljs-comment">// do something with name...</span><br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, names);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">numbers</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-comment">// numbers中的元素实现了 Copy，因此无需转移所有权</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">n</span> <span class="hljs-keyword">in</span> numbers &#123;<br>        <span class="hljs-comment">// do something with name...</span><br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, numbers);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要新增或删除代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">names</span> = [<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;liming&quot;</span>),<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hanmeimei&quot;</span>)];<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">name</span> <span class="hljs-keyword">in</span> &amp;names &#123;<br>        <span class="hljs-comment">// do something with name...</span><br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, names);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">numbers</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-comment">// numbers中的元素实现了 Copy，因此无需转移所有权</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">n</span> <span class="hljs-keyword">in</span> numbers &#123;<br>        <span class="hljs-comment">// do something with name...</span><br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, numbers);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟"><a href="#5-🌟" class="headerlink" title="5.🌟"></a>5.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">// 通过索引和值的方式迭代数组 `a`</span><br>    <span class="hljs-keyword">for</span> (i,v) <span class="hljs-keyword">in</span> a.__ &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;第&#123;&#125;个元素是&#123;&#125;&quot;</span>,i+<span class="hljs-number">1</span>,v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><br>    <span class="hljs-comment">// 通过索引和值的方式迭代数组 `a`</span><br>    <span class="hljs-keyword">for</span> (i,v) <span class="hljs-keyword">in</span> a.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;第&#123;&#125;个元素是&#123;&#125;&quot;</span>,i+<span class="hljs-number">1</span>,v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><h3 id="6-🌟🌟-当条件为-true-时，while-将一直循环"><a href="#6-🌟🌟-当条件为-true-时，while-将一直循环" class="headerlink" title="6.🌟🌟 当条件为 true 时，while 将一直循环"></a>6.🌟🌟 当条件为 true 时，while 将一直循环</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让最后一行的  println! 工作 !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 一个计数值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 当条件为真时，不停的循环</span><br>    <span class="hljs-keyword">while</span> n __ <span class="hljs-number">10</span> &#123;<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">15</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;fizzbuzz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;fizz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;buzz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n);<br>        &#125;<br><br><br>        __;<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n 的值是 &#123;&#125;, 循环结束&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让最后一行的  println! 工作 !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 一个计数值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 当条件为真时，不停的循环</span><br>    <span class="hljs-keyword">while</span> n &lt; <span class="hljs-number">10</span> &#123;<br>        <span class="hljs-keyword">if</span> n % <span class="hljs-number">15</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;fizzbuzz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;fizz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;buzz&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n);<br>        &#125;<br><br><br>        n += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;n 的值是 &#123;&#125;, 循环结束&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="continue-and-break"><a href="#continue-and-break" class="headerlink" title="continue and break"></a>continue and break</h2><h3 id="7-🌟-使用-break-可以跳出循环"><a href="#7-🌟-使用-break-可以跳出循环" class="headerlink" title="7.🌟 使用 break 可以跳出循环"></a>7.🌟 使用 break 可以跳出循环</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..=<span class="hljs-number">100</span> &#123;<br>       <span class="hljs-keyword">if</span> n == <span class="hljs-number">66</span> &#123;<br>           __<br>       &#125;<br>       n += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, <span class="hljs-number">66</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..=<span class="hljs-number">100</span> &#123;<br>       <span class="hljs-keyword">if</span> n == <span class="hljs-number">66</span> &#123;<br>           <span class="hljs-keyword">break</span><br>       &#125;<br>       n += <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, <span class="hljs-number">66</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟-continue-会结束当次循环并立即开始下一次循环"><a href="#8-🌟🌟-continue-会结束当次循环并立即开始下一次循环" class="headerlink" title="8.🌟🌟 continue 会结束当次循环并立即开始下一次循环"></a>8.🌟🌟 continue 会结束当次循环并立即开始下一次循环</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..=<span class="hljs-number">100</span> &#123;<br>       <span class="hljs-keyword">if</span> n != <span class="hljs-number">66</span> &#123;<br>           n+=<span class="hljs-number">1</span>;<br>           __;<br>       &#125;<br><br>       __<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, <span class="hljs-number">66</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">n</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..=<span class="hljs-number">100</span> &#123;<br>       <span class="hljs-keyword">if</span> n != <span class="hljs-number">66</span> &#123;<br>           n+=<span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">continue</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">break</span><br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(n, <span class="hljs-number">66</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><h3 id="9-🌟🌟-loop-一般都需要配合-break-或-continue-一起使用。"><a href="#9-🌟🌟-loop-一般都需要配合-break-或-continue-一起使用。" class="headerlink" title="9.🌟🌟 loop 一般都需要配合 break 或 continue 一起使用。"></a>9.🌟🌟 loop 一般都需要配合 break 或 continue 一起使用。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0u32</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Let&#x27;s count until infinity!&quot;</span>);<br><br>    <span class="hljs-comment">// 无限循环</span><br>    <span class="hljs-keyword">loop</span> &#123;<br>        count += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;three&quot;</span>);<br><br>            <span class="hljs-comment">// 跳过当此循环的剩余代码</span><br>            __;<br>        &#125;<br><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, count);<br><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;OK, that&#x27;s enough&quot;</span>);<br><br>            __;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(count, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，不要修改其它代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0u32</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Let&#x27;s count until infinity!&quot;</span>);<br><br>    <span class="hljs-comment">// 无限循环</span><br>    <span class="hljs-keyword">loop</span> &#123;<br>        count += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;three&quot;</span>);<br><br>            <span class="hljs-comment">// 跳过当此循环的剩余代码</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, count);<br><br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">5</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;OK, that&#x27;s enough&quot;</span>);<br><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(count, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-🌟🌟-loop-是一个表达式，因此我们可以配合-break-来返回一个值"><a href="#10-🌟🌟-loop-是一个表达式，因此我们可以配合-break-来返回一个值" class="headerlink" title="10.🌟🌟 loop 是一个表达式，因此我们可以配合 break 来返回一个值"></a>10.🌟🌟 loop 是一个表达式，因此我们可以配合 break 来返回一个值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">counter</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-keyword">loop</span> &#123;<br>        counter += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> counter == <span class="hljs-number">10</span> &#123;<br>            __;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">counter</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-keyword">loop</span> &#123;<br>        counter += <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span> counter == <span class="hljs-number">10</span> &#123;<br>            <span class="hljs-keyword">break</span> counter*<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">assert_eq!</span>(result, <span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-🌟🌟🌟-当有多层循环时，你可以使用-continue-或-break-来控制外层的循环。要实现这一点，外部的循环必须拥有一个标签-‘label-然后在-break-或-continue-时指定该标签"><a href="#11-🌟🌟🌟-当有多层循环时，你可以使用-continue-或-break-来控制外层的循环。要实现这一点，外部的循环必须拥有一个标签-‘label-然后在-break-或-continue-时指定该标签" class="headerlink" title="11.🌟🌟🌟 当有多层循环时，你可以使用 continue 或 break 来控制外层的循环。要实现这一点，外部的循环必须拥有一个标签 ‘label, 然后在 break 或 continue 时指定该标签"></a>11.🌟🌟🌟 当有多层循环时，你可以使用 continue 或 break 来控制外层的循环。要实现这一点，外部的循环必须拥有一个标签 ‘label, 然后在 break 或 continue 时指定该标签</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-symbol">&#x27;outer</span>: <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-symbol">&#x27;inner1</span>: <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">20</span> &#123;<br>                <span class="hljs-comment">// 这只会跳出 inner1 循环</span><br>                <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;inner1</span>; <span class="hljs-comment">// 这里使用 `break` 也是一样的</span><br>            &#125;<br>            count += <span class="hljs-number">2</span>;<br>        &#125;<br><br>        count += <span class="hljs-number">5</span>;<br><br>        <span class="hljs-symbol">&#x27;inner2</span>: <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">30</span> &#123;<br>                <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;outer</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">continue</span> <span class="hljs-symbol">&#x27;outer</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert!</span>(count == __)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-symbol">&#x27;outer</span>: <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-symbol">&#x27;inner1</span>: <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">20</span> &#123;<br>                <span class="hljs-comment">// 这只会跳出 inner1 循环</span><br>                <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;inner1</span>; <span class="hljs-comment">// 这里使用 `break` 也是一样的</span><br>            &#125;<br>            count += <span class="hljs-number">2</span>;<br>        &#125;<br><br>        count += <span class="hljs-number">5</span>;<br><br>        <span class="hljs-symbol">&#x27;inner2</span>: <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">30</span> &#123;<br>                <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;outer</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">continue</span> <span class="hljs-symbol">&#x27;outer</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">assert!</span>(count == <span class="hljs-number">30</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;if-else&quot;&gt;&lt;a href=&quot;#if-else&quot; class=&quot;headerlink&quot; title=&quot;if&amp;#x2F;else&quot;&gt;&lt;/a&gt;if&amp;#x2F;else&lt;/h2&gt;&lt;h3 id=&quot;1-🌟&quot;&gt;&lt;a href=&quot;#1-🌟&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.6.枚举</title>
    <link href="https://lilinzta.github.io/2023/08/12/6-6-%E6%9E%9A%E4%B8%BE/"/>
    <id>https://lilinzta.github.io/2023/08/12/6-6-%E6%9E%9A%E4%B8%BE/</id>
    <published>2023-08-12T04:55:31.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟🌟-在创建枚举时，你可以使用显式的整数设定枚举成员的值。"><a href="#1-🌟🌟-在创建枚举时，你可以使用显式的整数设定枚举成员的值。" class="headerlink" title="1.🌟🌟 在创建枚举时，你可以使用显式的整数设定枚举成员的值。"></a>1.🌟🌟 在创建枚举时，你可以使用显式的整数设定枚举成员的值。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number</span> &#123;<br>    Zero,<br>    One,<br>    Two,<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number1</span> &#123;<br>    Zero = <span class="hljs-number">0</span>,<br>    One,<br>    Two,<br>&#125;<br><br><span class="hljs-comment">// C语言风格的枚举定义</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number2</span> &#123;<br>    Zero = <span class="hljs-number">0.0</span>,<br>    One = <span class="hljs-number">1.0</span>,<br>    Two = <span class="hljs-number">2.0</span>,<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 通过 `as` 可以将枚举值强转为整数类型</span><br>    <span class="hljs-built_in">assert_eq!</span>(Number::One, Number1::One);<br>    <span class="hljs-built_in">assert_eq!</span>(Number1::One, Number2::One);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number</span> &#123;<br>    Zero,<br>    One,<br>    Two,<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number1</span> &#123;<br>    Zero = <span class="hljs-number">0</span>,<br>    One,<br>    Two,<br>&#125;<br><br><span class="hljs-comment">// C语言风格的枚举定义</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Number2</span> &#123;<br>    Zero = <span class="hljs-number">0</span>,<br>    One = <span class="hljs-number">1</span>,<br>    Two = <span class="hljs-number">2</span>,<br>&#125;<br><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 通过 `as` 可以将枚举值强转为整数类型</span><br>    <span class="hljs-built_in">assert_eq!</span>(Number::One <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, Number1::One <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(Number1::One <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>, Number2::One <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟-枚举成员可以持有各种类型的值"><a href="#2-🌟-枚举成员可以持有各种类型的值" class="headerlink" title="2.🌟 枚举成员可以持有各种类型的值"></a>2.🌟 枚举成员可以持有各种类型的值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg1</span> = Message::Move&#123;__&#125;; <span class="hljs-comment">// 使用x = 1, y = 2 来初始化</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg2</span> = Message::<span class="hljs-title function_ invoke__">Write</span>(__); <span class="hljs-comment">// 使用 &quot;hello, world!&quot; 来初始化</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg1</span> = Message::Move&#123;x: <span class="hljs-number">1</span>, y: <span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// 使用x = 1, y = 2 来初始化</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg2</span> = Message::<span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world!&quot;</span>)); <span class="hljs-comment">// 使用 &quot;hello, world!&quot; 来初始化</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟-枚举成员中的值可以使用模式匹配来获取"><a href="#3-🌟🌟-枚举成员中的值可以使用模式匹配来获取" class="headerlink" title="3.🌟🌟 枚举成员中的值可以使用模式匹配来获取"></a>3.🌟🌟 枚举成员中的值可以使用模式匹配来获取</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 仅填空并修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg</span> = Message::Move&#123;x: <span class="hljs-number">1</span>, y: <span class="hljs-number">2</span>&#125;;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Message</span>::Move&#123;__&#125; = msg &#123;<br>        <span class="hljs-built_in">assert_eq!</span>(a, b);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;不要让这行代码运行！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 仅填空并修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msg</span> = Message::Move&#123;x: <span class="hljs-number">1</span>, y: <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Message</span>::Move&#123;x: a, y: b&#125; = msg &#123;<br>        <span class="hljs-built_in">assert_eq!</span>(a, b);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;不要让这行代码运行！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟-使用枚举对类型进行同一化"><a href="#4-🌟🌟-使用枚举对类型进行同一化" class="headerlink" title="4.🌟🌟 使用枚举对类型进行同一化"></a>4.🌟🌟 使用枚举对类型进行同一化</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，并修复错误</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msgs</span>: __ = [<br>        Message::Quit,<br>        Message::Move&#123;x:<span class="hljs-number">1</span>, y:<span class="hljs-number">3</span>&#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">msg</span> <span class="hljs-keyword">in</span> msgs &#123;<br>        <span class="hljs-title function_ invoke__">show_message</span>(msg)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_message</span>(msg: Message) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，并修复错误</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Message</span> &#123;<br>    Quit,<br>    Move &#123; x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span> &#125;,<br>    <span class="hljs-title function_ invoke__">Write</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>),<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">msgs</span>: [Message; <span class="hljs-number">3</span>] = [<br>        Message::Quit,<br>        Message::Move&#123;x:<span class="hljs-number">1</span>, y:<span class="hljs-number">3</span>&#125;,<br>        Message::<span class="hljs-title function_ invoke__">ChangeColor</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>    ];<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">msg</span> <span class="hljs-keyword">in</span> msgs &#123;<br>        <span class="hljs-title function_ invoke__">show_message</span>(msg)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show_message</span>(msg: Message) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟-Rust-中没有-null，我们通过-Option-枚举来处理值为空的情况"><a href="#5-🌟🌟-Rust-中没有-null，我们通过-Option-枚举来处理值为空的情况" class="headerlink" title="5.🌟🌟 Rust 中没有 null，我们通过 Option 枚举来处理值为空的情况"></a>5.🌟🌟 Rust 中没有 null，我们通过 Option<T> 枚举来处理值为空的情况</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空让 `println` 输出，同时添加一些代码不要让最后一行的 `panic` 执行到</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">five</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = <span class="hljs-title function_ invoke__">plus_one</span>(five);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">none</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">__</span> = six &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n)<br>    &#125;<br><br>    <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;不要让这行代码运行！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        __ =&gt; <span class="hljs-literal">None</span>,<br>        __ =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空让 `println` 输出，同时添加一些代码不要让最后一行的 `panic` 执行到</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">five</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">six</span> = <span class="hljs-title function_ invoke__">plus_one</span>(five);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_none</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(n) = six &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, n);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;不要让这行代码运行！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟🌟🌟-使用枚举来实现链表"><a href="#6-🌟🌟🌟🌟-使用枚举来实现链表" class="headerlink" title="6.🌟🌟🌟🌟 使用枚举来实现链表."></a>6.🌟🌟🌟🌟 使用枚举来实现链表.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码运行</span><br><span class="hljs-keyword">use</span> crate::List::*;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-comment">// Cons: 链表中包含有值的节点，节点是元组类型，第一个元素是节点的值，第二个元素是指向下一个节点的指针</span><br>    <span class="hljs-title function_ invoke__">Cons</span>(<span class="hljs-type">u32</span>, <span class="hljs-type">Box</span>&lt;List&gt;),<br>    <span class="hljs-comment">// Nil: 链表中的最后一个节点，用于说明链表的结束</span><br>    Nil,<br>&#125;<br><br><span class="hljs-comment">// 为枚举实现一些方法</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-comment">// 创建空的链表</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> List &#123;<br>        <span class="hljs-comment">// 因为没有节点，所以直接返回 Nil 节点</span><br>        <span class="hljs-comment">// 枚举成员 Nil 的类型是 List</span><br>        Nil<br>    &#125;<br><br>    <span class="hljs-comment">// 在老的链表前面新增一个节点，并返回新的链表</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">prepend</span>(<span class="hljs-keyword">self</span>, elem: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> __ &#123;<br>        <span class="hljs-title function_ invoke__">Cons</span>(elem, <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">self</span>))<br>    &#125;<br><br>    <span class="hljs-comment">// 返回链表的长度</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">len</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-comment">// 这里我们不能拿走 tail 的所有权，因此需要获取它的引用</span><br>            <span class="hljs-title function_ invoke__">Cons</span>(_, __ tail) =&gt; <span class="hljs-number">1</span> + tail.<span class="hljs-title function_ invoke__">len</span>(),<br>            <span class="hljs-comment">// 空链表的长度为 0</span><br>            Nil =&gt; <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回链表的字符串表现形式，用于打印输出</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">stringify</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-title function_ invoke__">Cons</span>(head, <span class="hljs-keyword">ref</span> tail) =&gt; &#123;<br>                <span class="hljs-comment">// 递归生成字符串</span><br>                <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, head, tail.__())<br>            &#125;,<br>            Nil =&gt; &#123;<br>                <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Nil&quot;</span>)<br>            &#125;,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 创建一个新的链表(也是空的)</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">list</span> = List::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// 添加一些元素</span><br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">1</span>);<br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">2</span>);<br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印列表的当前状态</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;链表的长度是: &#123;&#125;&quot;</span>, list.<span class="hljs-title function_ invoke__">len</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, list.<span class="hljs-title function_ invoke__">stringify</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码运行</span><br><span class="hljs-keyword">use</span> crate::List::*;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-comment">// Cons: 链表中包含有值的节点，节点是元组类型，第一个元素是节点的值，第二个元素是指向下一个节点的指针</span><br>    <span class="hljs-title function_ invoke__">Cons</span>(<span class="hljs-type">u32</span>, <span class="hljs-type">Box</span>&lt;List&gt;),<br>    <span class="hljs-comment">// Nil: 链表中的最后一个节点，用于说明链表的结束</span><br>    Nil,<br>&#125;<br><br><span class="hljs-comment">// 为枚举实现一些方法</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">List</span> &#123;<br>    <span class="hljs-comment">// 创建空的链表</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> List &#123;<br>        <span class="hljs-comment">// 因为没有节点，所以直接返回 Nil 节点</span><br>        <span class="hljs-comment">// 枚举成员 Nil 的类型是 List</span><br>        Nil<br>    &#125;<br><br>    <span class="hljs-comment">// 在老的链表前面新增一个节点，并返回新的链表</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">prepend</span>(<span class="hljs-keyword">self</span>, elem: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> List &#123;<br>        <span class="hljs-title function_ invoke__">Cons</span>(elem, <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">self</span>))<br>    &#125;<br><br>    <span class="hljs-comment">// 返回链表的长度</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">len</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-comment">// 这里我们不能拿走 tail 的所有权，因此需要获取它的引用</span><br>            <span class="hljs-title function_ invoke__">Cons</span>(_, <span class="hljs-keyword">ref</span> tail) =&gt; <span class="hljs-number">1</span> + tail.<span class="hljs-title function_ invoke__">len</span>(),<br>            <span class="hljs-comment">// 空链表的长度为 0</span><br>            Nil =&gt; <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回链表的字符串表现形式，用于打印输出</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">stringify</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">match</span> *<span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-title function_ invoke__">Cons</span>(head, <span class="hljs-keyword">ref</span> tail) =&gt; &#123;<br>                <span class="hljs-comment">// 递归生成字符串</span><br>                <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, head, tail.<span class="hljs-title function_ invoke__">stringify</span>())<br>            &#125;,<br>            Nil =&gt; &#123;<br>                <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Nil&quot;</span>)<br>            &#125;,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 创建一个新的链表(也是空的)</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">list</span> = List::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// 添加一些元素</span><br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">1</span>);<br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">2</span>);<br>    list = list.<span class="hljs-title function_ invoke__">prepend</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 打印列表的当前状态</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;链表的长度是: &#123;&#125;&quot;</span>, list.<span class="hljs-title function_ invoke__">len</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, list.<span class="hljs-title function_ invoke__">stringify</span>());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟🌟-在创建枚举时，你可以使用显式的整数设定枚举成员的值。&quot;&gt;&lt;a href=&quot;#1-🌟🌟-在创建枚举时，你可以使用显式的整数设定枚举成员的值。&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟 在创建枚举时，你可以使用显式的整数设定</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.5.结构体</title>
    <link href="https://lilinzta.github.io/2023/08/11/6-5-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>https://lilinzta.github.io/2023/08/11/6-5-%E7%BB%93%E6%9E%84%E4%BD%93/</id>
    <published>2023-08-11T13:54:39.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三种类型的结构体"><a href="#三种类型的结构体" class="headerlink" title="三种类型的结构体"></a>三种类型的结构体</h2><h3 id="1-🌟-对于结构体，我们必须为其中的每一个字段都指定具体的值"><a href="#1-🌟-对于结构体，我们必须为其中的每一个字段都指定具体的值" class="headerlink" title="1.🌟 对于结构体，我们必须为其中的每一个字段都指定具体的值"></a>1.🌟 对于结构体，我们必须为其中的每一个字段都指定具体的值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// fix the error</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>    hobby: <span class="hljs-type">String</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        age,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// fix the error</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>    hobby: <span class="hljs-type">String</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        age,<br>        hobby: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;coding&quot;</span>)<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟-单元结构体没有任何字段。"><a href="#2-🌟-单元结构体没有任何字段。" class="headerlink" title="2.🌟 单元结构体没有任何字段。"></a>2.🌟 单元结构体没有任何字段。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Unit</span>;<br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">SomeTrait</span> &#123;<br>    <span class="hljs-comment">// ...定义一些行为</span><br>&#125;<br><br><span class="hljs-comment">// 我们并不关心结构体中有什么数据( 字段 )，但我们关心它的行为。</span><br><span class="hljs-comment">// 因此这里我们使用没有任何字段的单元结构体，然后为它实现一些行为</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">SomeTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Unit</span> &#123;  &#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u</span> = Unit;<br>    <span class="hljs-title function_ invoke__">do_something_with_unit</span>(u);<br>&#125;<br><br><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">do_something_with_unit</span>(u: __) &#123;   &#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Unit</span>;<br><span class="hljs-keyword">trait</span> <span class="hljs-title class_">SomeTrait</span> &#123;<br>    <span class="hljs-comment">// ...定义一些行为</span><br>&#125;<br><br><span class="hljs-comment">// 我们并不关心结构体中有什么数据( 字段 )，但我们关心它的行为。</span><br><span class="hljs-comment">// 因此这里我们使用没有任何字段的单元结构体，然后为它实现一些行为</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">SomeTrait</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Unit</span> &#123;  &#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u</span> = Unit;<br>    <span class="hljs-title function_ invoke__">do_something_with_unit</span>(u);<br>&#125;<br><br><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">do_something_with_unit</span>(u: Unit) &#123;   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟-元组结构体看起来跟元组很像，但是它拥有一个结构体的名称，该名称可以赋予它一定的意义。由于它并不关心内部数据到底是什么名称，因此此时元组结构体就非常适合。"><a href="#3-🌟🌟🌟-元组结构体看起来跟元组很像，但是它拥有一个结构体的名称，该名称可以赋予它一定的意义。由于它并不关心内部数据到底是什么名称，因此此时元组结构体就非常适合。" class="headerlink" title="3.🌟🌟🌟 元组结构体看起来跟元组很像，但是它拥有一个结构体的名称，该名称可以赋予它一定的意义。由于它并不关心内部数据到底是什么名称，因此此时元组结构体就非常适合。"></a>3.🌟🌟🌟 元组结构体看起来跟元组很像，但是它拥有一个结构体的名称，该名称可以赋予它一定的意义。由于它并不关心内部数据到底是什么名称，因此此时元组结构体就非常适合。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Color</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">Point</span>(__, __, __);<br>    <span class="hljs-title function_ invoke__">check_color</span>(v);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">check_color</span>(p: Color) &#123;<br>    <span class="hljs-keyword">let</span> (x, _, _) = p;<br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p.<span class="hljs-number">1</span>, <span class="hljs-number">127</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(__, <span class="hljs-number">255</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Color</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>);<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>);<br>    <span class="hljs-title function_ invoke__">check_color</span>(v);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">check_color</span>(p: Point) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">Point</span>(x, _, _) = p;<br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p.<span class="hljs-number">1</span>, <span class="hljs-number">127</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(p.<span class="hljs-number">2</span>, <span class="hljs-number">255</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟-你可以在实例化一个结构体时将它整体标记为可变的，但是-Rust-不允许我们将结构体的某个字段专门指定为可变的"><a href="#4-🌟-你可以在实例化一个结构体时将它整体标记为可变的，但是-Rust-不允许我们将结构体的某个字段专门指定为可变的" class="headerlink" title="4.🌟 你可以在实例化一个结构体时将它整体标记为可变的，但是 Rust 不允许我们将结构体的某个字段专门指定为可变的."></a>4.🌟 你可以在实例化一个结构体时将它整体标记为可变的，但是 Rust 不允许我们将结构体的某个字段专门指定为可变的.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误，不要增加或移除代码行</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        age,<br>    &#125;;<br><br>    <span class="hljs-comment">// how can you believe sunface is only 18?</span><br>    p.age = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 填空</span><br>    __ = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunfei&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空并修复错误，不要增加或移除代码行</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">age</span> = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">p</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        age,<br>    &#125;;<br><br>    <span class="hljs-comment">// how can you believe sunface is only 18?</span><br>    p.age = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 填空</span><br>    p.name = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunfei&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟-使用结构体字段初始化缩略语法可以减少一些重复代码"><a href="#5-🌟-使用结构体字段初始化缩略语法可以减少一些重复代码" class="headerlink" title="5.🌟 使用结构体字段初始化缩略语法可以减少一些重复代码"></a>5.🌟 使用结构体字段初始化缩略语法可以减少一些重复代码</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">build_person</span>(name: <span class="hljs-type">String</span>, age: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> Person &#123;<br>    Person &#123;<br>        age,<br>        __<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">u8</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">build_person</span>(name: <span class="hljs-type">String</span>, age: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> Person &#123;<br>    Person &#123;<br>        age,<br>        name<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟-你可以使用结构体更新语法基于一个结构体实例来构造另一个"><a href="#6-🌟-你可以使用结构体更新语法基于一个结构体实例来构造另一个" class="headerlink" title="6.🌟 你可以使用结构体更新语法基于一个结构体实例来构造另一个"></a>6.🌟 你可以使用结构体更新语法基于一个结构体实例来构造另一个</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    active: <span class="hljs-type">bool</span>,<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u1</span> = User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u2</span> = <span class="hljs-title function_ invoke__">set_email</span>(u1);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">set_email</span>(u: User) <span class="hljs-punctuation">-&gt;</span> User &#123;<br>    User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;contact@im.dev&quot;</span>),<br>        __<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    active: <span class="hljs-type">bool</span>,<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u1</span> = User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;someone@example.com&quot;</span>),<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;sunface&quot;</span>),<br>        active: <span class="hljs-literal">true</span>,<br>        sign_in_count: <span class="hljs-number">1</span>,<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">u2</span> = <span class="hljs-title function_ invoke__">set_email</span>(u1);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">set_email</span>(u: User) <span class="hljs-punctuation">-&gt;</span> User &#123;<br>    User &#123;<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;contact@im.dev&quot;</span>),<br>        ..u<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="打印结构体"><a href="#打印结构体" class="headerlink" title="打印结构体"></a>打印结构体</h2><h3 id="7-🌟🌟-我们可以使用-derive-Debug-让结构体变成可打印的"><a href="#7-🌟🌟-我们可以使用-derive-Debug-让结构体变成可打印的" class="headerlink" title="7.🌟🌟 我们可以使用 #[derive(Debug)] 让结构体变成可打印的."></a>7.🌟🌟 我们可以使用 #[derive(Debug)] 让结构体变成可打印的.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-meta">#[__]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">scale</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: dbg!(<span class="hljs-number">30</span> * scale), <span class="hljs-comment">// 打印 debug 信息到标准错误输出 stderr,并将 `30 * scale` 的值赋给 `width`</span><br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    dbg!(&amp;rect1); <span class="hljs-comment">// 打印 debug 信息到标准错误输出 stderr</span><br><br>    <span class="hljs-built_in">println!</span>(__, rect1); <span class="hljs-comment">// 打印 debug 信息到标准输出 stdout</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    width: <span class="hljs-type">u32</span>,<br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">scale</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rect1</span> = Rectangle &#123;<br>        width: dbg!(<span class="hljs-number">30</span> * scale), <span class="hljs-comment">// 打印 debug 信息到标准错误输出 stderr,并将 `30 * scale` 的值赋给 `width`</span><br>        height: <span class="hljs-number">50</span>,<br>    &#125;;<br><br>    dbg!(&amp;rect1); <span class="hljs-comment">// 打印 debug 信息到标准错误输出 stderr</span><br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, rect1); <span class="hljs-comment">// 打印 debug 信息到标准输出 stdout</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体的所有权"><a href="#结构体的所有权" class="headerlink" title="结构体的所有权"></a>结构体的所有权</h2><p>当解构一个变量时，可以同时使用 move 和引用模式绑定的方式。当这么做时，部分 move 就会发生：变量中一部分的所有权被转移给其它变量，而另一部分我们获取了它的引用。</p><p>在这种情况下，原变量将无法再被使用，但是它没有转移所有权的那一部分依然可以使用，也就是之前被引用的那部分。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-meta">#[derive(Debug)]</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>        name: <span class="hljs-type">String</span>,<br>        age: <span class="hljs-type">Box</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">person</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Alice&quot;</span>),<br>        age: <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">20</span>),<br>    &#125;;<br><br>    <span class="hljs-comment">// 通过这种解构式模式匹配，person.name 的所有权被转移给新的变量 `name`</span><br>    <span class="hljs-comment">// 但是，这里 `age` 变量却是对 person.age 的引用, 这里 ref 的使用相当于: let age = &amp;person.age </span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">Person</span> &#123; name, <span class="hljs-keyword">ref</span> age &#125; = person;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s age is &#123;&#125;&quot;</span>, age);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s name is &#123;&#125;&quot;</span>, name);<br><br>    <span class="hljs-comment">// Error! 原因是 person 的一部分已经被转移了所有权，因此我们无法再使用它</span><br>    <span class="hljs-comment">//println!(&quot;The person struct is &#123;:?&#125;&quot;, person);</span><br><br>    <span class="hljs-comment">// 虽然 `person` 作为一个整体无法再被使用，但是 `person.age` 依然可以使用</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s age from person struct is &#123;&#125;&quot;</span>, person.age);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟"><a href="#8-🌟🌟" class="headerlink" title="8.🌟🌟"></a>8.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">File</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    data: <span class="hljs-type">String</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;readme.md&quot;</span>),<br>        data: <span class="hljs-string">&quot;Rust By Practice&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_name</span> = f.name;<br><br>    <span class="hljs-comment">// 只能修改这一行</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;, &#123;:?&#125;&quot;</span>,f.name, f.data, f);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">File</span> &#123;<br>    name: <span class="hljs-type">String</span>,<br>    data: <span class="hljs-type">String</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = File &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;readme.md&quot;</span>),<br>        data: <span class="hljs-string">&quot;Rust By Practice&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_name</span> = f.name;<br><br>    <span class="hljs-comment">// 只能修改这一行</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, f.data);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;三种类型的结构体&quot;&gt;&lt;a href=&quot;#三种类型的结构体&quot; class=&quot;headerlink&quot; title=&quot;三种类型的结构体&quot;&gt;&lt;/a&gt;三种类型的结构体&lt;/h2&gt;&lt;h3 id=&quot;1-🌟-对于结构体，我们必须为其中的每一个字段都指定具体的值&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.4.元组</title>
    <link href="https://lilinzta.github.io/2023/08/10/6-4-%E5%85%83%E7%BB%84/"/>
    <id>https://lilinzta.github.io/2023/08/10/6-4-%E5%85%83%E7%BB%84/</id>
    <published>2023-08-10T12:47:47.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟-元组中的元素可以是不同的类型。元组的类型签名是-T1-T2-…-这里-T1-T2-是相对应的元组成员的类型"><a href="#1-🌟-元组中的元素可以是不同的类型。元组的类型签名是-T1-T2-…-这里-T1-T2-是相对应的元组成员的类型" class="headerlink" title="1.🌟 元组中的元素可以是不同的类型。元组的类型签名是 (T1, T2, …), 这里 T1, T2 是相对应的元组成员的类型."></a>1.🌟 元组中的元素可以是不同的类型。元组的类型签名是 (T1, T2, …), 这里 T1, T2 是相对应的元组成员的类型.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_t0</span>: (<span class="hljs-type">u8</span>,<span class="hljs-type">i16</span>) = (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 元组的成员还可以是一个元组</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_t1</span>: (<span class="hljs-type">u8</span>, (<span class="hljs-type">i16</span>, <span class="hljs-type">u32</span>)) = (<span class="hljs-number">0</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// 填空让代码工作</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span>: (<span class="hljs-type">u8</span>, __, <span class="hljs-type">i64</span>, __, __) = (<span class="hljs-number">1u8</span>, <span class="hljs-number">2u16</span>, <span class="hljs-number">3i64</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;, world&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_t0</span>: (<span class="hljs-type">u8</span>,<span class="hljs-type">i16</span>) = (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 元组的成员还可以是一个元组</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_t1</span>: (<span class="hljs-type">u8</span>, (<span class="hljs-type">i16</span>, <span class="hljs-type">u32</span>)) = (<span class="hljs-number">0</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">// 填空让代码工作</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span>: (<span class="hljs-type">u8</span>, <span class="hljs-type">u16</span>, <span class="hljs-type">i64</span>, &amp;<span class="hljs-type">str</span>, <span class="hljs-type">String</span>) = (<span class="hljs-number">1u8</span>, <span class="hljs-number">2u16</span>, <span class="hljs-number">3i64</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;, world&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟-可以使用索引来获取元组的成员"><a href="#2-🌟-可以使用索引来获取元组的成员" class="headerlink" title="2.🌟 可以使用索引来获取元组的成员"></a>2.🌟 可以使用索引来获取元组的成员</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改合适的地方，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;sunface&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-number">1</span>, <span class="hljs-string">&quot;sunface&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改合适的地方，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;am&quot;</span>, <span class="hljs-string">&quot;sunface&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(t.<span class="hljs-number">2</span>, <span class="hljs-string">&quot;sunface&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟-过长的元组无法被打印输出"><a href="#3-🌟-过长的元组无法被打印输出" class="headerlink" title="3.🌟 过长的元组无法被打印输出"></a>3.🌟 过长的元组无法被打印输出</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">too_long_tuple</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;too long tuple: &#123;:?&#125;&quot;</span>, too_long_tuple);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">too_long_tuple</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;too long tuple: &#123;:?&#125;&quot;</span>, too_long_tuple);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟-使用模式匹配来解构元组"><a href="#4-🌟-使用模式匹配来解构元组" class="headerlink" title="4.🌟 使用模式匹配来解构元组"></a>4.🌟 使用模式匹配来解构元组</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">6.4</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">__</span> = tup;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(z, <span class="hljs-number">6.4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">6.4</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> (x, z, y) = tup;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(z, <span class="hljs-number">6.4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟-解构式赋值"><a href="#5-🌟🌟-解构式赋值" class="headerlink" title="5.🌟🌟 解构式赋值"></a>5.🌟🌟 解构式赋值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (x, y, z);<br><br>    <span class="hljs-comment">// 填空</span><br>    __ = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(z, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (x, y, z);<br><br>    <span class="hljs-comment">// 填空</span><br>    (y, z, x) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(z, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-元组可以用于函数的参数和返回值"><a href="#6-🌟🌟-元组可以用于函数的参数和返回值" class="headerlink" title="6.🌟🌟 元组可以用于函数的参数和返回值"></a>6.🌟🌟 元组可以用于函数的参数和返回值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，需要稍微计算下</span><br>    <span class="hljs-keyword">let</span> (x, y) = <span class="hljs-title function_ invoke__">sum_multiply</span>(__);<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">6</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum_multiply</span>(nums: (<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>)) <span class="hljs-punctuation">-&gt;</span> (<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>) &#123;<br>    (nums.<span class="hljs-number">0</span> + nums.<span class="hljs-number">1</span>, nums.<span class="hljs-number">0</span> * nums.<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，需要稍微计算下</span><br>    <span class="hljs-keyword">let</span> (x, y) = <span class="hljs-title function_ invoke__">sum_multiply</span>((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">6</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum_multiply</span>(nums: (<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>)) <span class="hljs-punctuation">-&gt;</span> (<span class="hljs-type">i32</span>, <span class="hljs-type">i32</span>) &#123;<br>    (nums.<span class="hljs-number">0</span> + nums.<span class="hljs-number">1</span>, nums.<span class="hljs-number">0</span> * nums.<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟-元组中的元素可以是不同的类型。元组的类型签名是-T1-T2-…-这里-T1-T2-是相对应的元组成员的类型&quot;&gt;&lt;a href=&quot;#1-🌟-元组中的元素可以是不同的类型。元组的类型签名是-T1-T2-…-这里-T1-T2-是相对应的元组成员的类型&quot; cl</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.3.切片</title>
    <link href="https://lilinzta.github.io/2023/08/09/6-3-%E5%88%87%E7%89%87/"/>
    <id>https://lilinzta.github.io/2023/08/09/6-3-%E5%88%87%E7%89%87/</id>
    <published>2023-08-09T14:48:50.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>切片跟数组相似，但是切片的长度无法在编译期得知，因此你无法直接使用切片类型。</p><span id="more"></span><h3 id="1-🌟🌟-这里-i32-和-str-都是切片类型，但是直接使用它们会造成编译错误，如下代码所示。为了解决，你需要使用切片的引用：-i32-，-str。"><a href="#1-🌟🌟-这里-i32-和-str-都是切片类型，但是直接使用它们会造成编译错误，如下代码所示。为了解决，你需要使用切片的引用：-i32-，-str。" class="headerlink" title="1.🌟🌟 这里, [i32] 和 str 都是切片类型，但是直接使用它们会造成编译错误，如下代码所示。为了解决，你需要使用切片的引用： &amp;[i32]，&amp;str。"></a>1.🌟🌟 这里, [i32] 和 str 都是切片类型，但是直接使用它们会造成编译错误，如下代码所示。为了解决，你需要使用切片的引用： &amp;[i32]，&amp;str。</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-comment">// 修复代码中的错误，不要新增代码行!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>: [<span class="hljs-type">i32</span>] = arr[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span>: <span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello, world&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">str</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码中的错误，不要新增代码行!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>: &amp;[<span class="hljs-type">i32</span>] = &amp;arr[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span>: &amp;<span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello, world&quot;</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-type">str</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个切片引用占用了2个字大小的内存空间( 从现在开始，为了简洁性考虑，如无特殊原因，我们统一使用切片来特指切片引用 )。 该切片的第一个字是指向数据的指针，第二个字是切片的长度。字的大小取决于处理器架构，例如在 x86-64 上，字的大小是 64 位也就是 8 个字节，那么一个切片引用就是 16 个字节大小。</p><p>切片( 引用 )可以用来借用数组的某个连续的部分，对应的签名是 &amp;[T]，大家可以与数组的签名对比下 [T; Length]。</p><h3 id="2-🌟🌟🌟"><a href="#2-🌟🌟🌟" class="headerlink" title="2.🌟🌟🌟"></a>2.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">char</span>; <span class="hljs-number">3</span>] = [<span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;arr[..<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">// 修改数字 `8` 让代码工作</span><br>    <span class="hljs-comment">// 小提示: 切片和数组不一样，它是引用。如果是数组的话，那下面的 `assert!` 将会通过： &#x27;中&#x27;和&#x27;国&#x27;是char类型，char类型是Unicode编码，大小固定为4字节，两个字符为8字节。</span><br>    <span class="hljs-built_in">assert!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;slice) == <span class="hljs-number">8</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">char</span>; <span class="hljs-number">3</span>] = [<span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;arr[..<span class="hljs-number">3</span>];<br><br>    <span class="hljs-comment">// 修改数字 `8` 让代码工作</span><br>    <span class="hljs-comment">// 小提示: 切片和数组不一样，它是引用。如果是数组的话，那下面的 `assert!` 将会通过： &#x27;中&#x27;和&#x27;国&#x27;是char类型，char类型是Unicode编码，大小固定为4字节，两个字符为8字节。</span><br>    <span class="hljs-built_in">assert!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;slice) == <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>  <span class="hljs-comment">// 填空让代码工作起来</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: __ = __;<br>  <span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>  <span class="hljs-comment">// 填空让代码工作起来</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span>: &amp;[<span class="hljs-type">i32</span>] = &amp;arr[<span class="hljs-number">1</span>..<span class="hljs-number">4</span>];<br>  <span class="hljs-built_in">assert_eq!</span>(slice, &amp;[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h2><h3 id="4-🌟"><a href="#4-🌟" class="headerlink" title="4.🌟"></a>4.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// 填空，不要再使用 0..2</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;s[__];<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, slice2);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice1</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// 填空，不要再使用 0..2</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice2</span> = &amp;s[..<span class="hljs-number">2</span>];<br><br>    <span class="hljs-built_in">assert_eq!</span>(slice1, slice2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟"><a href="#5-🌟" class="headerlink" title="5.🌟"></a>5.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;你好，世界&quot;</span>;<br>    <span class="hljs-comment">// 修改以下代码行，让代码工作起来</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">2</span>];<br><br>    <span class="hljs-built_in">assert!</span>(slice == <span class="hljs-string">&quot;你&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;你好，世界&quot;</span>;<br>    <span class="hljs-comment">// 修改以下代码行，让代码工作起来</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">slice</span> = &amp;s[<span class="hljs-number">0</span>..<span class="hljs-number">3</span>];<br><br>    <span class="hljs-built_in">assert!</span>(slice == <span class="hljs-string">&quot;你&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-String-可以被隐式地转换成-str-类型"><a href="#6-🌟🌟-String-可以被隐式地转换成-str-类型" class="headerlink" title="6.🌟🌟 &amp;String 可以被隐式地转换成 &amp;str 类型."></a>6.🌟🌟 &amp;String 可以被隐式地转换成 &amp;str 类型.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><br>    <span class="hljs-comment">// 这里, &amp;s 是 `&amp;String` 类型，但是 `first_character` 函数需要的是 `&amp;str` 类型。</span><br>    <span class="hljs-comment">// 尽管两个类型不一样，但是代码仍然可以工作，原因是 `&amp;String` 会被隐式地转换成 `&amp;str` 类型，如果大家想要知道更多，可以看看 Deref 章节: https://course.rs/advance/smart-pointer/deref.html</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ch</span> = <span class="hljs-title function_ invoke__">first_character</span>(&amp;s);<br><br>    s.<span class="hljs-title function_ invoke__">clear</span>(); <span class="hljs-comment">// error!</span><br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the first character is: &#123;&#125;&quot;</span>, ch);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">first_character</span>(s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>    &amp;s[..<span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><br>    <span class="hljs-comment">// 这里, &amp;s 是 `&amp;String` 类型，但是 `first_character` 函数需要的是 `&amp;str` 类型。</span><br>    <span class="hljs-comment">// 尽管两个类型不一样，但是代码仍然可以工作，原因是 `&amp;String` 会被隐式地转换成 `&amp;str` 类型，如果大家想要知道更多，可以看看 Deref 章节: https://course.rs/advance/smart-pointer/deref.html</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ch</span> = <span class="hljs-title function_ invoke__">first_character</span>(&amp;s);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the first character is: &#123;&#125;&quot;</span>, ch);<br><br>    s.<span class="hljs-title function_ invoke__">clear</span>(); <span class="hljs-comment">// error!</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">first_character</span>(s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>    &amp;s[..<span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;切片跟数组相似，但是切片的长度无法在编译期得知，因此你无法直接使用切片类型。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.2.数组</title>
    <link href="https://lilinzta.github.io/2023/08/09/6-2-%E6%95%B0%E7%BB%84/"/>
    <id>https://lilinzta.github.io/2023/08/09/6-2-%E6%95%B0%E7%BB%84/</id>
    <published>2023-08-09T11:28:51.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>数组的类型是 [T; Length]，就如你所看到的，数组的长度是类型签名的一部分，因此数组的长度必须在编译期就已知。</p><span id="more"></span><p>例如你不能使用以下方式来声明一个数组:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">create_arr</span>(n: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-number">1</span>; n];<br>&#125;<br></code></pre></td></tr></table></figure><p>以上函数将报错，因为编译器无法在编译期知道 n 的具体大小。</p><h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用合适的类型填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: __ = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br>    <span class="hljs-comment">// 修改以下代码，让它顺利运行</span><br>    <span class="hljs-built_in">assert!</span>(arr.<span class="hljs-title function_ invoke__">len</span>() == <span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用合适的类型填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br>    <span class="hljs-comment">// 修改以下代码，让它顺利运行</span><br>    <span class="hljs-built_in">assert!</span>(arr.<span class="hljs-title function_ invoke__">len</span>() == <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 很多时候，我们可以忽略数组的部分类型，也可以忽略全部类型，让编译器帮助我们推导</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr0</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [_; <span class="hljs-number">3</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-comment">// 数组分配在栈上， `std::mem::size_of_val` 函数会返回整个数组占用的内存空间</span><br>    <span class="hljs-comment">// 数组中的每个 char 元素占用 4 字节的内存空间，因为在 Rust 中， char 是 Unicode 字符</span><br>    <span class="hljs-built_in">assert!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;arr) == __);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 很多时候，我们可以忽略数组的部分类型，也可以忽略全部类型，让编译器帮助我们推导</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr0</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span>: [<span class="hljs-type">char</span>; <span class="hljs-number">3</span>] = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-comment">// 数组分配在栈上， `std::mem::size_of_val` 函数会返回整个数组占用的内存空间</span><br>    <span class="hljs-comment">// 数组中的每个 char 元素占用 4 字节的内存空间，因为在 Rust 中， char 是 Unicode 字符</span><br>    <span class="hljs-built_in">assert!</span>(std::mem::<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;arr) == <span class="hljs-number">12</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟-数组中的所有元素可以一起初始化为同一个值"><a href="#3-🌟-数组中的所有元素可以一起初始化为同一个值" class="headerlink" title="3.🌟 数组中的所有元素可以一起初始化为同一个值"></a>3.🌟 数组中的所有元素可以一起初始化为同一个值</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">list</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">100</span>] = __ ;<br><br>    <span class="hljs-built_in">assert!</span>(list[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert!</span>(list.<span class="hljs-title function_ invoke__">len</span>() == <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">list</span>: [<span class="hljs-type">i32</span>; <span class="hljs-number">100</span>] = [<span class="hljs-number">1</span>; <span class="hljs-number">100</span>] ;<br><br>    <span class="hljs-built_in">assert!</span>(list[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert!</span>(list.<span class="hljs-title function_ invoke__">len</span>() == <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟-数组中的所有元素必须是同一类型"><a href="#4-🌟-数组中的所有元素必须是同一类型" class="headerlink" title="4.🌟 数组中的所有元素必须是同一类型"></a>4.🌟 数组中的所有元素必须是同一类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 修复错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;3&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 修复错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟-数组的下标索引从-0-开始"><a href="#5-🌟-数组的下标索引从-0-开始" class="headerlink" title="5.🌟 数组的下标索引从 0 开始."></a>5.🌟 数组的下标索引从 0 开始.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = arr[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 只修改此行来让代码工作</span><br><br>    <span class="hljs-built_in">assert!</span>(ele == <span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ele</span> = arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 只修改此行来让代码工作</span><br><br>    <span class="hljs-built_in">assert!</span>(ele == <span class="hljs-string">&#x27;a&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟-越界索引会导致代码的-panic"><a href="#6-🌟-越界索引会导致代码的-panic" class="headerlink" title="6.🌟 越界索引会导致代码的 panic."></a>6.🌟 越界索引会导致代码的 panic.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码中的错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">names</span> = [<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Sunfei&quot;</span>), <span class="hljs-string">&quot;Sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()];<br><br>    <span class="hljs-comment">// `get` 返回 `Option&lt;T&gt;` 类型，因此它的使用非常安全</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">name0</span> = names.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-comment">// 但是下标索引就存在越界的风险了</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_name1</span> = &amp;names[<span class="hljs-number">2</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复代码中的错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">names</span> = [<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Sunfei&quot;</span>), <span class="hljs-string">&quot;Sunface&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>()];<br><br>    <span class="hljs-comment">// `get` 返回 `Option&lt;T&gt;` 类型，因此它的使用非常安全</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">name0</span> = names.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br><br>    <span class="hljs-comment">// 但是下标索引就存在越界的风险了</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_name1</span> = &amp;names[<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数组的类型是 [T; Length]，就如你所看到的，数组的长度是类型签名的一部分，因此数组的长度必须在编译期就已知。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>6.1.字符串</title>
    <link href="https://lilinzta.github.io/2023/08/08/6-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://lilinzta.github.io/2023/08/08/6-1-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-08-08T14:42:09.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>字符串字面量的类型是 &amp;str， 例如 let s: &amp;str &#x3D; “hello, world” 中的 “hello, world” 的类型就是 &amp;str。</p><span id="more"></span><h1 id="str-和-str"><a href="#str-和-str" class="headerlink" title="str 和 &amp;str"></a>str 和 &amp;str</h1><h3 id="1-🌟-正常情况下我们无法使用-str-类型，但是可以使用-str-来替代"><a href="#1-🌟-正常情况下我们无法使用-str-类型，但是可以使用-str-来替代" class="headerlink" title="1.🌟 正常情况下我们无法使用 str 类型，但是可以使用 &amp;str 来替代"></a>1.🌟 正常情况下我们无法使用 str 类型，但是可以使用 &amp;str 来替代</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: &amp;<span class="hljs-type">str</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-如果要使用-str-类型，只能配合-Box。-可以用来将-Box-转换为-str-类型"><a href="#2-🌟🌟-如果要使用-str-类型，只能配合-Box。-可以用来将-Box-转换为-str-类型" class="headerlink" title="2.🌟🌟 如果要使用 str 类型，只能配合 Box。 &amp; 可以用来将 Box 转换为 &amp;str 类型"></a>2.🌟🌟 如果要使用 str 类型，只能配合 Box。 &amp; 可以用来将 Box<str> 转换为 &amp;str 类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-type">str</span>&gt; = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-title function_ invoke__">greetings</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">Box</span>&lt;<span class="hljs-type">str</span>&gt; = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-title function_ invoke__">greetings</span>(&amp;s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span>: <span class="hljs-type">Box</span>&lt;&amp;<span class="hljs-type">str</span>&gt; = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">into</span>();<br>    <span class="hljs-title function_ invoke__">greetings</span>(*s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: &amp;<span class="hljs-type">str</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>String 是定义在标准库中的类型，分配在堆上，可以动态的增长。它的底层存储是动态字节数组的方式( Vec<u8> )，但是与字节数组不同，String 是 UTF-8 编码。</p><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = __;<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;!&#x27;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-string">&quot;hello, world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟🌟"><a href="#4-🌟🌟🌟" class="headerlink" title="4.🌟🌟🌟"></a>4.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误，并且不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span>  <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&quot; world&quot;</span>);<br>    s += <span class="hljs-string">&quot;!&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误，并且不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    s.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot; world&quot;</span>);<br>    s += <span class="hljs-string">&quot;!&quot;</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟-我们可以用-replace-方法来替换指定的子字符串"><a href="#5-🌟🌟-我们可以用-replace-方法来替换指定的子字符串" class="headerlink" title="5.🌟🌟 我们可以用 replace 方法来替换指定的子字符串"></a>5.🌟🌟 我们可以用 replace 方法来替换指定的子字符串</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I like dogs&quot;</span>);<br>    <span class="hljs-comment">// 以下方法会重新分配一块内存空间，然后将修改后的字符串存在这里</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = s.__(<span class="hljs-string">&quot;dogs&quot;</span>, <span class="hljs-string">&quot;cats&quot;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s1, <span class="hljs-string">&quot;I like cats&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;I like dogs&quot;</span>);<br>    <span class="hljs-comment">// 以下方法会重新分配一块内存空间，然后将修改后的字符串存在这里</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = s.<span class="hljs-title function_ invoke__">replace</span>(<span class="hljs-string">&quot;dogs&quot;</span>, <span class="hljs-string">&quot;cats&quot;</span>);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s1, <span class="hljs-string">&quot;I like cats&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-你只能将-String-跟-str-类型进行拼接，并且-String-的所有权在此过程中会被-move"><a href="#6-🌟🌟-你只能将-String-跟-str-类型进行拼接，并且-String-的所有权在此过程中会被-move" class="headerlink" title="6.🌟🌟 你只能将 String 跟 &amp;str 类型进行拼接，并且 String 的所有权在此过程中会被 move"></a>6.🌟🌟 你只能将 String 跟 &amp;str 类型进行拼接，并且 String 的所有权在此过程中会被 move</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误，不要删除任何一行代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = s1 + s2;<br>    <span class="hljs-built_in">assert_eq!</span>(s3,<span class="hljs-string">&quot;hello,world!&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s1);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复所有错误，不要删除任何一行代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello,&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world!&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = s1.<span class="hljs-title function_ invoke__">clone</span>() + &amp;s2;<br>    <span class="hljs-built_in">assert_eq!</span>(s3,<span class="hljs-string">&quot;hello,world!&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s1);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="str-和-String"><a href="#str-和-String" class="headerlink" title="&amp;str 和 String"></a>&amp;str 和 String</h1><p>与 str 的很少使用相比，&amp;str 和 String 类型却非常常用，因此也非常重要。</p><h3 id="7-🌟🌟-我们可以使用两种方法将-str-转换成-String-类型"><a href="#7-🌟🌟-我们可以使用两种方法将-str-转换成-String-类型" class="headerlink" title="7.🌟🌟 我们可以使用两种方法将 &amp;str 转换成 String 类型"></a>7.🌟🌟 我们可以使用两种方法将 &amp;str 转换成 String 类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>    <span class="hljs-title function_ invoke__">greetings</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-title function_ invoke__">greetings</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用至少两种方法来修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-title function_ invoke__">greetings</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">greetings</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟-我们可以使用-String-from-或-to-string-将-str-转换成-String-类型"><a href="#8-🌟🌟-我们可以使用-String-from-或-to-string-将-str-转换成-String-类型" class="headerlink" title="8.🌟🌟 我们可以使用 String::from 或 to_string 将 &amp;str 转换成 String 类型"></a>8.🌟🌟 我们可以使用 String::from 或 to_string 将 &amp;str 转换成 String 类型</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法来解决错误，不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>: &amp;<span class="hljs-type">str</span> = s;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法来解决错误，不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello, world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>: &amp;<span class="hljs-type">str</span> = &amp;s;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法来解决错误，不要新增代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span>: &amp;<span class="hljs-type">str</span> = s;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h1><h3 id="9-🌟"><a href="#9-🌟" class="headerlink" title="9.🌟"></a>9.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 你可以使用转义的方式来输出想要的字符，这里我们使用十六进制的值，例如 \x73 会被转义成小写字母 &#x27;s&#x27;</span><br>    <span class="hljs-comment">// 填空以输出 &quot;I&#x27;m writing Rust&quot;</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">byte_escape</span> = <span class="hljs-string">&quot;I&#x27;m writing Ru\x73__!&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;What are you doing\x3F (\\x3F means ?) &#123;&#125;&quot;</span>, byte_escape);<br><br>    <span class="hljs-comment">// 也可以使用 Unicode 形式的转义字符</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">unicode_codepoint</span> = <span class="hljs-string">&quot;\u&#123;211D&#125;&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">character_name</span> = <span class="hljs-string">&quot;\&quot;DOUBLE-STRUCK CAPITAL R\&quot;&quot;</span>;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Unicode character &#123;&#125; (U+211D) is called &#123;&#125;&quot;</span>,<br>                unicode_codepoint, character_name );<br><br>    <span class="hljs-comment">// 还能使用 \ 来连接多行字符串</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_string</span> = <span class="hljs-string">&quot;String literals</span><br><span class="hljs-string">                        can span multiple lines.</span><br><span class="hljs-string">                        The linebreak and indentation here \</span><br><span class="hljs-string">                         can be escaped too!&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, long_string);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-🌟🌟🌟-有时候需要转义的字符很多，我们会希望使用更方便的方式来书写字符串-raw-string"><a href="#10-🌟🌟🌟-有时候需要转义的字符很多，我们会希望使用更方便的方式来书写字符串-raw-string" class="headerlink" title="10.🌟🌟🌟 有时候需要转义的字符很多，我们会希望使用更方便的方式来书写字符串: raw string."></a>10.🌟🌟🌟 有时候需要转义的字符很多，我们会希望使用更方便的方式来书写字符串: raw string.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/* 填空并修复所有错误 */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">raw_str</span> = <span class="hljs-string">r&quot;Escapes don&#x27;t work here: \x3F \u&#123;211D&#125;&quot;</span>;<br>    <span class="hljs-comment">// 修改上面的行让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>(raw_str, <span class="hljs-string">&quot;Escapes don&#x27;t work here: ? ℝ&quot;</span>);<br><br>    <span class="hljs-comment">// 如果你希望在字符串中使用双引号，可以使用以下形式</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">quotes</span> = <span class="hljs-string">r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, quotes);<br><br>    <span class="hljs-comment">// 如果希望在字符串中使用 # 号，可以如下使用：</span><br>    <span class="hljs-keyword">let</span>  <span class="hljs-variable">delimiter</span> = <span class="hljs-string">r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, delimiter);<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_delimiter</span> = __;<br>    <span class="hljs-built_in">assert_eq!</span>(long_delimiter, <span class="hljs-string">&quot;Hello, \&quot;##\&quot;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/* 填空并修复所有错误 */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">raw_str</span> = <span class="hljs-string">&quot;Escapes don&#x27;t work here: \x3F \u&#123;211D&#125;&quot;</span>;<br>    <span class="hljs-comment">// 修改上面的行让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>(raw_str, <span class="hljs-string">&quot;Escapes don&#x27;t work here: ? ℝ&quot;</span>);<br><br>    <span class="hljs-comment">// 如果你希望在字符串中使用双引号，可以使用以下形式</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">quotes</span> = <span class="hljs-string">r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, quotes);<br><br>    <span class="hljs-comment">// 如果希望在字符串中使用 # 号，可以如下使用：</span><br>    <span class="hljs-keyword">let</span>  <span class="hljs-variable">delimiter</span> = <span class="hljs-string">r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, delimiter);<br><br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_delimiter</span> = <span class="hljs-string">r###&quot;Hello, &quot;##&quot;&quot;###</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(long_delimiter, <span class="hljs-string">&quot;Hello, \&quot;##\&quot;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字节字符串"><a href="#字节字符串" class="headerlink" title="字节字符串"></a>字节字符串</h1><p>想要一个非 UTF-8 形式的字符串吗(我们之前的 str, &amp;str, String 都是 UTF-8 字符串) ? 可以试试字节字符串或者说字节数组:</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::<span class="hljs-type">str</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 注意，这并不是 `&amp;str` 类型了！</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">bytestring</span>: &amp;[<span class="hljs-type">u8</span>; <span class="hljs-number">21</span>] = <span class="hljs-string">b&quot;this is a byte string&quot;</span>;<br><br><br>    <span class="hljs-comment">// 字节数组没有实现 `Display` 特征，因此只能使用 `Debug` 的方式去打印</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;A byte string: &#123;:?&#125;&quot;</span>, bytestring);<br><br>    <span class="hljs-comment">// 字节数组也可以使用转义</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">escaped</span> = <span class="hljs-string">b&quot;\x52\x75\x73\x74 as bytes&quot;</span>;<br>    <span class="hljs-comment">// ...但是不支持 unicode 转义</span><br>    <span class="hljs-comment">// let escaped = b&quot;\u&#123;211D&#125; is not allowed&quot;;</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Some escaped bytes: &#123;:?&#125;&quot;</span>, escaped);<br><br><br>    <span class="hljs-comment">// raw string</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">raw_bytestring</span> = <span class="hljs-string">br&quot;\u&#123;211D&#125; is not escaped here&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, raw_bytestring);<br><br>    <span class="hljs-comment">// 将字节数组转成 `str` 类型可能会失败</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(my_str) = <span class="hljs-type">str</span>::<span class="hljs-title function_ invoke__">from_utf8</span>(raw_bytestring) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;And the same as text: &#x27;&#123;&#125;&#x27;&quot;</span>, my_str);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_quotes</span> = <span class="hljs-string">br#&quot;You can also use &quot;fancier&quot; formatting, \</span><br><span class="hljs-string">                    like with normal raw strings&quot;#</span>;<br><br>    <span class="hljs-comment">// 字节数组可以不是 UTF-8 格式</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">shift_jis</span> = <span class="hljs-string">b&quot;\x82\xe6\x82\xa8\x82\xb1\x82\xbb&quot;</span>; <span class="hljs-comment">// &quot;ようこそ&quot; in SHIFT-JIS</span><br><br>    <span class="hljs-comment">// 但是它们未必能转换成 `str` 类型</span><br>    <span class="hljs-keyword">match</span> <span class="hljs-type">str</span>::<span class="hljs-title function_ invoke__">from_utf8</span>(shift_jis) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(my_str) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Conversion successful: &#x27;&#123;&#125;&#x27;&quot;</span>, my_str),<br>        <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Conversion failed: &#123;:?&#125;&quot;</span>, e),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串索引string-index"><a href="#字符串索引string-index" class="headerlink" title="字符串索引string index"></a>字符串索引string index</h1><h3 id="11-🌟🌟-你无法通过索引的方式去访问字符串中的某个字符，但是可以使用切片的方式-s1-start-end-，但是start-和-end-必须准确落在字符的边界处"><a href="#11-🌟🌟-你无法通过索引的方式去访问字符串中的某个字符，但是可以使用切片的方式-s1-start-end-，但是start-和-end-必须准确落在字符的边界处" class="headerlink" title="11.🌟🌟 你无法通过索引的方式去访问字符串中的某个字符，但是可以使用切片的方式 &amp;s1[start..end] ，但是start 和 end 必须准确落在字符的边界处."></a>11.🌟🌟 你无法通过索引的方式去访问字符串中的某个字符，但是可以使用切片的方式 &amp;s1[start..end] ，但是start 和 end 必须准确落在字符的边界处.</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hi,中国&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">h</span> = s1[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 修改当前行来修复错误，提示: `h` 字符在 UTF-8 格式中只需要 1 个字节来表示</span><br>    <span class="hljs-built_in">assert_eq!</span>(h, <span class="hljs-string">&quot;h&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">h1</span> = &amp;s1[<span class="hljs-number">3</span>..<span class="hljs-number">5</span>];<span class="hljs-comment">// 修改当前行来修复错误，提示: `中` 字符在 UTF-8 格式中需要 3 个字节来表示</span><br>    <span class="hljs-built_in">assert_eq!</span>(h1, <span class="hljs-string">&quot;中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hi,中国&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">h</span> = &amp;s1[<span class="hljs-number">0</span>..<span class="hljs-number">1</span>]; <span class="hljs-comment">// 修改当前行来修复错误，提示: `h` 字符在 UTF-8 格式中只需要 1 个字节来表示</span><br>    <span class="hljs-built_in">assert_eq!</span>(h, <span class="hljs-string">&quot;h&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">h1</span> = &amp;s1[<span class="hljs-number">3</span>..=<span class="hljs-number">5</span>];<span class="hljs-comment">// 修改当前行来修复错误，提示: `中` 字符在 UTF-8 格式中需要 3 个字节来表示</span><br>    <span class="hljs-built_in">assert_eq!</span>(h1, <span class="hljs-string">&quot;中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="操作-UTF-8-字符串"><a href="#操作-UTF-8-字符串" class="headerlink" title="操作 UTF-8 字符串"></a>操作 UTF-8 字符串</h1><h3 id="12-🌟"><a href="#12-🌟" class="headerlink" title="12.🌟"></a>12.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，打印出 &quot;你好，世界&quot; 中的每一个字符</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;你好，世界&quot;</span>.__ &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空，打印出 &quot;你好，世界&quot; 中的每一个字符</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;你好，世界&quot;</span>.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="utf8-slice"><a href="#utf8-slice" class="headerlink" title="utf8_slice"></a>utf8_slice</h2><p>我们可以使用三方库 utf8_slice 来访问 UTF-8 字符串的某个子串，但是与之前不同的是，该库索引的是字符，而不是字节.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> utf8_slice;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;The 🚀 goes to the 🌑!&quot;</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rocket</span> = utf8_slice::<span class="hljs-title function_ invoke__">slice</span>(s, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// 结果是 &quot;🚀&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;字符串字面量的类型是 &amp;amp;str， 例如 let s: &amp;amp;str &amp;#x3D; “hello, world” 中的 “hello, world” 的类型就是 &amp;amp;str。&lt;/p&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>kde-connect</title>
    <link href="https://lilinzta.github.io/2023/08/08/kde-connect/"/>
    <id>https://lilinzta.github.io/2023/08/08/kde-connect/</id>
    <published>2023-08-08T09:27:02.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用kdeconnect优雅地传文件-局域网"><a href="#使用kdeconnect优雅地传文件-局域网" class="headerlink" title="使用kdeconnect优雅地传文件(局域网)"></a>使用kdeconnect优雅地传文件(局域网)</h1><span id="more"></span><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><ul><li>Windows: <a href="https://apps.microsoft.com/store/detail/kde-connect/9N93MRMSXBF0">Microsoft Store</a></li><li>Linux: pkg name is <code>kdeconnect-kde</code>, <code>kdeconnect-plasma</code>, just <code>kdeconnect</code> or <code>kde-connect</code></li><li>Android: <a href="https://play.google.com/store/apps/details?id=org.kde.kdeconnect_tp&pli=1">Play Store</a>or<a href="https://f-droid.org/packages/org.kde.kdeconnect_tp/">F-Droid</a></li><li>IOS: <a href="https://apps.apple.com/us/app/kde-connect/id1580245991">App Store</a></li></ul><h3 id="2-cli"><a href="#2-cli" class="headerlink" title="2.cli"></a>2.cli</h3><p>图形界面的使用不再介绍，可以自行探索</p><p>使用<code>kdeconnect-cli -h</code>查看帮助，获得以下信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sh">Usage: kdeconnect-cli [options]<br>KDE Connect CLI tool<br><br>Options:<br>  -l, --list-devices            List all devices<br>  -a, --list-available          List available (paired and reachable) devices<br>  --id-only                     Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span>, to ease scripting<br>  --name-only                   Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices name, to ease scripting<br>  --id-name-only                Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span> and name, to ease scripting<br>  --refresh                     Search <span class="hljs-keyword">for</span> devices <span class="hljs-keyword">in</span> the network and<br>                                re-establish connections<br>  --pair                        Request pairing to a said device<br>  --ring                        Find the said device by ringing it.<br>  --unpair                      Stop pairing to a said device<br>  --ping                        Sends a ping to said device<br>  --ping-msg &lt;message&gt;          Same as ping but you can <span class="hljs-built_in">set</span> the message to<br>                                display<br>  --share &lt;path or URL&gt;         Share a file/URL to a said device<br>  --share-text &lt;text&gt;           Share text to a said device<br>  --list-notifications          Display the notifications on a said device<br>  --lock                        Lock the specified device<br>  --unlock                      Unlock the specified device<br>  --send-sms &lt;message&gt;          Sends an SMS. Requires destination<br>  --destination &lt;phone number&gt;  Phone number to send the message<br>  --attachment &lt;file urls&gt;      File urls to send attachments with the message<br>                                (can be passed multiple <span class="hljs-built_in">times</span>)<br>  --device, -d &lt;dev&gt;            Device ID<br>  --name, -n &lt;name&gt;             Device Name<br>  --encryption-info             Get encryption info about said device<br>  --list-commands               Lists remote commands and their ids<br>  --execute-command &lt;<span class="hljs-built_in">id</span>&gt;        Executes a remote <span class="hljs-built_in">command</span> by <span class="hljs-built_in">id</span><br>  -k, --send-keys &lt;key&gt;         Sends keys to a said device<br>  --my-id                       Display this device<span class="hljs-string">&#x27;s id and exit</span><br><span class="hljs-string">  --photo &lt;path&gt;                Open the connected device&#x27;</span>s camera and transfer<br>                                the photo<br>  -h, --<span class="hljs-built_in">help</span>                    Displays <span class="hljs-built_in">help</span> on commandline options.<br>  --help-all                    Displays <span class="hljs-built_in">help</span> including Qt specific options.<br>  -v, --version                 Displays version information.<br>  --author                      Show author information.<br>  --license                     Show license information.<br>  --desktopfile &lt;file name&gt;     The base file name of the desktop entry <span class="hljs-keyword">for</span><br>                                this application.<br></code></pre></td></tr></table></figure><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Arch -&gt; Android</span><br><span class="hljs-built_in">alias</span> kcp=<span class="hljs-string">&quot;kdeconnect-cli -n &lt;device name&gt; --share&quot;</span><br>kcp &lt;path_to_file&gt;<br><span class="hljs-comment"># Android -&gt; Arch</span><br>乖乖用GUI罢<br></code></pre></td></tr></table></figure><p>高级用法请根据自己的习惯和文档自行探索</p><blockquote><p>参考链接: <a href="https://github.com/KDE/kdeconnect-kde">https://github.com/KDE/kdeconnect-kde</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用kdeconnect优雅地传文件-局域网&quot;&gt;&lt;a href=&quot;#使用kdeconnect优雅地传文件-局域网&quot; class=&quot;headerlink&quot; title=&quot;使用kdeconnect优雅地传文件(局域网)&quot;&gt;&lt;/a&gt;使用kdeconnect优雅地传文件(局域网)&lt;/h1&gt;</summary>
    
    
    
    
    <category term="KDE" scheme="https://lilinzta.github.io/tags/KDE/"/>
    
  </entry>
  
  <entry>
    <title>5.2.引用和借用</title>
    <link href="https://lilinzta.github.io/2023/08/07/5-2-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/"/>
    <id>https://lilinzta.github.io/2023/08/07/5-2-%E5%BC%95%E7%94%A8%E5%92%8C%E5%80%9F%E7%94%A8/</id>
    <published>2023-08-07T12:03:54.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>   <span class="hljs-comment">// 填写空白处</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = __;<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的内存地址是 &#123;:p&#125;&quot;</span>, p); <span class="hljs-comment">// output: 0x16fa3ac84</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>   <span class="hljs-comment">// 填写空白处</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = &amp;x;<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的内存地址是 &#123;:p&#125;&quot;</span>, p); <span class="hljs-comment">// output: 0x16fa3ac84</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟"><a href="#2-🌟" class="headerlink" title="2.🌟"></a>2.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;x;<br><br>    <span class="hljs-comment">// 只能修改以下行</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;x;<br><br>    <span class="hljs-comment">// 只能修改以下行</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-number">5</span>, *y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">borrow_object</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrow_object</span>(s: &amp;<span class="hljs-type">String</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">borrow_object</span>(&amp;s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrow_object</span>(s: &amp;<span class="hljs-type">String</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟"><a href="#4-🌟" class="headerlink" title="4.🌟"></a>4.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">push_str</span>(s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">push_str</span>(s: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">push_str</span>(&amp;<span class="hljs-keyword">mut</span> s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">push_str</span>(s: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;<br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-comment">// 填写空白处，让代码工作</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = __;<br><br>    p.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-comment">// 填写空白处，让代码工作</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">p</span> = &amp;<span class="hljs-keyword">mut</span> s;<br><br>    p.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref 与 &amp; 类似，可以用来获取一个值的引用，但是它们的用法有所不同。</p><h3 id="6-🌟🌟🌟"><a href="#6-🌟🌟🌟" class="headerlink" title="6.🌟🌟🌟"></a>6.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = <span class="hljs-string">&#x27;中&#x27;</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;c;<br>    <span class="hljs-comment">// 填写空白处，但是不要修改其它行的代码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">__</span> r2 = c;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*r1, *r2);<br><br>    <span class="hljs-comment">// 判断两个内存地址的字符串是否相等</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">get_addr</span>(r1),<span class="hljs-title function_ invoke__">get_addr</span>(r2));<br>&#125;<br><br><span class="hljs-comment">// 获取传入引用的内存地址的字符串形式</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_addr</span>(r: &amp;<span class="hljs-type">char</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;:p&#125;&quot;</span>, r)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = <span class="hljs-string">&#x27;中&#x27;</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;c;<br>    <span class="hljs-comment">// 填写空白处，但是不要修改其它行的代码</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ref</span> r2 = c;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*r1, *r2);<br><br>    <span class="hljs-comment">// 判断两个内存地址的字符串是否相等</span><br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">get_addr</span>(r1),<span class="hljs-title function_ invoke__">get_addr</span>(r2));<br>&#125;<br><br><span class="hljs-comment">// 获取传入引用的内存地址的字符串形式</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_addr</span>(r: &amp;<span class="hljs-type">char</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;:p&#125;&quot;</span>, r)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="借用规则"><a href="#借用规则" class="headerlink" title="借用规则"></a>借用规则</h2><h3 id="7-🌟"><a href="#7-🌟" class="headerlink" title="7.🌟"></a>7.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 移除代码某个部分，让它工作</span><br><span class="hljs-comment">// 你不能移除整行的代码！</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, r1, r2);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;s;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, r1, r2);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><h3 id="8-🌟-错误-从不可变对象借用可变"><a href="#8-🌟-错误-从不可变对象借用可变" class="headerlink" title="8.🌟 错误: 从不可变对象借用可变"></a>8.🌟 错误: 从不可变对象借用可变</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 通过修改下面一行代码来修复错误</span><br>    <span class="hljs-keyword">let</span>  <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">borrow_object</span>(&amp;<span class="hljs-keyword">mut</span> s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrow_object</span>(s: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 通过修改下面一行代码来修复错误</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">borrow_object</span>(&amp;<span class="hljs-keyword">mut</span> s)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrow_object</span>(s: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="9-🌟🌟-Ok-从可变对象借用不可变"><a href="#9-🌟🌟-Ok-从可变对象借用不可变" class="headerlink" title="9.🌟🌟 Ok: 从可变对象借用不可变"></a>9.🌟🌟 Ok: 从可变对象借用不可变</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 下面的代码没有任何错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">borrow_object</span>(&amp;s);<br><br>    s.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">borrow_object</span>(s: &amp;<span class="hljs-type">String</span>) &#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="NLL"><a href="#NLL" class="headerlink" title="NLL"></a>NLL</h2><h3 id="10-🌟🌟"><a href="#10-🌟🌟" class="headerlink" title="10.🌟🌟"></a>10.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 注释掉一行代码让它工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    r1.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    r2.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;!&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,r1);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 注释掉一行代码让它工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    r1.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    r2.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;!&quot;</span>);<br><br>    <span class="hljs-comment">// println!(&quot;&#123;&#125;&quot;,r1);</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-🌟🌟"><a href="#11-🌟🌟" class="headerlink" title="11.🌟🌟"></a>11.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br><br>    <span class="hljs-comment">// 在下面增加一行代码人为制造编译错误：cannot borrow `s` as mutable more than once at a time</span><br>    <span class="hljs-comment">// 你不能同时使用 r1 和 r2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br><br>    <span class="hljs-comment">// 在下面增加一行代码人为制造编译错误：cannot borrow `s` as mutable more than once at a time</span><br>    <span class="hljs-comment">// 你不能同时使用 r1 和 r2</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, r1, r2);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h2&gt;&lt;h3 id=&quot;1-🌟&quot;&gt;&lt;a href=&quot;#1-🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟&quot;&gt;&lt;/a&gt;1.🌟&lt;/h</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 安装 VMware Workstation</title>
    <link href="https://lilinzta.github.io/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/"/>
    <id>https://lilinzta.github.io/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/</id>
    <published>2023-08-07T00:43:57.000Z</published>
    <updated>2024-01-20T11:32:09.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Arch-Linux从AUR源安装VMware-Workstation"><a href="#Arch-Linux从AUR源安装VMware-Workstation" class="headerlink" title="Arch Linux从AUR源安装VMware Workstation"></a>Arch Linux从AUR源安装VMware Workstation</h1><span id="more"></span><p>更完整的安装说明请参考 <a href="https://wiki.archlinuxcn.org/wiki/VMware">Arch Wiki</a></p><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo pacman -S fuse2 gtkmm linux-headers ncurses libcanberra pcsclite<br></code></pre></td></tr></table></figure><h3 id="2-安装VMware-Workstation"><a href="#2-安装VMware-Workstation" class="headerlink" title="2.安装VMware Workstation"></a>2.安装VMware Workstation</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S vmware-workstation<br></code></pre></td></tr></table></figure><h3 id="3-开启服务"><a href="#3-开启服务" class="headerlink" title="3.开启服务"></a>3.开启服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start vmware-networks.service<br>systemctl start vmware-usbarbitrator.service<br></code></pre></td></tr></table></figure><h3 id="4-加载VMware模块"><a href="#4-加载VMware模块" class="headerlink" title="4.加载VMware模块"></a>4.加载VMware模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo modprobe -a vmw_vmci vmmon<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Arch-Linux从AUR源安装VMware-Workstation&quot;&gt;&lt;a href=&quot;#Arch-Linux从AUR源安装VMware-Workstation&quot; class=&quot;headerlink&quot; title=&quot;Arch Linux从AUR源安装VMware Workstation&quot;&gt;&lt;/a&gt;Arch Linux从AUR源安装VMware Workstation&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Arch Linux" scheme="https://lilinzta.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>5.1.所有权</title>
    <link href="https://lilinzta.github.io/2023/08/07/5-1-%E6%89%80%E6%9C%89%E6%9D%83/"/>
    <id>https://lilinzta.github.io/2023/08/07/5-1-%E6%89%80%E6%9C%89%E6%9D%83/</id>
    <published>2023-08-06T23:57:43.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用尽可能多的方法来通过编译</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用尽可能多的方法来通过编译</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &amp;x;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用尽可能多的方法来通过编译</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-string">&quot;hello, world&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用尽可能多的方法来通过编译</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">as_str</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 使用尽可能多的方法来通过编译</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">clone</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 不要修改 main 中的代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-title function_ invoke__">take_ownership</span>(s1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s2);<br>&#125;<br><br><span class="hljs-comment">// 只能修改下面的代码!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_ownership</span>(s: <span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 不要修改 main 中的代码</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-title function_ invoke__">take_ownership</span>(s1);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s2);<br>&#125;<br><br><span class="hljs-comment">// 只能修改下面的代码!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">take_ownership</span>(s: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>    s<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟"><a href="#3-🌟🌟" class="headerlink" title="3.🌟🌟"></a>3.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">give_ownership</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br><span class="hljs-comment">// 只能修改下面的代码!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">give_ownership</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-comment">// convert String to Vec</span><br>    <span class="hljs-comment">// 将 String 转换成 Vec 类型</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_s</span> = s.<span class="hljs-title function_ invoke__">into_bytes</span>();<br>    s<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">give_ownership</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br><span class="hljs-comment">// 只能修改下面的代码!</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">give_ownership</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>    <span class="hljs-comment">// convert String to Vec</span><br>    <span class="hljs-comment">// 将 String 转换成 Vec 类型</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_s</span> = s.<span class="hljs-title function_ invoke__">clone</span>().<span class="hljs-title function_ invoke__">into_bytes</span>();<br>    s<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要删除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">print_str</span>(s);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_str</span>(s: <span class="hljs-type">String</span>)  &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误，不要删除任何代码行</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>    <span class="hljs-title function_ invoke__">print_str</span>(s.<span class="hljs-title function_ invoke__">clone</span>());<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_str</span>(s: <span class="hljs-type">String</span>)  &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,s)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 不要使用 clone，使用 copy 的方式替代</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (), <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>());<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">clone</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;, &#123;:?&#125;&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (), <span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;, &#123;:?&#125;&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟"><a href="#6-🌟" class="headerlink" title="6.🌟"></a>6.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-comment">// 只修改下面这行代码 !</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = s;<br><br>    s1.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello, &quot;</span>);<br><br>    <span class="hljs-comment">// 只修改下面这行代码 !</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s1</span> = s;<br><br>    s1.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-🌟🌟🌟"><a href="#7-🌟🌟🌟" class="headerlink" title="7.🌟🌟🌟"></a>7.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">let</span> ...      <span class="hljs-comment">// 完成该行代码，不要修改其它行！</span><br><br>    *y = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*x, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 完成该行代码，不要修改其它行！</span><br><br>    *y = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(*x, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="部分move"><a href="#部分move" class="headerlink" title="部分move"></a>部分move</h2><p>当解构一个变量时，可以同时使用 move 和引用模式绑定的方式。当这么做时，部分 move 就会发生：变量中一部分的所有权被转移给其它变量，而另一部分我们获取了它的引用。</p><p>在这种情况下，原变量将无法再被使用，但是它没有转移所有权的那一部分依然可以使用，也就是之前被引用的那部分。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-meta">#[derive(Debug)]</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>        name: <span class="hljs-type">String</span>,<br>        age: <span class="hljs-type">Box</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">person</span> = Person &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Alice&quot;</span>),<br>        age: <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">20</span>),<br>    &#125;;<br><br>    <span class="hljs-comment">// 通过这种解构式模式匹配，person.name 的所有权被转移给新的变量 `name`</span><br>    <span class="hljs-comment">// 但是，这里 `age` 变量却是对 person.age 的引用, 这里 ref 的使用相当于: let age = &amp;person.age </span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">Person</span> &#123; name, <span class="hljs-keyword">ref</span> age &#125; = person;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s age is &#123;&#125;&quot;</span>, age);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s name is &#123;&#125;&quot;</span>, name);<br><br>    <span class="hljs-comment">// Error! 原因是 person 的一部分已经被转移了所有权，因此我们无法再使用它</span><br>    <span class="hljs-comment">//println!(&quot;The person struct is &#123;:?&#125;&quot;, person);</span><br><br>    <span class="hljs-comment">// 虽然 `person` 作为一个整体无法再被使用，但是 `person.age` 依然可以使用</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The person&#x27;s age from person struct is &#123;&#125;&quot;</span>, person.age);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟"><a href="#8-🌟" class="headerlink" title="8.🌟"></a>8.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>));<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">_s</span> = t.<span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">// 仅修改下面这行代码，且不要使用 `_s`</span><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, t);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>));<br><br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">_s</span> = t.<span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">// 仅修改下面这行代码，且不要使用 `_s`</span><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, t.<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-🌟🌟"><a href="#9-🌟🌟" class="headerlink" title="9.🌟🌟"></a>9.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>));<br><br>   <span class="hljs-comment">// 填空，不要修改其它代码</span><br>   <span class="hljs-keyword">let</span> (__, __) = __;<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;, &#123;:?&#125;, &#123;:?&#125;&quot;</span>, s1, s2, t); <span class="hljs-comment">// -&gt; &quot;hello&quot;, &quot;world&quot;, (&quot;hello&quot;, &quot;world&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = (<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;world&quot;</span>));<br><br>   <span class="hljs-comment">// 填空，不要修改其它代码</span><br>   <span class="hljs-keyword">let</span> (s1, s2) = &amp;t;<br><br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;, &#123;:?&#125;, &#123;:?&#125;&quot;</span>, s1, s2, t); <span class="hljs-comment">// -&gt; &quot;hello&quot;, &quot;world&quot;, (&quot;hello&quot;, &quot;world&quot;)</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟🌟&quot;&gt;&lt;a href=&quot;#1-🌟🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟&quot;&gt;&lt;/a&gt;1.🌟🌟&lt;/h3&gt;&lt;p&gt;Q:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>4.4.函数</title>
    <link href="https://lilinzta.github.io/2023/08/06/4-4-%E5%87%BD%E6%95%B0/"/>
    <id>https://lilinzta.github.io/2023/08/06/4-4-%E5%87%BD%E6%95%B0/</id>
    <published>2023-08-05T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟🌟🌟"><a href="#1-🌟🌟🌟" class="headerlink" title="1.🌟🌟🌟"></a>1.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改下面两行代码!</span><br>    <span class="hljs-keyword">let</span> (x, y) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">sum</span>(x, y);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>(x, y: <span class="hljs-type">i32</span>) &#123;<br>    x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 不要修改下面两行代码!</span><br>    <span class="hljs-keyword">let</span> (x, y) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">sum</span>(x, y);<br><br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>(x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>&#123;<br>    x + y<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟"><a href="#2-🌟🌟" class="headerlink" title="2.🌟🌟"></a>2.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-title function_ invoke__">print</span>();<br>&#125;<br><br><span class="hljs-comment">// 使用另一个类型来替代 i32</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-title function_ invoke__">print</span>();<br>&#125;<br><br><span class="hljs-comment">// 使用另一个类型来替代 i32</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print</span>() <span class="hljs-punctuation">-&gt;</span> () &#123;<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟"><a href="#3-🌟🌟🌟" class="headerlink" title="3.🌟🌟🌟"></a>3.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 用两种方法求解</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">never_return</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-comment">// 实现这个函数，不要修改函数签名!</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">never_return</span>();<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;I return nothing!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">never_return</span>();<br>&#125;<br><br><span class="hljs-keyword">use</span> std::thread;<br><span class="hljs-keyword">use</span> std::time;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;I return nothing&quot;</span>);<br>        thread::<span class="hljs-title function_ invoke__">sleep</span>(time::Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟-发散函数-Diverging-function-不会返回任何值，因此它们可以用于替代需要返回任何值的地方"><a href="#4-🌟🌟-发散函数-Diverging-function-不会返回任何值，因此它们可以用于替代需要返回任何值的地方" class="headerlink" title="4.🌟🌟 发散函数( Diverging function )不会返回任何值，因此它们可以用于替代需要返回任何值的地方"></a>4.🌟🌟 发散函数( Diverging function )不会返回任何值，因此它们可以用于替代需要返回任何值的地方</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">get_option</span>(tp: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> tp &#123;<br>        <span class="hljs-number">1</span> =&gt; &#123;<br>            <span class="hljs-comment">// TODO</span><br>        &#125;<br>        _ =&gt; &#123;<br>            <span class="hljs-comment">// TODO</span><br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 这里与其返回一个 None，不如使用发散函数替代</span><br>    <span class="hljs-title function_ invoke__">never_return_fn</span>()<br>&#125;<br><br><span class="hljs-comment">// 使用三种方法实现以下发散函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return_fn</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return_fn</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-built_in">panic!</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return_fn</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    todo!();<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">never_return_fn</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-keyword">loop</span> &#123;<br>        std::thread::<span class="hljs-title function_ invoke__">sleep</span>(std::time::Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = __;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_v</span> = <span class="hljs-keyword">match</span> b &#123;<br>        <span class="hljs-literal">true</span> =&gt; <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">// 发散函数也可以用于 `match` 表达式，用于替代任何类型的值</span><br>        <span class="hljs-literal">false</span> =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;we have no value for `false`, but we can panic&quot;</span>)<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 填空</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_v</span> = <span class="hljs-keyword">match</span> b &#123;<br>        <span class="hljs-literal">true</span> =&gt; <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">// 发散函数也可以用于 `match` 表达式，用于替代任何类型的值</span><br>        <span class="hljs-literal">false</span> =&gt; &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;we have no value for `false`, but we can panic&quot;</span>)<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Exercise Failed if printing out this line!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟🌟🌟&quot;&gt;&lt;a href=&quot;#1-🌟🌟🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟🌟🌟&quot;&gt;&lt;/a&gt;1.🌟🌟🌟&lt;/h3&gt;&lt;p&gt;Q:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>4.3.语句与表达式</title>
    <link href="https://lilinzta.github.io/2023/08/05/4-3-%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://lilinzta.github.io/2023/08/05/4-3-%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2023-08-04T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5u32</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x_squared</span> = x * x;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x_cube</span> = x_squared * x;<br><br>        <span class="hljs-comment">// 下面表达式的值将被赋给 `y`</span><br>        x_cube + x_squared + x<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = &#123;<br>        <span class="hljs-comment">// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br>        <span class="hljs-number">2</span> * x;<br>    &#125;;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is &#123;:?&#125;&quot;</span>, x);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;y is &#123;:?&#125;&quot;</span>, y);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;z is &#123;:?&#125;&quot;</span>, z);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-🌟🌟"><a href="#1-🌟🌟" class="headerlink" title="1.🌟🌟"></a>1.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法让代码工作起来</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>       x += <span class="hljs-number">2</span><br>   &#125;;<br><br>   <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法让代码工作起来</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>       x += <span class="hljs-number">2</span><br>   &#125;;<br><br>   <span class="hljs-built_in">assert_eq!</span>(v, ());<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用两种方法让代码工作起来</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = &#123;<br>       <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>       x + <span class="hljs-number">2</span><br>   &#125;;<br><br>   <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟"><a href="#2-🌟" class="headerlink" title="2.🌟"></a>2.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">3</span>);<br><br>   <span class="hljs-built_in">assert!</span>(v == <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">3</span><br>        x<br>    &#125;;<br><br>   <span class="hljs-built_in">assert!</span>(v == <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span> , <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>(x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    x + y;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">sum</span>(<span class="hljs-number">1</span> , <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(s, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">sum</span>(x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    x + y<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>4.2.字符,布尔,单元类型</title>
    <link href="https://lilinzta.github.io/2023/08/03/4-2-%E5%AD%97%E7%AC%A6-%E5%B8%83%E5%B0%94-%E5%8D%95%E5%85%83%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lilinzta.github.io/2023/08/03/4-2-%E5%AD%97%E7%AC%A6-%E5%B8%83%E5%B0%94-%E5%8D%95%E5%85%83%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-08-02T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改2处 `assert_eq!` 让代码工作</span><br><br><span class="hljs-keyword">use</span> std::mem::size_of_val;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;c1),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c2</span> = <span class="hljs-string">&#x27;中&#x27;</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;c2),<span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改2处 `assert_eq!` 让代码工作</span><br><br><span class="hljs-keyword">use</span> std::mem::size_of_val;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;c1),<span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c2</span> = <span class="hljs-string">&#x27;中&#x27;</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;c2),<span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟"><a href="#2-🌟" class="headerlink" title="2.🌟"></a>2.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改一行让代码正常打印</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span> = <span class="hljs-string">&quot;中&quot;</span>;<br>    <span class="hljs-title function_ invoke__">print_char</span>(c1);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_char</span>(c : <span class="hljs-type">char</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改一行让代码正常打印</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c1</span> = <span class="hljs-string">&#x27;中&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">print_char</span>(c1);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_char</span>(c : <span class="hljs-type">char</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟"><a href="#3-🌟" class="headerlink" title="3.🌟"></a>3.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使成功打印</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_f</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> !t &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使成功打印</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_f</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> t &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟"><a href="#4-🌟" class="headerlink" title="4.🌟"></a>4.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(t, f);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(t, f);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 让代码工作，但不要修改 `implicitly_ret_unit` !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_v</span>: () = ();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-title function_ invoke__">implicitly_ret_unit</span>());<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">implicitly_ret_unit</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;I will return a ()&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 不要使用下面的函数，它只用于演示！</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">explicitly_ret_unit</span>() <span class="hljs-punctuation">-&gt;</span> () &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;I will return a ()&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 让代码工作，但不要修改 `implicitly_ret_unit` !</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: () = ();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(v, <span class="hljs-title function_ invoke__">implicitly_ret_unit</span>());<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">implicitly_ret_unit</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;I will return a ()&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 不要使用下面的函数，它只用于演示！</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">explicitly_ret_unit</span>() <span class="hljs-punctuation">-&gt;</span> () &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;I will return a ()&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-单元类型占用的内存大小是多少？"><a href="#6-🌟🌟-单元类型占用的内存大小是多少？" class="headerlink" title="6.🌟🌟 单元类型占用的内存大小是多少？"></a>6.🌟🌟 单元类型占用的内存大小是多少？</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 让代码工作：修改 `assert!` 中的 `4`</span><br><span class="hljs-keyword">use</span> std::mem::size_of_val;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">unit</span>: () = ();<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;unit) == <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 让代码工作：修改 `assert!` 中的 `4`</span><br><span class="hljs-keyword">use</span> std::mem::size_of_val;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">unit</span>: () = ();<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-title function_ invoke__">size_of_val</span>(&amp;unit) == <span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-🌟&quot;&gt;&lt;a href=&quot;#1-🌟&quot; class=&quot;headerlink&quot; title=&quot;1.🌟&quot;&gt;&lt;/a&gt;1.🌟&lt;/h3&gt;&lt;p&gt;Q:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>4.1.数值类型</title>
    <link href="https://lilinzta.github.io/2023/07/31/4-1-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lilinzta.github.io/2023/07/31/4-1-%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-07-30T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数，浮点数，序列Range，计算"><a href="#整数，浮点数，序列Range，计算" class="headerlink" title="整数，浮点数，序列Range，计算"></a>整数，浮点数，序列Range，计算</h1><span id="more"></span><h3 id="1-🌟"><a href="#1-🌟" class="headerlink" title="1.🌟"></a>1.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 移除某个部分让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span>: <span class="hljs-type">u32</span> = <span class="hljs-number">5</span>;<br><br>    y = x;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// 这里 z 的类型是?</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 移除某个部分让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span> = <span class="hljs-number">5</span>;<br><br>    y = x;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// 这里 z 的类型是i32</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟"><a href="#2-🌟" class="headerlink" title="2.🌟"></a>2.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: <span class="hljs-type">u16</span> = <span class="hljs-number">38_u8</span> <span class="hljs-keyword">as</span> __;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>: <span class="hljs-type">u16</span> = <span class="hljs-number">38_u8</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u16</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟🌟🌟"><a href="#3-🌟🌟🌟" class="headerlink" title="3.🌟🌟🌟"></a>3.🌟🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改 `assert_eq!` 让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">&quot;u32&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-title function_ invoke__">type_of</span>(&amp;x));<br>&#125;<br><br><span class="hljs-comment">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">type_of</span>&lt;T&gt;(_: &amp;T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, std::any::type_name::&lt;T&gt;())<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改 `assert_eq!` 让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-string">&quot;i32&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>(), <span class="hljs-title function_ invoke__">type_of</span>(&amp;x));<br>&#125;<br><br><span class="hljs-comment">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">type_of</span>&lt;T&gt;(_: &amp;T) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, std::any::type_name::&lt;T&gt;())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">i8</span>::MAX, __);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">u8</span>::MAX, __);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">i8</span>::MAX, <span class="hljs-number">127</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-type">u8</span>::MAX, <span class="hljs-number">255</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟"><a href="#5-🌟🌟" class="headerlink" title="5.🌟🌟"></a>5.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 解决代码中的错误和 `panic`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-number">251_u8</span> + <span class="hljs-number">8</span>;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = <span class="hljs-type">i8</span>::<span class="hljs-title function_ invoke__">checked_add</span>(<span class="hljs-number">251</span>, <span class="hljs-number">8</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,v1,v2);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 解决代码中的错误和 `panic`</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-number">247_u8</span> + <span class="hljs-number">8</span>;<br>   <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = <span class="hljs-type">i8</span>::<span class="hljs-title function_ invoke__">checked_add</span>(<span class="hljs-number">119</span>, <span class="hljs-number">8</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>   <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,v1,v2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟"><a href="#6-🌟🌟" class="headerlink" title="6.🌟🌟"></a>6.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改 `assert!` 让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-number">1_024</span> + <span class="hljs-number">0xff</span> + <span class="hljs-number">0o77</span> + <span class="hljs-number">0b1111_1111</span>;<br>    <span class="hljs-built_in">assert!</span>(v == <span class="hljs-number">1579</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修改 `assert!` 让代码工作</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-number">1_024</span> + <span class="hljs-number">0xff</span> + <span class="hljs-number">0o77</span> + <span class="hljs-number">0b1111_1111</span>;<br>    <span class="hljs-built_in">assert!</span>(v == <span class="hljs-number">1597</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-🌟"><a href="#7-🌟" class="headerlink" title="7.🌟"></a>7.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 将 ? 替换成你的答案</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1_000.000_1</span>; <span class="hljs-comment">// ?</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">0.12</span>; <span class="hljs-comment">// f32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = <span class="hljs-number">0.01_f64</span>; <span class="hljs-comment">// f64</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 将 ? 替换成你的答案</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1_000.000_1</span>; <span class="hljs-comment">// f64</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">0.12</span>; <span class="hljs-comment">// f32</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = <span class="hljs-number">0.01_f64</span>; <span class="hljs-comment">// f64</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟-使用两种方法来让下面代码工作"><a href="#8-🌟🌟-使用两种方法来让下面代码工作" class="headerlink" title="8.🌟🌟 使用两种方法来让下面代码工作"></a>8.🌟🌟 使用两种方法来让下面代码工作</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">0.1</span>+<span class="hljs-number">0.2</span>==<span class="hljs-number">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">0.1_f32</span>+<span class="hljs-number">0.2</span>==<span class="hljs-number">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert!</span>((<span class="hljs-number">0.1_f64</span>+ <span class="hljs-number">0.2</span> - <span class="hljs-number">0.3</span>).<span class="hljs-title function_ invoke__">abs</span>() &lt; <span class="hljs-number">0.001</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-🌟🌟-两个目标-1-修改-assert-让它工作-2-让-println-输出-97-122"><a href="#9-🌟🌟-两个目标-1-修改-assert-让它工作-2-让-println-输出-97-122" class="headerlink" title="9.🌟🌟 两个目标: 1. 修改 assert! 让它工作 2. 让 println! 输出: 97 - 122"></a>9.🌟🌟 两个目标: 1. 修改 assert! 让它工作 2. 让 println! 输出: 97 - 122</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> -<span class="hljs-number">3</span>..<span class="hljs-number">2</span> &#123;<br>        sum += i<br>    &#125;<br><br>    <span class="hljs-built_in">assert!</span>(sum == -<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;a&#x27;</span>..=<span class="hljs-string">&#x27;z&#x27;</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">sum</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> -<span class="hljs-number">3</span>..<span class="hljs-number">2</span> &#123;<br>        sum += i<br>    &#125;<br><br>    <span class="hljs-built_in">assert!</span>(sum == -<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">c</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;a&#x27;</span>..=<span class="hljs-string">&#x27;z&#x27;</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-🌟🌟"><a href="#10-🌟🌟" class="headerlink" title="10.🌟🌟"></a>10.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::ops::&#123;Range, RangeInclusive&#125;;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>((<span class="hljs-number">1</span>..__), Range&#123; start: <span class="hljs-number">1</span>, end: <span class="hljs-number">5</span> &#125;);<br>    <span class="hljs-built_in">assert_eq!</span>((<span class="hljs-number">1</span>..__), RangeInclusive::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空</span><br><span class="hljs-keyword">use</span> std::ops::&#123;Range, RangeInclusive&#125;;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">assert_eq!</span>((<span class="hljs-number">1</span>..<span class="hljs-number">5</span>), Range&#123; start: <span class="hljs-number">1</span>, end: <span class="hljs-number">5</span> &#125;);<br>    <span class="hljs-built_in">assert_eq!</span>((<span class="hljs-number">1</span>..=<span class="hljs-number">5</span>), RangeInclusive::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-🌟"><a href="#11-🌟" class="headerlink" title="11.🌟"></a>11.🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，并解决错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 整数加法</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1u32</span> + <span class="hljs-number">2</span> == __);<br><br>    <span class="hljs-comment">// 整数减法</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1i32</span> - <span class="hljs-number">2</span> == __);<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1u8</span> - <span class="hljs-number">2</span> == -<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">3</span> * <span class="hljs-number">50</span> == __);<br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">9.6</span> / <span class="hljs-number">3.2</span> == <span class="hljs-number">3.0</span>); <span class="hljs-comment">// error ! 修改它让代码工作</span><br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">24</span> % <span class="hljs-number">5</span> == __);<br><br>    <span class="hljs-comment">// 逻辑与或非操作</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span> == __);<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-literal">true</span> || <span class="hljs-literal">false</span> == __);<br>    <span class="hljs-built_in">assert!</span>(!<span class="hljs-literal">true</span> == __);<br><br>    <span class="hljs-comment">// 位操作</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 AND 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> &amp; <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 OR 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> | <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 XOR 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> ^ <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1 &lt;&lt; 5 is &#123;&#125;&quot;</span>, <span class="hljs-number">1u32</span> &lt;&lt; <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0x80 &gt;&gt; 2 is 0x&#123;:x&#125;&quot;</span>, <span class="hljs-number">0x80u32</span> &gt;&gt; <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 填空，并解决错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">// 整数加法</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1u32</span> + <span class="hljs-number">2</span> == <span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 整数减法</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1i32</span> - <span class="hljs-number">2</span> == -<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">1i8</span> - <span class="hljs-number">2</span> == -<span class="hljs-number">1</span>);<br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">3</span> * <span class="hljs-number">50</span> == <span class="hljs-number">150</span>);<br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">9.6_f32</span> / <span class="hljs-number">3.2</span> == <span class="hljs-number">3.0</span>); <span class="hljs-comment">// error ! 修改它让代码工作</span><br><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-number">24</span> % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>);<br><br>    <span class="hljs-comment">// 逻辑与或非操作</span><br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span> == <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-literal">true</span> || <span class="hljs-literal">false</span> == <span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">assert!</span>(!<span class="hljs-literal">true</span> == <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// 位操作</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 AND 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> &amp; <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 OR 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> | <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0011 XOR 0101 is &#123;:04b&#125;&quot;</span>, <span class="hljs-number">0b0011u32</span> ^ <span class="hljs-number">0b0101</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1 &lt;&lt; 5 is &#123;&#125;&quot;</span>, <span class="hljs-number">1u32</span> &lt;&lt; <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;0x80 &gt;&gt; 2 is 0x&#123;:x&#125;&quot;</span>, <span class="hljs-number">0x80u32</span> &gt;&gt; <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;整数，浮点数，序列Range，计算&quot;&gt;&lt;a href=&quot;#整数，浮点数，序列Range，计算&quot; class=&quot;headerlink&quot; title=&quot;整数，浮点数，序列Range，计算&quot;&gt;&lt;/a&gt;整数，浮点数，序列Range，计算&lt;/h1&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>3.变量绑定与解构</title>
    <link href="https://lilinzta.github.io/2023/07/29/3-%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E6%9E%84/"/>
    <id>https://lilinzta.github.io/2023/07/29/3-%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E6%9E%84/</id>
    <published>2023-07-28T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值"><a href="#绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值" class="headerlink" title="绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值"></a>绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值</h1><span id="more"></span><h3 id="1-🌟-变量只有在初始化后才能被使用"><a href="#1-🌟-变量只有在初始化后才能被使用" class="headerlink" title="1.🌟 变量只有在初始化后才能被使用"></a>1.🌟 变量只有在初始化后才能被使用</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并尽可能少的修改</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span>; <span class="hljs-comment">// 未初始化，但被使用</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">i32</span>; <span class="hljs-comment">// 未初始化，也未被使用</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is equal to &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并尽可能少的修改</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">114</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">i32</span>; <span class="hljs-comment">// 未初始化，也未被使用</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is equal to &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-🌟🌟-可以使用-mut-将变量标记为可变"><a href="#2-🌟🌟-可以使用-mut-将变量标记为可变" class="headerlink" title="2.🌟🌟 可以使用 mut 将变量标记为可变"></a>2.🌟🌟 可以使用 mut 将变量标记为可变</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 完形填空，让代码编译</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">__</span> = <span class="hljs-number">1</span>;<br>    __ += <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 完形填空，让代码编译</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>    x += <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-🌟-作用域是一个变量在程序中能够保持合法的范围"><a href="#3-🌟-作用域是一个变量在程序中能够保持合法的范围" class="headerlink" title="3.🌟 作用域是一个变量在程序中能够保持合法的范围"></a>3.🌟 作用域是一个变量在程序中能够保持合法的范围</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并使用尽可能少的改变</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">10</span>;<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的值是 &#123;&#125;, y 的值是 &#123;&#125;&quot;</span>, x, y);<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的值是 &#123;&#125;, y 的值是 &#123;&#125;&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并使用尽可能少的改变</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的值是 &#123;&#125;, y 的值是 &#123;&#125;&quot;</span>, x, y);<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x 的值是 &#123;&#125;, y 的值是 &#123;&#125;&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-🌟🌟"><a href="#4-🌟🌟" class="headerlink" title="4.🌟🌟"></a>4.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, world&quot;</span>, x);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">define_x</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复错误</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">define_x</span>();<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">define_x</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, world&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-🌟🌟-若后面的变量声明的名称和之前的变量相同，则我们说：第一个变量被第二个同名变量遮蔽了-shadowing"><a href="#5-🌟🌟-若后面的变量声明的名称和之前的变量相同，则我们说：第一个变量被第二个同名变量遮蔽了-shadowing" class="headerlink" title="5.🌟🌟 若后面的变量声明的名称和之前的变量相同，则我们说：第一个变量被第二个同名变量遮蔽了( shadowing )"></a>5.🌟🌟 若后面的变量声明的名称和之前的变量相同，则我们说：第一个变量被第二个同名变量遮蔽了( shadowing )</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 只允许修改 `assert_eq!` 来让 `println!` 工作(在终端输出 `42`)</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">12</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">12</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">42</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x); <span class="hljs-comment">// 输出 &quot;42&quot;.</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 只允许修改 `assert_eq!` 来让 `println!` 工作(在终端输出 `42`)</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">5</span>;<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">12</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">12</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">42</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, x); <span class="hljs-comment">// 输出 &quot;42&quot;.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-🌟🌟-修改一行代码以通过编译"><a href="#6-🌟🌟-修改一行代码以通过编译" class="headerlink" title="6.🌟🌟 修改一行代码以通过编译"></a>6.🌟🌟 修改一行代码以通过编译</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">1</span>;<br>    x = <span class="hljs-number">7</span>;<br>    <span class="hljs-comment">// 遮蔽且再次绑定</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x;<br>    x += <span class="hljs-number">3</span>;<br><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 遮蔽</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-string">&quot;I can also be bound to text!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">1</span>;<br>    x = <span class="hljs-number">7</span>;<br>    <span class="hljs-comment">// 遮蔽且再次绑定</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x;<br>    <span class="hljs-comment">// x += 3;</span><br><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">// 遮蔽</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-string">&quot;I can also be bound to text!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-使用以下方法来修复编译器输出的-warning"><a href="#7-使用以下方法来修复编译器输出的-warning" class="headerlink" title="7.使用以下方法来修复编译器输出的 warning :"></a>7.使用以下方法来修复编译器输出的 warning :</h3><ul><li>🌟 一种方法</li><li>🌟🌟 两种方法</li></ul><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// compiler warning: unused variable: `x`</span><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// compiler warning: unused variable: `x`</span><br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[allow(unused_variables)]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// compiler warning: unused variable: `x`</span><br></code></pre></td></tr></table></figure><h3 id="8-🌟🌟-我们可以将-let-跟一个模式一起使用来解构一个元组，最终将它解构为多个独立的变量"><a href="#8-🌟🌟-我们可以将-let-跟一个模式一起使用来解构一个元组，最终将它解构为多个独立的变量" class="headerlink" title="8.🌟🌟 我们可以将 let 跟一个模式一起使用来解构一个元组，最终将它解构为多个独立的变量"></a>8.🌟🌟 我们可以将 let 跟一个模式一起使用来解构一个元组，最终将它解构为多个独立的变量</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并尽可能少的修改</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (x, y) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    x += <span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 修复下面代码的错误并尽可能少的修改</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (<span class="hljs-keyword">mut</span> x, y) = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    x += <span class="hljs-number">2</span>;<br><br>    <span class="hljs-built_in">assert_eq!</span>(x, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">assert_eq!</span>(y, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-🌟🌟"><a href="#9-🌟🌟" class="headerlink" title="9.🌟🌟"></a>9.🌟🌟</h3><p>Q:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (x, y);<br>    (x,..) = (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    [.., y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// 填空，让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>([x,y], __);<br>&#125;<br></code></pre></td></tr></table></figure><p>A:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> (x, y);<br>    (x,..) = (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>    [.., y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br>    <span class="hljs-comment">// 填空，让代码工作</span><br>    <span class="hljs-built_in">assert_eq!</span>([x,y], [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值&quot;&gt;&lt;a href=&quot;#绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值&quot; class=&quot;headerlink&quot; title=&quot;绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值&quot;&gt;&lt;/a&gt;绑定和可变性，变量作用域，变量遮蔽，未使用的变量，变量解构，结构式赋值&lt;/h1&gt;</summary>
    
    
    
    <category term="Rust By Practice" scheme="https://lilinzta.github.io/categories/Rust-By-Practice/"/>
    
    
    <category term="Rust" scheme="https://lilinzta.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Arch base install</title>
    <link href="https://lilinzta.github.io/2023/07/16/Arch-base-install/"/>
    <id>https://lilinzta.github.io/2023/07/16/Arch-base-install/</id>
    <published>2023-07-15T16:00:00.000Z</published>
    <updated>2024-01-20T11:50:01.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录了我曾经安装Arch-Linux的大致步骤"><a href="#记录了我曾经安装Arch-Linux的大致步骤" class="headerlink" title="记录了我曾经安装Arch Linux的大致步骤"></a>记录了我曾经安装Arch Linux的大致步骤</h1><span id="more"></span><blockquote><p>update time：2023-4-16</p></blockquote><h3 id="0-连接wifi"><a href="#0-连接wifi" class="headerlink" title="0.连接wifi"></a>0.连接wifi</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">iwctl<br>station wlan0 scan<br>station wlan0 get-networks<br>station wlan0 connect SSID<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h3 id="1-确保UEFI模式启动"><a href="#1-确保UEFI模式启动" class="headerlink" title="1.确保UEFI模式启动"></a>1.确保UEFI模式启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure><h3 id="2-禁用自动更新mirrorlist的reflector"><a href="#2-禁用自动更新mirrorlist的reflector" class="headerlink" title="2.禁用自动更新mirrorlist的reflector"></a>2.禁用自动更新mirrorlist的reflector</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl stop reflector.service<br></code></pre></td></tr></table></figure><h3 id="3-检查时钟服务状态"><a href="#3-检查时钟服务状态" class="headerlink" title="3.检查时钟服务状态"></a>3.检查时钟服务状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">timedatectl status<br></code></pre></td></tr></table></figure><h3 id="4-换源"><a href="#4-换源" class="headerlink" title="4.换源"></a>4.换源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/pacman.d/mirrorlist<br>Server = https://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>Server = https://mirrors.hit.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><h3 id="5-分区"><a href="#5-分区" class="headerlink" title="5.分区"></a>5.分区</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cfdisk /dev/sd(x)<br></code></pre></td></tr></table></figure><h3 id="6-格式化"><a href="#6-格式化" class="headerlink" title="6.格式化"></a>6.格式化</h3><p>&#x2F;和&#x2F;home格式化成ext4类型，EFI分区格式化成vfat类型，交换分区使用mkswap初始化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkfs.ext4 /dev/root_part<br>mkfs.vfat /efi_system_part<br>mkswap /dev/swap_part<br></code></pre></td></tr></table></figure><h3 id="7-挂载"><a href="#7-挂载" class="headerlink" title="7.挂载"></a>7.挂载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount /dev/root_part /mnt<br>mount --<span class="hljs-built_in">mkdir</span> /dev/efi_system_part /mnt/boot<br>swapon /dev/swap_part<br></code></pre></td></tr></table></figure><h3 id="8-安装必需的软件包"><a href="#8-安装必需的软件包" class="headerlink" title="8.安装必需的软件包"></a>8.安装必需的软件包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacstrap /mnt base base-devel linux linux-firmware dhcpcd iwd networkmanager wireless_tools wpa_supplicant vim git<br></code></pre></td></tr></table></figure><h3 id="9-配置系统"><a href="#9-配置系统" class="headerlink" title="9.配置系统"></a>9.配置系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Fstab</span><br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br><br><span class="hljs-comment"># Chroot</span><br>arch-chroot /mnt<br><br><span class="hljs-comment"># 设置上海时区</span><br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><br><span class="hljs-comment"># 同步系统时间到硬件</span><br>hwclock --systohc<br><br><span class="hljs-comment"># 本地化</span><br>vim /etc/locale.gen<br>locale-gen<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;LANG=en_US.UTF-8&quot;</span> &gt; /etc/locale.conf<br><br><span class="hljs-comment"># 安装微码</span><br>pacman -S intel-ucode  <span class="hljs-comment"># Intel</span><br>pacman -S amd-ucode   <span class="hljs-comment"># AMD</span><br><br><span class="hljs-comment"># 安装grub引导</span><br>pacman -S grub efibootmgr<br>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="10-完成安装"><a href="#10-完成安装" class="headerlink" title="10.完成安装"></a>10.完成安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 设置密码</span><br>passwd<br><span class="hljs-comment"># exit</span><br>umount -R /mnt<br>reboot<br></code></pre></td></tr></table></figure><h3 id="11-图形化安装"><a href="#11-图形化安装" class="headerlink" title="11.图形化安装"></a>11.图形化安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -Syyu<br>useradd -m -G wheel -s /bin/bash username<br>passwd username<br>EDITOR=vim visudo<br><span class="hljs-comment"># wheel ALL=(ALL)ALL ---&gt; wheel ALL=(ALL)ALL</span><br><br>pacman -S plasma-meta konsole dolphin<br>systemctl <span class="hljs-built_in">enable</span> sddm<br><br><span class="hljs-comment"># vim /etc/pacman.conf</span><br>[archlinuxcn]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br>pacman -Syyu<br></code></pre></td></tr></table></figure><h3 id="12-基础功能包"><a href="#12-基础功能包" class="headerlink" title="12.基础功能包"></a>12.基础功能包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo pacman -S ntfs-3g wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts.emoji firefox yay<br><br><span class="hljs-comment"># fcitx5中文输入法</span><br>sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki<br>yay -S fcitx5-material-color<br>vim /etc/environment<br>GTK_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>QT_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录了我曾经安装Arch-Linux的大致步骤&quot;&gt;&lt;a href=&quot;#记录了我曾经安装Arch-Linux的大致步骤&quot; class=&quot;headerlink&quot; title=&quot;记录了我曾经安装Arch Linux的大致步骤&quot;&gt;&lt;/a&gt;记录了我曾经安装Arch Linux的大致步骤&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Arch Linux" scheme="https://lilinzta.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lilinzta.github.io/2023/07/16/hello-world/"/>
    <id>https://lilinzta.github.io/2023/07/16/hello-world/</id>
    <published>2023-07-15T16:00:00.000Z</published>
    <updated>2024-01-17T15:05:42.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome-to-Hexo"><a href="#Welcome-to-Hexo" class="headerlink" title="Welcome to Hexo!"></a>Welcome to <a href="https://hexo.io/">Hexo</a>!</h1><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Welcome-to-Hexo&quot;&gt;&lt;a href=&quot;#Welcome-to-Hexo&quot; class=&quot;headerlink&quot; title=&quot;Welcome to Hexo!&quot;&gt;&lt;/a&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;!&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
