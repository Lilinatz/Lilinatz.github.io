<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在没有按住 Shift 键时隐藏 GRUB 界面</title>
    <link href="/2024/05/09/%E5%9C%A8%E6%B2%A1%E6%9C%89%E6%8C%89%E4%BD%8F-Shift-%E9%94%AE%E6%97%B6%E9%9A%90%E8%97%8F-GRUB-%E7%95%8C%E9%9D%A2/"/>
    <url>/2024/05/09/%E5%9C%A8%E6%B2%A1%E6%9C%89%E6%8C%89%E4%BD%8F-Shift-%E9%94%AE%E6%97%B6%E9%9A%90%E8%97%8F-GRUB-%E7%95%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>为了获取更快的启动速度，而不用等 GRUB 倒计时，可以命令 GRUB 在启动时隐藏目录，仅在 Shift 被按住的时候才显示</p><span id="more"></span><h2 id="1-将如下内容添加到-etc-default-grub-启动这个功能"><a href="#1-将如下内容添加到-etc-default-grub-启动这个功能" class="headerlink" title="1.将如下内容添加到 /etc/default/grub 启动这个功能"></a>1.将如下内容添加到 <code>/etc/default/grub</code> 启动这个功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_FORCE_HIDDEN_MENU=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-然后创建-etc-grub-d-31-hold-shift-文件并写入以下内容"><a href="#2-然后创建-etc-grub-d-31-hold-shift-文件并写入以下内容" class="headerlink" title="2.然后创建&#x2F;etc&#x2F;grub.d&#x2F;31_hold_shift 文件并写入以下内容"></a>2.然后创建&#x2F;etc&#x2F;grub.d&#x2F;31_hold_shift 文件并写入以下内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-built_in">set</span> -e<br><br>prefix=<span class="hljs-string">&quot;/usr&quot;</span><br>exec_prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;prefix&#125;</span>&quot;</span><br>datarootdir=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;prefix&#125;</span>/share&quot;</span><br><br><span class="hljs-built_in">export</span> TEXTDOMAIN=grub<br><span class="hljs-built_in">export</span> TEXTDOMAINDIR=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;datarootdir&#125;</span>/locale&quot;</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;datarootdir&#125;</span>/grub/grub-mkconfig_lib&quot;</span><br><br>found_other_os=<br><br><span class="hljs-function"><span class="hljs-title">make_timeout</span></span> () &#123;<br><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;GRUB_FORCE_HIDDEN_MENU&#125;</span>&quot;</span> = <span class="hljs-string">&quot;xtrue&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ] ; <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT_QUIET&#125;</span>&quot;</span> = <span class="hljs-string">&quot;xtrue&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    verbose=<br>      <span class="hljs-keyword">else</span><br>    verbose=<span class="hljs-string">&quot; --verbose&quot;</span><br>      <span class="hljs-keyword">fi</span><br><br>      <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span> = <span class="hljs-string">&quot;x0&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if keystatus; then</span><br><span class="hljs-string">    if keystatus --shift; then</span><br><span class="hljs-string">      set timeout=-1</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  else</span><br><span class="hljs-string">    if sleep$verbose --interruptible 3 ; then</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br>      <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if sleep$verbose --interruptible $&#123;GRUB_HIDDEN_TIMEOUT&#125; ; then</span><br><span class="hljs-string">    set timeout=0</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br>      <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">adjust_timeout</span></span> () &#123;<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$GRUB_BUTTON_CMOS_ADDRESS</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if cmostest $GRUB_BUTTON_CMOS_ADDRESS ; then</span><br><span class="hljs-string">EOF</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT_BUTTON&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT_BUTTON&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-keyword">else</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">else</span><br>    make_timeout <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_HIDDEN_TIMEOUT&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;GRUB_TIMEOUT&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br>  adjust_timeout<br><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">if [ &quot;x\$&#123;timeout&#125;&quot; != &quot;x-1&quot; ]; then</span><br><span class="hljs-string">  if keystatus; then</span><br><span class="hljs-string">    if keystatus --shift; then</span><br><span class="hljs-string">      set timeout=-1</span><br><span class="hljs-string">    else</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  else</span><br><span class="hljs-string">    if sleep$verbose --interruptible 3 ; then</span><br><span class="hljs-string">      set timeout=0</span><br><span class="hljs-string">    fi</span><br><span class="hljs-string">  fi</span><br><span class="hljs-string">fi</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h2 id="3-给-31-hold-shift-文件可执行权限，然后重新生成主配置文件"><a href="#3-给-31-hold-shift-文件可执行权限，然后重新生成主配置文件" class="headerlink" title="3.给 31_hold_shift 文件可执行权限，然后重新生成主配置文件"></a>3.给 <code>31_hold_shift</code> 文件可执行权限，然后重新生成主配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /etc/grub.d/31_hold_shift<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GNU/Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GRUB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RHEL 安装 Zabbix</title>
    <link href="/2024/04/18/RHEL-%E5%AE%89%E8%A3%85-Zabbix/"/>
    <url>/2024/04/18/RHEL-%E5%AE%89%E8%A3%85-Zabbix/</url>
    
    <content type="html"><![CDATA[<h2 id="RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例"><a href="#RHEL-安装-Zabbix-以-Fedora-Linux-39-Server-Edition-为例" class="headerlink" title="RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)"></a>RHEL 安装 Zabbix(以 Fedora Linux 39 Server Edition 为例)</h2><span id="more"></span><h2 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="1.Prepare"></a>1.Prepare</h2><table><thead><tr><th align="center">Zabbix Version</th><th align="center">OS Distribution</th><th align="center">Zabbix Component</th><th align="center">DB</th><th align="center">Web Server</th></tr></thead><tbody><tr><td align="center">6.0 LTS</td><td align="center">Red Hat Enterprise Linux</td><td align="center">Server, Frontend, Agent</td><td align="center">MariaDB</td><td align="center">Nginx</td></tr></tbody></table><h2 id="2-Install-Zabbix-repository"><a href="#2-Install-Zabbix-repository" class="headerlink" title="2.Install Zabbix repository"></a>2.Install Zabbix repository</h2><p>禁用 EPEL 提供的 Zabbix 软件包(如果已安装)。编辑文件 &#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo 并添加以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[epel]<br>...<br>excludepkgs=zabbix*<br></code></pre></td></tr></table></figure><p>继续安装 zabbix 存储库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># rpm -Uvh https://repo.zabbix.com/zabbix/6.0/rhel/9/x86_64/zabbix-release-6.0-4.el9.noarch.rpm</span><br>[root@fedora:~]<span class="hljs-comment"># dnf clean all</span><br></code></pre></td></tr></table></figure><h2 id="3-Install-Zabbix-server-frontend-agent"><a href="#3-Install-Zabbix-server-frontend-agent" class="headerlink" title="3.Install Zabbix server, frontend, agent"></a>3.Install Zabbix server, frontend, agent</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># dnf install zabbix-server-mysql zabbix-web-mysql zabbix-nginx-conf zabbix-sql-scripts zabbix-selinux-policy zabbix-agent</span><br></code></pre></td></tr></table></figure><h2 id="4-Create-initial-database"><a href="#4-Create-initial-database" class="headerlink" title="4.Create initial database"></a>4.Create initial database</h2><p>请确保已启动并运行数据库服务器。<br>在数据库主机上运行以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># mysql -uroot -p</span><br>password<br>mysql&gt; create database zabbix character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_bin;<br>mysql&gt; create user zabbix@localhost identified by <span class="hljs-string">&#x27;&lt;your_password&gt;&#x27;</span>;<br>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 1;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><p>在 Zabbix Server 主机上，导入初始模式和数据。系统将提示您输入新创建的密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -uzabbix -p zabbix</span><br></code></pre></td></tr></table></figure><p>导入数据库后禁用 log_bin_trust_function_creators 选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># mysql -uroot -p</span><br>password<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 0;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h2 id="5-Configure-the-database-for-Zabbix-server"><a href="#5-Configure-the-database-for-Zabbix-server" class="headerlink" title="5.Configure the database for Zabbix server"></a>5.Configure the database for Zabbix server</h2><p>编辑文件 &#x2F;etc&#x2F;zabbix_server.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DBPassword=&lt;your_password&gt;<br></code></pre></td></tr></table></figure><h2 id="6-Configure-PHP-for-Zabbix-frontend"><a href="#6-Configure-PHP-for-Zabbix-frontend" class="headerlink" title="6.Configure PHP for Zabbix frontend"></a>6.Configure PHP for Zabbix frontend</h2><p>编辑文件 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;zabbix.conf 取消注释并设置 ‘listen’ 和 ‘server_name’。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># listen 8080;</span><br><span class="hljs-comment"># server_name example.com;</span><br></code></pre></td></tr></table></figure><h2 id="7-Start-Zabbix-server-and-agent-processes"><a href="#7-Start-Zabbix-server-and-agent-processes" class="headerlink" title="7.Start Zabbix server and agent processes"></a>7.Start Zabbix server and agent processes</h2><p>启动 Zabbix Server 和 agent 进程，并使其在系统启动时启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fedora:~]<span class="hljs-comment"># systemctl enable zabbix-server zabbix-agent nginx php-fpm --now</span><br></code></pre></td></tr></table></figure><h2 id="8-Open-Zabbix-UI-web-page"><a href="#8-Open-Zabbix-UI-web-page" class="headerlink" title="8.Open Zabbix UI web page"></a>8.Open Zabbix UI web page</h2><p>使用 Nginx 时 Zabbix UI 的 URL 取决于您进行的配置更改。</p>]]></content>
    
    
    <categories>
      
      <category>GNU/Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ansible 快速开始</title>
    <link href="/2024/04/13/ansible-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <url>/2024/04/13/ansible-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h2><p>准备至少三台虚拟机，我的环境如下：</p><table><thead><tr><th align="center">OS</th><th align="center">IP</th><th align="center">hostname</th></tr></thead><tbody><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.130</td><td align="center">fd-master</td></tr><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.131</td><td align="center">fd-node1</td></tr><tr><td align="center">Fedora Linux 39 (Server Edition)</td><td align="center">10.1.1.132</td><td align="center">fd-node2</td></tr></tbody></table><h2 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h2><p><code>fd-master</code> 安装ansible，并配置 <code>fd-node1</code> 和 <code>fd-node2</code> 的ssh免密登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]<span class="hljs-comment"># dnf install -y ansible</span><br>[root@fd-master:~]<span class="hljs-comment"># ssh-keygen -t ed25519 -C &quot;&lt;your_email&gt;&quot;</span><br>[root@fd-master:~]<span class="hljs-comment"># ssh-copy-id -i /root/.ssh/id_ed25519.pub root@10.1.1.131</span><br>[root@fd-master:~]<span class="hljs-comment"># ssh-copy-id -i /root/.ssh/id_ed25519.pub root@10.1.1.132</span><br></code></pre></td></tr></table></figure><p>编辑 <code>fd-master</code> 的 <code>hosts</code> 文件，添加 <code>fd-node1</code> 和 <code>fd-node2</code> 的IP地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]<span class="hljs-comment"># vim /etc/hosts</span><br>10.1.1.130 ansible<br>10.1.1.131 node1<br>10.1.1.132 node2<br></code></pre></td></tr></table></figure><h2 id="3-ansible-相关配置"><a href="#3-ansible-相关配置" class="headerlink" title="3.ansible 相关配置"></a>3.ansible 相关配置</h2><p>把 <code>fd-node1</code> 和 <code>fd-node2</code> 两个主机添加进 <code>fd-master</code> 的主机列表里，两主机同属ws组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@fd-master:~]<span class="hljs-comment"># vim /etc/ansible/hosts</span><br>[ws]<br>node[1:2]<br></code></pre></td></tr></table></figure><h2 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4.测试连接"></a>4.测试连接</h2><p>测试 <code>fd-node1</code> 连通性<br><img src=/res/post/ansible/node1_ping.jpg width=100%></p><p>测试 <code>ws</code> 组连通性<br><img src=/res/post/ansible/ws_ping.jpg width=100%></p><h2 id="5-示例用法"><a href="#5-示例用法" class="headerlink" title="5.示例用法"></a>5.示例用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从 fd-master 拷贝文件到 ws 组中的所有机器，并设置权限，开启备份(即不覆盖原文件)</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m copy -a &#x27;src=/path/to/source dest=/path/to/destination owner=&lt;user_name&gt; group=&lt;group_name&gt; mode=777 backup=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建用户(lilin)</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m user -a &#x27;name=lilin state=present&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器为用户(lilin)设置密码</span><br>[root@fd-master:~]<span class="hljs-comment"># echo &quot;password&quot; | openssl passwd -1 -stdin</span><br>$1$nvX4skcy<span class="hljs-variable">$EoJIwBB6WOf9keRecRJtq</span>.<br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m user -a &#x27;name=lilin password=&quot;$1$nvX4skcy$EoJIwBB6WOf9keRecRJtq.&quot;&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器为用户(lilin)设置登录 shell (nologin意为禁止登录)</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m user -a &#x27;name=lilin shell=/sbin/nologin append=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器删除用户(lilin)</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m user -a &#x27;name=lilin state=absent&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器更新系统</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m dnf -a &#x27;name=&quot;*&quot; state=latest&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器安装 nginx</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m dnf -a &#x27;name=&quot;nginx&quot; state=latest&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器卸载 nginx</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m dnf -a &#x27;name=&quot;nginx&quot; state=absent&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器开启 nginx 服务并设置开机自启</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m service -a &#x27;name=nginx state=started enabled=yes&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建文件</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m file -a &#x27;path=/path/to/file mode=777 state=touch&#x27;</span><br><br><span class="hljs-comment"># ws 组中的所有机器创建文件夹</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m file -a &#x27;path=/path/to/directory mode=777 state=directory&#x27;</span><br><br><span class="hljs-comment"># node1 主机信息收集</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible node1 -m setup</span><br><br><span class="hljs-comment"># node1 主机 ipv4 地址信息</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible node1 -m setup -a &#x27;filter=ansible_all_ipv4_addresses&#x27;</span><br><br><span class="hljs-comment"># 获取 ws 组中的所有机器的 hostname 信息(通过 shell 模块)</span><br>[root@fd-master:~]<span class="hljs-comment"># ansible ws -m shell -a &#x27;hostname&#x27; -o</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>GNU/Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spotify on Arch Linux</title>
    <link href="/2024/03/12/Spotify-on-Arch-Linux/"/>
    <url>/2024/03/12/Spotify-on-Arch-Linux/</url>
    
    <content type="html"><![CDATA[<h2 id="0-效果展示"><a href="#0-效果展示" class="headerlink" title="0.效果展示"></a>0.效果展示</h2><img src=/res/post/spotify/spotify.png width=100% /><h2 id="1-安装所有需要的软件包"><a href="#1-安装所有需要的软件包" class="headerlink" title="1.安装所有需要的软件包"></a>1.安装所有需要的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S spotify spotx-git spicetify-cli<br></code></pre></td></tr></table></figure><h2 id="2-自定义主题"><a href="#2-自定义主题" class="headerlink" title="2.自定义主题"></a>2.自定义主题</h2><blockquote><p>注意: 先执行 <code>spotx</code>，再更改主题。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取官方的主题仓库(当然你也可以自己找其它的)</span><br>git <span class="hljs-built_in">clone</span> --depth=1 https://github.com/spicetify/spicetify-themes.git<br><br><span class="hljs-comment"># 复制所有主题到spicetify指定的位置</span><br><span class="hljs-built_in">cd</span> spicetify-themes<br><span class="hljs-built_in">cp</span> -r * <span class="hljs-variable">$HOME</span>/.config/spicetify/Themes<br><br><span class="hljs-comment"># 执行spicetify生成配置文件</span><br><br><span class="hljs-comment"># 配置主题和配色(也可以直接修改配置文件~/.config/spicetify/config-xpui.ini)</span><br>spicetify config current_theme THEME_NAME<br>spicetify config color_scheme SCHEME_NAME<br><br><span class="hljs-comment"># 或许你还需要配置这个选项</span><br>prefs_path             = <span class="hljs-variable">$HOME</span>/.config/spotify/prefs<br><br><span class="hljs-comment"># 应用配置</span><br>spicetify apply<br></code></pre></td></tr></table></figure><h2 id="have-a-fun-😊"><a href="#have-a-fun-😊" class="headerlink" title="have a fun! 😊"></a>have a fun! 😊</h2>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spotify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在本地启动并运行大型语言模型</title>
    <link href="/2024/03/09/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/03/09/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8%E5%B9%B6%E8%BF%90%E8%A1%8C%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="ollama"><a href="#ollama" class="headerlink" title="ollama"></a><a href="https://ollama.com/">ollama</a></h2><p>Run Llama 2, Code Llama, and other models. Customize and create your own.<br>运行 Llama 2、Code Llama 和其他模型。自定义并创建您自己的。</p><h2 id="installation"><a href="#installation" class="headerlink" title="installation"></a>installation</h2><p><a href="https://ollama.com/download/Ollama-darwin.zip">macOS</a><br><a href="https://ollama.com/download/OllamaSetup.exe">Windows preview</a><br>Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://ollama.com/install.sh | sh<br></code></pre></td></tr></table></figure><p>Arch Linux:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S ollama<br><span class="hljs-comment"># or</span><br>sudo pacman -S ollama-cuda<br></code></pre></td></tr></table></figure><h2 id="Docker-and-cpu-only"><a href="#Docker-and-cpu-only" class="headerlink" title="Docker and cpu only"></a>Docker and cpu only</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># CPU only</span><br>docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama<br><br><span class="hljs-comment"># Run model locally</span><br>docker <span class="hljs-built_in">exec</span> -it ollama ollama run llama2<br><br></code></pre></td></tr></table></figure><h2 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h2><p>本人Intel核显，视频是在朋友的电脑上运行的。</p><video id="video" width="100%" height="100%" controls="" preload="none" poster="/res/post/ollama/eos_ollama.png">      <source id="show" src="/res/post/ollama/eos_ollama.mp4" type="video/mp4"></videos>]]></content>
    
    
    <categories>
      
      <category>Share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ollama</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内核无法加载,没有这个文件</title>
    <link href="/2024/02/25/%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD-%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <url>/2024/02/25/%E5%86%85%E6%A0%B8%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD-%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h2><p>开学前想最后更新一次，更新内容包含了 linux, linux-zen。</p><p>下载了快2个G的内容，就在生成新的内核映像(或者叫镜像)时，kde 突然锁屏了，紧跟着光标也不动了，没错，突然死机。</p><h2 id="2-经过"><a href="#2-经过" class="headerlink" title="2.经过"></a>2.经过</h2><p>到了学校，再次开机时，就如标题所说。</p><p>从始至终，我是没有慌的。作为一名经验丰富的 Archer, 首先打开了google😅。输入关键字搜索后，得到了一些灵感，或许可以通过重装解决。</p><p>当然不是重装整个系统了。</p><ol><li>使开机进入 archiso 并连接网络</li><li>挂载系统，以我的为例:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/sda2 /mnt<br>mount /dev/sda1 /mnt/boot<br>mount /dev/sdb /home<br><span class="hljs-comment"># 第三个似乎有点多余😅</span><br></code></pre></td></tr></table></figure><ol start="3"><li>重装 linux 和 linux-zen</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt linux linux-zen<br><span class="hljs-comment"># 其实我当时是chroot进去用的 pacman -S linux linux-zen，不是特别清楚 pacstrap 这个东西😅</span><br></code></pre></td></tr></table></figure><h2 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h2><p>结果我就写下了这篇博客</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 安装 qemu</title>
    <link href="/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/"/>
    <url>/2024/01/20/Arch-Linux-%E5%AE%89%E8%A3%85-qemu/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h2><p>KVM 需要主机支持虚拟化，通过下列命令查看是否支持(虚拟化支持可在 BIOS 中开启)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ LC_ALL=C lscpu | grep Virtualization<br></code></pre></td></tr></table></figure><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ pacman -S qemu libvirt ovmf virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat ebtables iptables libguestfs<br></code></pre></td></tr></table></figure><h2 id="3-启动-KVM-libvirt-服务"><a href="#3-启动-KVM-libvirt-服务" class="headerlink" title="3.启动 KVM libvirt 服务"></a>3.启动 KVM libvirt 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ sudo systemctl <span class="hljs-built_in">enable</span> --now libvirtd.service<br></code></pre></td></tr></table></figure><h2 id="4-普通用户使用-KVM"><a href="#4-普通用户使用-KVM" class="headerlink" title="4.普通用户使用 KVM"></a>4.普通用户使用 KVM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ sudo vim /etc/libvirt/libvirtd.conf<br><br>85 unix_sock_group = <span class="hljs-string">&quot;libvirt&quot;</span><br>108 unix_sock_rw_perms = <span class="hljs-string">&quot;0770&quot;</span><br><br>❯ sudo usermod -aG libvirt $(<span class="hljs-built_in">whoami</span>)<br>❯ sudo systemctl restart libvirtd.service<br></code></pre></td></tr></table></figure><h2 id="5-嵌套虚拟化"><a href="#5-嵌套虚拟化" class="headerlink" title="5.嵌套虚拟化"></a>5.嵌套虚拟化</h2><p>不讨论</p>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qemu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raspberry Pi 4 安装系统</title>
    <link href="/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/12/12/Raspberry-Pi-4-%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验"><a href="#最近入手了一个树莓派4B-4GB-分享一下在安装操作系统时的经验" class="headerlink" title="最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验"></a>最近入手了一个树莓派4B 4GB, 分享一下在安装操作系统时的经验</h2><span id="more"></span><h2 id="1-官方推荐方式"><a href="#1-官方推荐方式" class="headerlink" title="1.官方推荐方式"></a>1.官方推荐方式</h2><p>下载官方的烧写工具，它会自动替你下载镜像文件，还支持添加一些自定义配置，比如用户名和密码，wifi 和 ssh.</p><p>适合只有一台电脑和一个树莓派的情况.</p><blockquote><p>我是因为校园网的原因，只能使用电脑开热点，让树莓派去连.</p></blockquote><p>如果你在 GNU&#x2F;Linux 下开热点遇到困难，可以参考我的这个脚本(很久之前网上找的)，如果你有更好的方式，也欢迎在评论区留言.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo iw phy phy0 interface add wlan0_ap <span class="hljs-built_in">type</span> managed addr 12:34:56:ab:<span class="hljs-built_in">cd</span>:ef<br><br>sudo create_ap -c 11 wlan0_ap wlan0 NAME PASSWD &gt;/dev/null &amp;<br></code></pre></td></tr></table></figure><h2 id="2-安装其它的-GNU-Linux-ARM-版本"><a href="#2-安装其它的-GNU-Linux-ARM-版本" class="headerlink" title="2.安装其它的 GNU&#x2F;Linux ARM 版本"></a>2.安装其它的 GNU&#x2F;Linux ARM 版本</h2><p>文档都很详细，我就不多说了.</p><h3 id="Kali-Linux-ARM"><a href="#Kali-Linux-ARM" class="headerlink" title="Kali Linux ARM"></a><a href="https://www.kali.org/docs/arm/raspberry-pi-4/">Kali Linux ARM</a></h3><h3 id="Arch-Linux-ARM"><a href="#Arch-Linux-ARM" class="headerlink" title="Arch Linux ARM"></a><a href="https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-4">Arch Linux ARM</a></h3><h2 id="3-TODO"><a href="#3-TODO" class="headerlink" title="3.TODO"></a>3.TODO</h2><p>32bit 和 64bit 的系统都试过，目前还没有通过HDMI接显示器进入过桌面环境.</p><p>放假回家之后树莓派能直接插路由器上，就能装 Arch Linux ARM 了😀.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Raspberry Pi 4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能技术 lab4(MNIST手写数字识别)</title>
    <link href="/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <url>/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab4-MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python another_lab4/main.py<br></code></pre></td></tr></table></figure><blockquote><p>another_lab4&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> torchvision.datasets <span class="hljs-keyword">import</span> MNIST<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(torch.nn.Module):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.fc1 = torch.nn.Linear(<span class="hljs-number">28</span>*<span class="hljs-number">28</span>, <span class="hljs-number">64</span>)<br>        self.fc2 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        self.fc3 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>        self.fc4 = torch.nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = torch.nn.functional.relu(self.fc1(x))<br>        x = torch.nn.functional.relu(self.fc2(x))<br>        x = torch.nn.functional.relu(self.fc3(x))<br>        x = torch.nn.functional.log_softmax(self.fc4(x), dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_loader</span>(<span class="hljs-params">is_train</span>):<br>    to_tensor = transforms.Compose([transforms.ToTensor()])<br>    data_set = MNIST(<span class="hljs-string">&quot;&quot;</span>, is_train, transform=to_tensor, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> DataLoader(data_set, batch_size=<span class="hljs-number">15</span>, shuffle=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate</span>(<span class="hljs-params">test_data, net</span>):<br>    n_correct = <span class="hljs-number">0</span><br>    n_total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> test_data:<br>            outputs = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            <span class="hljs-keyword">for</span> i, output <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(outputs):<br>                <span class="hljs-keyword">if</span> torch.argmax(output) == y[i]:<br>                    n_correct += <span class="hljs-number">1</span><br>                n_total += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> n_correct / n_total<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    train_data = get_data_loader(is_train=<span class="hljs-literal">True</span>)<br>    test_data = get_data_loader(is_train=<span class="hljs-literal">False</span>)<br>    net = Net()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial accuracy:&quot;</span>, evaluate(test_data, net))<br>    optimizer = torch.optim.Adam(net.parameters(), lr=<span class="hljs-number">0.001</span>)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> train_data:<br>            net.zero_grad()<br>            output = net.forward(x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>))<br>            loss = torch.nn.functional.nll_loss(output, y)<br>            loss.backward()<br>            optimizer.step()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch&quot;</span>, epoch, <span class="hljs-string">&quot;accuracy:&quot;</span>, evaluate(test_data, net))<br><br>    <span class="hljs-keyword">for</span> (n, (x, _)) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(test_data):<br>        <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">break</span><br>        predict = torch.argmax(net.forward(x[<span class="hljs-number">0</span>].view(-<span class="hljs-number">1</span>, <span class="hljs-number">28</span>*<span class="hljs-number">28</span>)))<br>        plt.figure(n)<br>        plt.imshow(x[<span class="hljs-number">0</span>].view(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>))<br>        plt.title(<span class="hljs-string">&quot;prediction: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(predict)))<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/another_lab4-result.jpg width=100% />]]></content>
    
    
    <categories>
      
      <category>人工智能技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能技术 lab3(基于线性回归的预测)</title>
    <link href="/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/"/>
    <url>/2023/11/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab3-%E5%9F%BA%E4%BA%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab3/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab3&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_california_housing<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> linearregression<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-comment"># 加载加利福尼亚州房价数据集</span><br>    housing_22 = fetch_california_housing()<br>    x_22, y_22 = housing_22.data, housing_22.target<br><br>    <span class="hljs-comment"># 划分数据集为训练集和测试集</span><br>    x_train_22, x_test_22, y_train_22, y_test_22 = train_test_split(<br>        x_22, y_22, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br>    <span class="hljs-comment"># 初始化线性回归模型</span><br>    model_22 = linearregression()<br><br>    <span class="hljs-comment"># 训练模型</span><br>    model_22.fit(x_train_22, y_train_22)<br><br>    <span class="hljs-comment"># 在测试集上进行预测</span><br>    y_pred_22 = model_22.predict(x_test_22)<br><br>    <span class="hljs-comment"># 评估模型性能</span><br>    mse_22 = mean_squared_error(y_test_22, y_pred_22)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mean squared error on test set: <span class="hljs-subst">&#123;mse_22&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 绘制真实值与预测值的对比图</span><br>    plt.scatter(y_test_22, y_pred_22)<br>    plt.xlabel(<span class="hljs-string">&#x27;true values&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;predictions&#x27;</span>)<br>    plt.title(<span class="hljs-string">&#x27;true values vs. predictions&#x27;</span>)<br>    plt.show()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab3-result.jpg width=100% />]]></content>
    
    
    <categories>
      
      <category>人工智能技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能技术 lab2(K-Means)</title>
    <link href="/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/"/>
    <url>/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab2(K-Means)/</url>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab2/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab2&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_digits.html</span><br><br><span class="hljs-comment"># 导入必要的库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_digits<br><span class="hljs-keyword">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 使用load_digits()加载数字数据集，并提取特征和标签。确定了样本数、特征数和唯一标签的数量。</span><br>data_22, labels_22 = load_digits(return_X_y=<span class="hljs-literal">True</span>)<br>(n_samples, n_features), n_digits_22 = data_22.shape, np.unique(labels_22).size<br><br><span class="hljs-comment"># 使用PCA将数据的维度减少为2个，以便进行可视化。</span><br>reduced_data_22 = PCA(n_components=<span class="hljs-number">2</span>).fit_transform(data_22)<br><br><span class="hljs-comment"># 在减少的数据上应用K均值，并创建一个2D散点图以可视化聚类。</span><br>kmeans_22 = KMeans(init=<span class="hljs-string">&quot;k-means++&quot;</span>, n_clusters=n_digits_22, n_init=<span class="hljs-number">4</span>)<br>kmeans_22.fit(reduced_data_22)<br><br><span class="hljs-comment"># 定义一个网格中的点的步长</span><br>h = <span class="hljs-number">0.02</span><br><br>x_min, x_max = reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>y_min, y_max = reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, reduced_data_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 生成一个网格，以便在图中可视化聚类的结果</span><br>xx_22, yy_22 = np.meshgrid(np.arange(x_min, x_max, h),<br>                           np.arange(y_min, y_max, h))<br><br>Z = kmeans_22.predict(np.c_[xx_22.ravel(), yy_22.ravel()])<br><br>Z = Z.reshape(xx_22.shape)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.clf()<br><br><span class="hljs-comment"># 在2D空间上绘制聚类结果，用白色十字标记聚类中心。</span><br>plt.imshow(Z,<br>           interpolation=<span class="hljs-string">&quot;nearest&quot;</span>,<br>           extent=(xx_22.<span class="hljs-built_in">min</span>(),<br>                   xx_22.<span class="hljs-built_in">max</span>(),<br>                   yy_22.<span class="hljs-built_in">min</span>(),<br>                   yy_22.<span class="hljs-built_in">max</span>()),<br>           cmap=plt.cm.Paired,<br>           aspect=<span class="hljs-string">&quot;auto&quot;</span>,<br>           origin=<span class="hljs-string">&quot;lower&quot;</span>,)<br><br>plt.plot(reduced_data_22[:, <span class="hljs-number">0</span>], reduced_data_22[:, <span class="hljs-number">1</span>], <span class="hljs-string">&quot;k.&quot;</span>, markersize=<span class="hljs-number">2</span>)<br>centroids = kmeans_22.cluster_centers_<br>plt.scatter(centroids[:, <span class="hljs-number">0</span>],<br>            centroids[:, <span class="hljs-number">1</span>],<br>            marker=<span class="hljs-string">&quot;x&quot;</span>,<br>            s=<span class="hljs-number">169</span>,<br>            linewidths=<span class="hljs-number">3</span>,<br>            color=<span class="hljs-string">&quot;w&quot;</span>,<br>            zorder=<span class="hljs-number">10</span>)<br>plt.title(<br>    <span class="hljs-string">&quot;K-means clustering on the digits dataset (PCA-reduced data)\n&quot;</span><br>    <span class="hljs-string">&quot;Centroids are marked with white cross&quot;</span><br>)<br>plt.xlim(x_min, x_max)<br>plt.ylim(y_min, y_max)<br>plt.xticks(())<br>plt.yticks(())<br><br><span class="hljs-comment"># 显示绘图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab2-result.jpg width=100% />]]></content>
    
    
    <categories>
      
      <category>人工智能技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人工智能技术 lab1(KNN)</title>
    <link href="/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/"/>
    <url>/2023/11/16/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%8A%80%E6%9C%AF-lab1(KNN)/</url>
    
    <content type="html"><![CDATA[<h2 id="source-code-and-requirements"><a href="#source-code-and-requirements" class="headerlink" title="source code and requirements"></a><a href="https://github.com/Lilinzta/ai">source code and requirements</a></h2><h2 id="0-实验环境"><a href="#0-实验环境" class="headerlink" title="0.实验环境"></a>0.实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OS: Arch Linux(rolling)<br>LANG: Python 3.11.5<br></code></pre></td></tr></table></figure><h2 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv venv<br></code></pre></td></tr></table></figure><h2 id="2-激活虚拟环境"><a href="#2-激活虚拟环境" class="headerlink" title="2.激活虚拟环境"></a>2.激活虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> venv/bin/activate<br></code></pre></td></tr></table></figure><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3.安装依赖"></a>3.安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python lab1/main.py<br></code></pre></td></tr></table></figure><blockquote><p>lab1&#x2F;main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source: https://tjxlab.gitbooks.io/bigdata/content/da-shu-ju-fen-xi-yu-wa-jue-shi-yan/shi-yanyi-ff1a-knn-fen-lei-shi-yan.html</span><br><br><span class="hljs-comment"># numpy 库用于科学计算，matplotlib 库用于绘图</span><br><span class="hljs-comment"># Scikit-learn 库中的 neighbors 模块和 datasets 模块分别包含KNN分类器和一些常用的数据集</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib.colors <span class="hljs-keyword">import</span> ListedColormap<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> neighbors, datasets<br><br><span class="hljs-comment"># 定义邻居个数，设定KNN算法中邻居个数为15</span><br>n_neighbors_22 = <span class="hljs-number">15</span><br><br><span class="hljs-comment"># 加载iris数据集，使用 Scikit-learn 中的 load_iris() 函数加载鸢尾花数据集</span><br>iris_22 = datasets.load_iris()<br><br><span class="hljs-comment"># 选择特征，使用了鸢尾花数据集中的前两个特征</span><br>X_22 = iris_22.data[:, :<span class="hljs-number">2</span>]<br>y_22 = iris_22.target<br><br><span class="hljs-comment"># 设置步长和创建颜色映射，h 是在可视化决策边界时使用的步长</span><br><span class="hljs-comment"># cmap_light 和 cmap_bold 是两个颜色映射，用于可视化轻量级背景和加粗版背景颜色</span><br>h_22 = <span class="hljs-number">.02</span>  <span class="hljs-comment"># step size in the mesh</span><br>cmap_light = ListedColormap([<span class="hljs-string">&#x27;#FFAAAA&#x27;</span>, <span class="hljs-string">&#x27;#AAFFAA&#x27;</span>, <span class="hljs-string">&#x27;#AAAAFF&#x27;</span>])<br>cmap_bold = ListedColormap([<span class="hljs-string">&#x27;#FF0000&#x27;</span>, <span class="hljs-string">&#x27;#00FF00&#x27;</span>, <span class="hljs-string">&#x27;#0000FF&#x27;</span>])<br><br><span class="hljs-comment"># 循环进行KNN分类和可视化</span><br><span class="hljs-keyword">for</span> weights <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;uniform&#x27;</span>, <span class="hljs-string">&#x27;distance&#x27;</span>]:<br>    <span class="hljs-comment"># 使用循环，分别使用两种权重（uniform和distance）创建KNN分类器实例，并对数据进行拟合。</span><br>    clf = neighbors.KNeighborsClassifier(n_neighbors_22, weights=weights)<br>    clf.fit(X_22, y_22)<br><br>    <span class="hljs-comment"># 为了绘制决策边界，定义一个网格，并在网格上计算模型的预测值</span><br>    x_min, x_max = X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">0</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    y_min, y_max = X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">min</span>() - <span class="hljs-number">1</span>, X_22[:, <span class="hljs-number">1</span>].<span class="hljs-built_in">max</span>() + <span class="hljs-number">1</span><br>    xx, yy = np.meshgrid(np.arange(x_min, x_max, h_22),<br>                         np.arange(y_min, y_max, h_22))<br><br>    <span class="hljs-comment"># 使用模型对网格中的点进行预测</span><br>    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])<br><br>    <span class="hljs-comment"># 将预测结果以颜色的形式绘制在网格上</span><br>    Z = Z.reshape(xx.shape)<br>    plt.figure()<br>    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)<br><br>    <span class="hljs-comment"># 将训练数据集上的点用散点图表示，并显示图表的标题</span><br>    plt.scatter(X_22[:, <span class="hljs-number">0</span>], X_22[:, <span class="hljs-number">1</span>], c=y_22, cmap=cmap_bold,<br>                edgecolor=<span class="hljs-string">&#x27;k&#x27;</span>, s=<span class="hljs-number">20</span>)<br>    plt.xlim(xx.<span class="hljs-built_in">min</span>(), xx.<span class="hljs-built_in">max</span>())<br>    plt.ylim(yy.<span class="hljs-built_in">min</span>(), yy.<span class="hljs-built_in">max</span>())<br>    plt.title(<span class="hljs-string">&quot;3-Class classification (k = %i, weights = &#x27;%s&#x27;)&quot;</span><br>              % (n_neighbors_22, weights))<br><br><span class="hljs-comment"># 最后，通过 plt.show() 将图形显示出来</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5.实验结果"></a>5.实验结果</h2><img src=/res/post/ai/lab1-result.jpg width=100% />]]></content>
    
    
    <categories>
      
      <category>人工智能技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 切换 java 环境</title>
    <link href="/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/10/23/Arch-Linux-%E5%88%87%E6%8D%A2-java-%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="archlinux-java"><a href="#archlinux-java" class="headerlink" title="archlinux-java"></a>archlinux-java</h2><p>输出如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java --<span class="hljs-built_in">help</span><br>archlinux-java &lt;COMMAND&gt;<br><br>COMMAND:<br>statusList installed Java environments and enabled one<br>getReturn the short name of the Java environment <span class="hljs-built_in">set</span> as default<br><span class="hljs-built_in">set</span> &lt;JAVA_ENV&gt;Force &lt;JAVA_ENV&gt; as default<br><span class="hljs-built_in">unset</span>Unset current default Java environment<br>fixFix an invalid/broken default Java environment configuration<br></code></pre></td></tr></table></figure><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>获取当前设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java get<br>java-21-openjdk<br></code></pre></td></tr></table></figure><p>查看所有可用 Java 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ archlinux-java status<br>Available Java environments:<br>  java-11-openjdk<br>  java-17-openjdk<br>  java-21-openjdk (default)<br>  java-8-openjdk<br></code></pre></td></tr></table></figure><p>要更改默认设置，请使用 root 权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ sudo archlinux-java <span class="hljs-built_in">set</span> java-17-openjdk<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机教学中消失的一个学期</title>
    <link href="/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/"/>
    <url>/2023/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%95%99%E5%AD%A6%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%A6%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>正如课程名字所言：“计算机教学中消失的一个学期”，这门课将会教会你许多大学的课堂上不会涉及但却对每个 CSer 无比重要的工具或者知识点。</p><span id="more"></span><p>例如 Shell 编程、命令行配置、Git、Vim、tmux、ssh 等等。如果你是一个计算机小白，那么非常建议你学习一下这门课。</p><p>学习时长：10小时</p><h2 id="课程资源"><a href="#课程资源" class="headerlink" title="课程资源"></a>课程资源</h2><ul><li>课程网站：<a href="https://missing.csail.mit.edu/2020/">https://missing.csail.mit.edu/2020/</a></li><li>课程中文网站: <a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a></li><li>课程视频：<a href="https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J">https://www.youtube.com/playlist?list=PLyzOVJj3bHQuloKGG59rS43e29ro7I57J</a></li><li>课程中文字幕视频：<ul><li>Missing<em>Semi</em>中译组（未完结）：<a href="https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/1010983811?spm_id_from=333.337.search-card.all.click</a></li><li>刘黑黑a（已完结）：<a href="https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click">https://space.bilibili.com/518734451?spm_id_from=333.337.search-card.all.click</a></li></ul></li><li>课程作业：一些随堂小练习，具体见课程网站。<blockquote><p>source: <a href="https://csdiy.wiki/">cs自学指南</a></p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell_gpt</title>
    <link href="/2023/08/26/shell-gpt/"/>
    <url>/2023/08/26/shell-gpt/</url>
    
    <content type="html"><![CDATA[<h2 id="由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务"><a href="#由-GPT-3-和-GPT-4-提供支持的命令行生产力工具将帮助您更快、更高效地完成任务" class="headerlink" title="由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务"></a>由 GPT-3 和 GPT-4 提供支持的命令行生产力工具将帮助您更快、更高效地完成任务</h2><span id="more"></span><blockquote><p>Tips: 下面都是废话，可以直接看这两个链接：<a href="https://github.com/chatanywhere/GPT_API_free">GPT_API_free</a>和<a href="https://github.com/TheR1D/shell_gpt">shell_gpt</a></p></blockquote><h2 id="获取一个免费的GPT-API"><a href="#获取一个免费的GPT-API" class="headerlink" title="获取一个免费的GPT_API"></a>获取一个免费的GPT_API</h2><p>点击第一个链接，获取免费的 GPT_API，当然也可以付费获得更好的体验。</p><p>与官方的 API 使用步骤基本相同，需要额外设置代理，具体使用可以详细阅读文档。</p><h2 id="shell-gpt-使用-GPT-API-free"><a href="#shell-gpt-使用-GPT-API-free" class="headerlink" title="shell_gpt 使用 GPT_API_free"></a>shell_gpt 使用 GPT_API_free</h2><p>第二个链接，使用方法说的很详细。配置文件在<code>$HOME/.config/shell_gpt/.sgptrc</code>,需要配置(修改)以下两个变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">OPENAI_API_KEY=领取的免费API(一般为 sk- 开头)<br>OPENAI_API_HOST=https://api.chatanywhere.cn 或者 https://api.chatanywhere.com.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Desktop Cube</title>
    <link href="/2023/08/16/Desktop-Cube/"/>
    <url>/2023/08/16/Desktop-Cube/</url>
    
    <content type="html"><![CDATA[<h2 id="虚拟桌面切换特效"><a href="#虚拟桌面切换特效" class="headerlink" title="虚拟桌面切换特效"></a>虚拟桌面切换特效</h2><span id="more"></span><p><a href="https://github.com/zzag/kwin-effects-cube">KDE</a><br><a href="https://github.com/Schneegans/Desktop-Cube">GNOME</a></p><p>好像 GNOME 的可玩性更高一点(仅指这个扩展)，改天试试 Debian+GNOME。</p><h2 id="Install-for-KDE-and-…"><a href="#Install-for-KDE-and-…" class="headerlink" title="Install for KDE and …"></a>Install for KDE and …</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S kwin-effects-cube<br></code></pre></td></tr></table></figure><p>安装完后依次点击 <code>工作区行为 -&gt; 桌面特效 -&gt; Cube</code> 进行设置</p><h2 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h2><video id="video" width="100%" height="100%" controls="" preload="none" poster="/res/post/Desktop-Cube/Desktop-Cube.jpg">      <source id="show" src="/res/post/Desktop-Cube/Desktop-Cube.mp4" type="video/mp4"></videos>]]></content>
    
    
    
    <tags>
      
      <tag>KDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neovim Switcher</title>
    <link href="/2023/08/15/Neovim-Switcher/"/>
    <url>/2023/08/15/Neovim-Switcher/</url>
    
    <content type="html"><![CDATA[<h2 id="在多种-Neovime-配置之间无缝切换"><a href="#在多种-Neovime-配置之间无缝切换" class="headerlink" title="在多种 Neovime 配置之间无缝切换"></a>在多种 Neovime 配置之间无缝切换</h2><span id="more"></span><blockquote><p><a href="https://www.youtube.com/watch?v=LkHjJlSgKZY">视频介绍在这里</a><br><a href="https://gist.github.com/elijahmanor/b279553c0132bfad7eae23e34ceb593b">不喜欢看视频?</a></p></blockquote><p>zsh 用户在 .zshrc 加入以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> nvim-lazy=<span class="hljs-string">&quot;NVIM_APPNAME=LazyVim nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-kick=<span class="hljs-string">&quot;NVIM_APPNAME=kickstart nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-chad=<span class="hljs-string">&quot;NVIM_APPNAME=NvChad nvim&quot;</span><br><span class="hljs-built_in">alias</span> nvim-astro=<span class="hljs-string">&quot;NVIM_APPNAME=AstroNvim nvim&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">nvims</span></span>() &#123;<br>  items=(<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-string">&quot;kickstart&quot;</span> <span class="hljs-string">&quot;LazyVim&quot;</span> <span class="hljs-string">&quot;NvChad&quot;</span> <span class="hljs-string">&quot;AstroNvim&quot;</span>)<br>  config=$(<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;items[@]&#125;</span>&quot;</span> | fzf --prompt=<span class="hljs-string">&quot; Neovim Config ❯ &quot;</span> --height=~50% --layout=reverse --border --exit-0)<br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-variable">$config</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Nothing selected&quot;</span><br>    <span class="hljs-built_in">return</span> 0<br>  <span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$config</span> == <span class="hljs-string">&quot;default&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    config=<span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  NVIM_APPNAME=<span class="hljs-variable">$config</span> nvim <span class="hljs-variable">$@</span><br>&#125;<br><br><span class="hljs-built_in">bindkey</span> -s ^a <span class="hljs-string">&quot;nvims\n&quot;</span><br></code></pre></td></tr></table></figure><p>使用 git 来管理似乎会很有意思，可惜我 git 太烂，改天再逝。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kde-connect</title>
    <link href="/2023/08/08/kde-connect/"/>
    <url>/2023/08/08/kde-connect/</url>
    
    <content type="html"><![CDATA[<h2 id="使用-kdeconnect-优雅地传文件-局域网"><a href="#使用-kdeconnect-优雅地传文件-局域网" class="headerlink" title="使用 kdeconnect 优雅地传文件(局域网)"></a>使用 kdeconnect 优雅地传文件(局域网)</h2><span id="more"></span><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ul><li>Windows: <a href="https://apps.microsoft.com/store/detail/kde-connect/9N93MRMSXBF0">Microsoft Store</a></li><li>Linux: pkg name is <code>kdeconnect-kde</code>, <code>kdeconnect-plasma</code>, just <code>kdeconnect</code> or <code>kde-connect</code></li><li>Android: <a href="https://play.google.com/store/apps/details?id=org.kde.kdeconnect_tp&pli=1">Play Store</a>or<a href="https://f-droid.org/packages/org.kde.kdeconnect_tp/">F-Droid</a></li><li>IOS: <a href="https://apps.apple.com/us/app/kde-connect/id1580245991">App Store</a></li></ul><h2 id="2-cli"><a href="#2-cli" class="headerlink" title="2.cli"></a>2.cli</h2><p>图形界面的使用不再介绍，可以自行探索</p><p>使用 <code>kdeconnect-cli -h</code> 查看帮助，获得以下信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: kdeconnect-cli [options]<br>KDE Connect CLI tool<br><br>Options:<br>  -l, --list-devices            List all devices<br>  -a, --list-available          List available (paired and reachable) devices<br>  --id-only                     Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span>, to ease scripting<br>  --name-only                   Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices name, to ease scripting<br>  --id-name-only                Make --list-devices or --list-available <span class="hljs-built_in">print</span><br>                                only the devices <span class="hljs-built_in">id</span> and name, to ease scripting<br>  --refresh                     Search <span class="hljs-keyword">for</span> devices <span class="hljs-keyword">in</span> the network and<br>                                re-establish connections<br>  --pair                        Request pairing to a said device<br>  --ring                        Find the said device by ringing it.<br>  --unpair                      Stop pairing to a said device<br>  --ping                        Sends a ping to said device<br>  --ping-msg &lt;message&gt;          Same as ping but you can <span class="hljs-built_in">set</span> the message to<br>                                display<br>  --share &lt;path or URL&gt;         Share a file/URL to a said device<br>  --share-text &lt;text&gt;           Share text to a said device<br>  --list-notifications          Display the notifications on a said device<br>  --lock                        Lock the specified device<br>  --unlock                      Unlock the specified device<br>  --send-sms &lt;message&gt;          Sends an SMS. Requires destination<br>  --destination &lt;phone number&gt;  Phone number to send the message<br>  --attachment &lt;file urls&gt;      File urls to send attachments with the message<br>                                (can be passed multiple <span class="hljs-built_in">times</span>)<br>  --device, -d &lt;dev&gt;            Device ID<br>  --name, -n &lt;name&gt;             Device Name<br>  --encryption-info             Get encryption info about said device<br>  --list-commands               Lists remote commands and their ids<br>  --execute-command &lt;<span class="hljs-built_in">id</span>&gt;        Executes a remote <span class="hljs-built_in">command</span> by <span class="hljs-built_in">id</span><br>  -k, --send-keys &lt;key&gt;         Sends keys to a said device<br>  --my-id                       Display this device<span class="hljs-string">&#x27;s id and exit</span><br><span class="hljs-string">  --photo &lt;path&gt;                Open the connected device&#x27;</span>s camera and transfer<br>                                the photo<br>  -h, --<span class="hljs-built_in">help</span>                    Displays <span class="hljs-built_in">help</span> on commandline options.<br>  --help-all                    Displays <span class="hljs-built_in">help</span> including Qt specific options.<br>  -v, --version                 Displays version information.<br>  --author                      Show author information.<br>  --license                     Show license information.<br>  --desktopfile &lt;file name&gt;     The base file name of the desktop entry <span class="hljs-keyword">for</span><br>                                this application.<br></code></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Arch -&gt; Android</span><br><span class="hljs-built_in">alias</span> kcp=<span class="hljs-string">&quot;kdeconnect-cli -n &lt;device name&gt; --share&quot;</span><br>kcp &lt;path_to_file&gt;<br><span class="hljs-comment"># Android -&gt; Arch</span><br>乖乖用 GUI 罢<br></code></pre></td></tr></table></figure><p>高级用法请根据自己的习惯和文档自行探索</p><blockquote><p>参考链接: <a href="https://github.com/KDE/kdeconnect-kde">https://github.com/KDE/kdeconnect-kde</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>KDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch Linux 安装 VMware Workstation</title>
    <link href="/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/"/>
    <url>/2023/08/07/Arch-Linux-%E5%AE%89%E8%A3%85-VMware-Workstation/</url>
    
    <content type="html"><![CDATA[<h2 id="Arch-Linux-从-AUR-源安装-VMware-Workstation"><a href="#Arch-Linux-从-AUR-源安装-VMware-Workstation" class="headerlink" title="Arch Linux 从 AUR 源安装 VMware Workstation"></a>Arch Linux 从 AUR 源安装 VMware Workstation</h2><span id="more"></span><p>更完整的安装说明请参考 <a href="https://wiki.archlinuxcn.org/wiki/VMware">Arch Wiki</a></p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S fuse2 gtkmm linux-headers ncurses libcanberra pcsclite<br></code></pre></td></tr></table></figure><h2 id="2-安装-VMware-Workstation"><a href="#2-安装-VMware-Workstation" class="headerlink" title="2.安装 VMware Workstation"></a>2.安装 VMware Workstation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S vmware-workstation<br></code></pre></td></tr></table></figure><h2 id="3-开启服务"><a href="#3-开启服务" class="headerlink" title="3.开启服务"></a>3.开启服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start vmware-networks.service<br>systemctl start vmware-usbarbitrator.service<br></code></pre></td></tr></table></figure><h2 id="4-加载-VMware-模块"><a href="#4-加载-VMware-模块" class="headerlink" title="4.加载 VMware 模块"></a>4.加载 VMware 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo modprobe -a vmw_vmci vmmon<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arch base install</title>
    <link href="/2023/07/16/Arch-base-install/"/>
    <url>/2023/07/16/Arch-base-install/</url>
    
    <content type="html"><![CDATA[<h2 id="记录了我曾经安装Arch-Linux的大致步骤"><a href="#记录了我曾经安装Arch-Linux的大致步骤" class="headerlink" title="记录了我曾经安装Arch Linux的大致步骤"></a>记录了我曾经安装Arch Linux的大致步骤</h2><span id="more"></span><blockquote><p>update time：2023-4-16</p></blockquote><h2 id="0-连接-wifi"><a href="#0-连接-wifi" class="headerlink" title="0.连接 wifi"></a>0.连接 wifi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iwctl<br>station wlan0 scan<br>station wlan0 get-networks<br>station wlan0 connect SSID<br><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><h2 id="1-确保-UEFI-模式启动"><a href="#1-确保-UEFI-模式启动" class="headerlink" title="1.确保 UEFI 模式启动"></a>1.确保 UEFI 模式启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /sys/firmware/efi/efivars<br></code></pre></td></tr></table></figure><h2 id="2-禁用自动更新-mirrorlist-的-reflector"><a href="#2-禁用自动更新-mirrorlist-的-reflector" class="headerlink" title="2.禁用自动更新 mirrorlist 的 reflector"></a>2.禁用自动更新 mirrorlist 的 reflector</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop reflector.service<br></code></pre></td></tr></table></figure><h2 id="3-检查时钟服务状态"><a href="#3-检查时钟服务状态" class="headerlink" title="3.检查时钟服务状态"></a>3.检查时钟服务状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">timedatectl status<br></code></pre></td></tr></table></figure><h2 id="4-换源"><a href="#4-换源" class="headerlink" title="4.换源"></a>4.换源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/pacman.d/mirrorlist<br>Server = https://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br>Server = https://mirrors.hit.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><h2 id="5-分区"><a href="#5-分区" class="headerlink" title="5.分区"></a>5.分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfdisk /dev/sd(x)<br></code></pre></td></tr></table></figure><h2 id="6-格式化"><a href="#6-格式化" class="headerlink" title="6.格式化"></a>6.格式化</h2><p>&#x2F; 和 &#x2F;home 格式化成 ext4 类型，EFI 分区格式化成 vfat 类型，交换分区使用 mkswap 初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 /dev/root_part<br>mkfs.vfat /efi_system_part<br>mkswap /dev/swap_part<br></code></pre></td></tr></table></figure><h2 id="7-挂载"><a href="#7-挂载" class="headerlink" title="7.挂载"></a>7.挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount /dev/root_part /mnt<br>mount --<span class="hljs-built_in">mkdir</span> /dev/efi_system_part /mnt/boot<br>swapon /dev/swap_part<br></code></pre></td></tr></table></figure><h2 id="8-安装必需的软件包"><a href="#8-安装必需的软件包" class="headerlink" title="8.安装必需的软件包"></a>8.安装必需的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacstrap /mnt base base-devel linux linux-firmware dhcpcd iwd networkmanager wireless_tools wpa_supplicant vim git<br></code></pre></td></tr></table></figure><h2 id="9-配置系统"><a href="#9-配置系统" class="headerlink" title="9.配置系统"></a>9.配置系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Fstab</span><br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br><br><span class="hljs-comment"># Chroot</span><br>arch-chroot /mnt<br><br><span class="hljs-comment"># 设置上海时区</span><br><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><br><span class="hljs-comment"># 同步系统时间到硬件</span><br>hwclock --systohc<br><br><span class="hljs-comment"># 本地化</span><br>vim /etc/locale.gen<br>locale-gen<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;LANG=en_US.UTF-8&quot;</span> &gt; /etc/locale.conf<br><br><span class="hljs-comment"># 安装微码</span><br>pacman -S intel-ucode  <span class="hljs-comment"># Intel</span><br>pacman -S amd-ucode   <span class="hljs-comment"># AMD</span><br><br><span class="hljs-comment"># 安装grub引导</span><br>pacman -S grub efibootmgr<br>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub<br>grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="10-完成安装"><a href="#10-完成安装" class="headerlink" title="10.完成安装"></a>10.完成安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置密码</span><br>passwd<br><span class="hljs-comment"># exit</span><br>umount -R /mnt<br>reboot<br></code></pre></td></tr></table></figure><h2 id="11-图形化安装"><a href="#11-图形化安装" class="headerlink" title="11.图形化安装"></a>11.图形化安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Syyu<br>useradd -m -G wheel -s /bin/bash &lt;username&gt;<br>passwd &lt;username&gt;<br>EDITOR=vim visudo<br><span class="hljs-comment"># wheel ALL=(ALL)ALL ---&gt; wheel ALL=(ALL)ALL</span><br><br>pacman -S plasma-meta konsole dolphin<br>systemctl <span class="hljs-built_in">enable</span> sddm<br><br><span class="hljs-comment"># vim /etc/pacman.conf</span><br>[archlinuxcn]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br>pacman -Syyu<br></code></pre></td></tr></table></figure><h2 id="12-基础功能包"><a href="#12-基础功能包" class="headerlink" title="12.基础功能包"></a>12.基础功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S ntfs-3g wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts.emoji firefox yay<br><br><span class="hljs-comment"># fcitx5 中文输入法</span><br>sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-moegirl fcitx5-pinyin-zhwiki<br>yay -S fcitx5-material-color<br>vim /etc/environment<br>GTK_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>QT_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Arch Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/16/hello-world/"/>
    <url>/2023/07/16/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-Hexo"><a href="#Welcome-to-Hexo" class="headerlink" title="Welcome to Hexo!"></a>Welcome to <a href="https://hexo.io/">Hexo</a>!</h2><span id="more"></span><p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
